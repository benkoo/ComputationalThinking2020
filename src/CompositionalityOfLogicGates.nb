(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    224400,       4169]
NotebookOptionsPosition[    217644,       4061]
NotebookOutlinePosition[    218068,       4079]
CellTagsIndexPosition[    218025,       4076]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["The Composability of Universal Logic Gates: and their \
connections to Universal Properties", "Title",
 FontSize->36]], "Subtitle",
 CellChangeTimes->{{3.76745014830319*^9, 3.7674501493803787`*^9}, {
  3.767451025778482*^9, 3.767451130925548*^9}, {3.768592379973476*^9, 
  3.7685924005267687`*^9}, {3.7685929071125383`*^9, 3.768592945159032*^9}, {
  3.768971409123395*^9, 
  3.768971410058365*^9}},ExpressionUUID->"ad8972ab-8572-403f-918f-\
8eb0a46af5e9"],

Cell["Abstract", "Subtitle",
 CellChangeTimes->{{3.768592390365047*^9, 
  3.76859239129294*^9}},ExpressionUUID->"d6772fa3-04e5-4441-b067-\
bb4501ed39e8"],

Cell["\<\
It is well-known that simple logic gates, such as NAND, can be composed into \
arbitrary logical functions, even construct the full range of computable \
functions, including the so-called Turing Complete Machine. The range of \
computable functions, in practice, includes all functions that an Arithmetic \
Logic Unit (ALU) of a general purpose Computers can compute. For example, \
adding, subtraction, communication circuit switching, and keeping information \
content in memory. All these computational functionalities can be composed of \
one kind of simple logic gate, NAND. It is known NAND, NOR, and others, a \
total of 6 out of 16 possible 2-input, 1-output Logic Gates (basic gates), \
are Universal Logic Gates. By performing literature research in the area of \
Category Theory, Universal Algebra, and more specifically, Wiring Diagram \
(WD)Operad. In other words, using WD Operad, one may leverage the universal \
compositional properties of 2-input, 1-output Logic Gates can be extended to \
represent arbitrary m-input, n-output discrete-valued systems or \
equivalently, software defined computable functions. However, the composition \
and verification of computable functions are usually considered to be done \
through extensive human reasoning, and over time, engineered into a \
collection of solution database to be used for further solutions. This \
article shows that WD Operad can be used as a unifying compositional \
framework to automate the efforts of wiring diagram composition. It allows \
various computable functions to be discovered by an mechanical (Operadic) \
search strategy. Therefore, the compositional efforts can also be universally \
applied to create arbitrarily defined computable functions. The systematic \
process of extending 2-input,1-output to m-input,n-output system based on \
Category Theory also provides a generic method to analyze and synthesize \
other complex functions, therefore offers a universal reasoning framework to \
solve many problems in mathematics, database management, knowledge \
engineering, quantum information theory, that used to require a lot more \
human mental efforts without adopting this enumeration-based computational \
approach. 
  \
\>", "Text",
 CellChangeTimes->{{3.768592393695661*^9, 3.768592396895893*^9}, {
  3.768592948390229*^9, 3.768592958461883*^9}, {3.768593622435419*^9, 
  3.7685936339223003`*^9}, {3.76880481813479*^9, 3.7688050219337473`*^9}, {
  3.7689573624390917`*^9, 3.7689575695123043`*^9}, {3.76895902307973*^9, 
  3.768959033663623*^9}, {3.768959076646687*^9, 3.7689594559424057`*^9}, {
  3.7689594860362253`*^9, 3.768959541297345*^9}, {3.7689595752972727`*^9, 
  3.768959576488661*^9}, {3.768959619599197*^9, 3.7689597306057262`*^9}, {
  3.768959774768148*^9, 3.7689599678011637`*^9}, {3.768960011287511*^9, 
  3.768960062748888*^9}, {3.768960118846609*^9, 3.768960139888852*^9}, {
  3.7689611706954813`*^9, 3.768961248329973*^9}, {3.768961279339287*^9, 
  3.7689614407233667`*^9}},ExpressionUUID->"b10f00f5-9bb6-4629-af90-\
006c56da7081"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\

Introduction\
\>", "Subtitle",
 CellChangeTimes->{{3.768592402543577*^9, 
  3.768592405158249*^9}},ExpressionUUID->"22527d2f-774f-4be0-8963-\
835aa87f2bd0"],

Cell["\<\

In the world of 2-input, 1-output binary-valued logic gates, there are total \
of 16 possible gates, or boolean functions.  Based on the principle of \
universal computability, these 16 possible two-input binary-value \
compositional functions, provides the symbolic basis for executing all \
computable functions in the digital space. Out of these 16 possible different \
functions, 6 of them, such as NAND, NOR, Not(A) or B, ..., are considered to \
be \[OpenCurlyDoubleQuote]universal\[CloseCurlyDoubleQuote]. In other words, \
any other logical functions can be composed of one of these six basic logical \
building blocks. Therefore, this class of logical functions are considered to \
be \[OpenCurlyDoubleQuote]universal\[CloseCurlyDoubleQuote]. In practice, \
most industrial experts chooses NAND gate to represent this group of six \
universal gates. This paper explains why these gates are univerasl, and where \
the universality comes from.

This paper will present the information in the following three steps.
0. A brief literature review, setting the context and intellectual framing of \
why compositionality is the core of science of complexity.
1. Present the full set of 2-input, 1-output Logic Functions, and classify \
them into Universal and Non-Univeresal Gates. 
2. Introduce the rule of composition, demonstrate how one type of logic gate \
can be composed into other equivalent gate using a set of composition \
operators, in category theoretical terms, following Spivak\[CloseCurlyQuote]s \
Operad calculus.
3. Demonstrate the Universal properties of the 6 logic gates out of the total \
collection of 16 possible gates.
4. Present other \[OpenCurlyDoubleQuote]Universal Properties\
\[CloseCurlyDoubleQuote] in other branches of Maths, and demonstrate their \
relationship in terms of Compositionality of Universal Logic Gates.
5. Identify applications of Universal Properties and Composability, in the \
areas of Maths, Physics, Engineering, and Humanity in terms of universal \
properties.\
\>", "Text",
 CellChangeTimes->{{3.7674501522075157`*^9, 3.767450278631778*^9}, {
   3.767450318892047*^9, 3.767451021052302*^9}, {3.767451167180868*^9, 
   3.7674512542983522`*^9}, {3.767451322399823*^9, 3.7674517509799633`*^9}, {
   3.767451784609893*^9, 3.76745221929175*^9}, {3.76745225227575*^9, 
   3.767452301898766*^9}, {3.767452336888533*^9, 3.767453237872761*^9}, {
   3.767453282494234*^9, 3.767453356678928*^9}, {3.767453401799254*^9, 
   3.767453693991181*^9}, 3.767453880207061*^9, 3.767453911707499*^9, {
   3.767462408641523*^9, 3.767462617421626*^9}, {3.767463025419827*^9, 
   3.767463218604664*^9}, {3.767463315302066*^9, 3.767463363054411*^9}, {
   3.767463500144497*^9, 3.767463601731599*^9}, {3.768591988108315*^9, 
   3.768592372617633*^9}, {3.768592415576188*^9, 3.7685929017752028`*^9}, {
   3.768592991034816*^9, 3.768593486344491*^9}, {3.7685937055136766`*^9, 
   3.768593709041565*^9}, {3.768595070101466*^9, 3.768595104623539*^9}, {
   3.768805036370181*^9, 3.768805076591545*^9}, {3.768805111489154*^9, 
   3.7688051758682528`*^9}, {3.768805288594749*^9, 
   3.7688054294231977`*^9}},ExpressionUUID->"ec8c629c-9e90-4692-b044-\
0dc8211bc6d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Literature Review", "Subtitle",
 CellChangeTimes->{{3.76859371424763*^9, 
  3.768593716535574*^9}},ExpressionUUID->"e2fef28f-c24b-422d-9d35-\
ab029a0d8547"],

Cell["\<\
In Shannon\[CloseCurlyQuote]s 1937 Master Thesis, \[OpenCurlyDoubleQuote]A \
Symbolic Analysis of Relay and Switching Circuits\[CloseCurlyDoubleQuote], he \
demonstrated a connection between Boolean Algebra and Digital Circuit Design. \
Formulaic boolean computation can be mapped onto the behavior of Binary \
Valued Logic Gates. This observation was ground breaking from both \
theoretical and application viewpoints. Shannon\[CloseCurlyQuote]s \
formulation provides a bridge for mathematicians and engineers, to explore \
computation from two structurally equivalent, but implementation wise totally \
different angles. The contributions of establishing a class of isomorphisms \
between the behavior of digital logic circuits, and boolean algebraic \
equations, can be understood on two levels. First,  when engineers compose \
simple logic gates together to form another logical function unit, they could \
just as well write down mathematical formulas, and perform analysis and \
synthesis of possible values in writing. Therefore, computation can be \
\[OpenCurlyDoubleQuote]conceptually elevated\[CloseCurlyDoubleQuote] into \
algebraic operations, the results would be identical, but the computation \
happens not on the boolean values, but on the structure of the formula. \
Second, once the boolean algebraic formula has been simplified or \
\[OpenCurlyDoubleQuote]solved\[CloseCurlyDoubleQuote], the actual boolean \
value assessment of the formulaic function, can be \
\[OpenCurlyDoubleQuote]physically grounded\[CloseCurlyDoubleQuote] to the \
logical devices, value assessment would be \
\[OpenCurlyDoubleQuote]automatically\[CloseCurlyDoubleQuote] computed using \
the equivalent circuitry, without having to be mindfully computed using human \
heads. 

This bi-directional isomorphism between Boolean Algebra and Digital Logic, is \
a special case for the Adjoint mechanism between mathematical and physical \
systems. It is this adjoint relationship, that enables simulation and \
evaluation of complex mathematical ideas, onto devices that can perform large \
scale computation tirelessly. The expressiveness of boolean functions, given \
arbitrary number of logic gates, is known to be universal. Meaning that logic \
gates can be composed to express any computable functions. The question \
remains is, what kinds of logic gates are necessary to provide this kind of \
universality. More over, if one simple kind of logic gate provides \
universality, then, where does complexity of computing systems comes from?

In Wolfram\[CloseCurlyQuote]s New Kind of Science(NKS), and in Mathematica, \
one may enumerate many systems of m-input, n-output boolean functions. \
Wolfram argued that automaton systems that allows interesting visual patterns \
to emerge, are likely to possess universality. Wolfram extensively mentioned \
the 30th rule out of 256 possible 3-input, 1-output automaton rules, often \
referred to it as :\[OpenCurlyDoubleQuote]Rule 30\[CloseCurlyDoubleQuote]. \
Rule 30 is of interest to Wolfram, because it was proven to be \
computationally universal. Therefore, the notion that one simple rule that \
could be placed into a repetitive arrangement, maybe used to perform \
universal computation. 
\
\>", "Text",
 CellChangeTimes->{{3.7685937189454203`*^9, 3.768594398366111*^9}, {
   3.768594433703866*^9, 3.768595065904602*^9}, {3.7685951189240026`*^9, 
   3.768595226171178*^9}, {3.768595288958725*^9, 3.768595352845056*^9}, {
   3.7685955259659023`*^9, 3.768595953710927*^9}, 3.768596304859825*^9, {
   3.768596416782146*^9, 3.768596424503237*^9}, {3.768597077151826*^9, 
   3.768597080103928*^9}, {3.768724661778808*^9, 3.768724858093091*^9}, {
   3.768724897087901*^9, 3.76872500332778*^9}, {3.768725033437109*^9, 
   3.768725045345879*^9}, {3.768725084395665*^9, 3.768725181478321*^9}, {
   3.768725225172517*^9, 3.7687253637207003`*^9}, {3.768805444462491*^9, 
   3.768805449357174*^9}, {3.7688055146845083`*^9, 3.768805515252204*^9}, {
   3.7688055467451067`*^9, 3.7688055509203*^9}, 3.768805608853245*^9, {
   3.768805806448978*^9, 3.7688058071552553`*^9}, {3.768805844269227*^9, 
   3.768805904010148*^9}, {3.7688059425871563`*^9, 3.768805954356374*^9}, {
   3.768806019703783*^9, 3.768806042412754*^9}, {3.768806076848899*^9, 
   3.768806098409164*^9}, {3.768806139741721*^9, 3.768806144005145*^9}, {
   3.768806422128314*^9, 3.768806425124448*^9}, {3.7688064575958347`*^9, 
   3.768806678051258*^9}, 3.768807680016773*^9, {3.768807739499658*^9, 
   3.768807744545411*^9}, 3.768807896908064*^9, {3.768807934107387*^9, 
   3.76880793670545*^9}, {3.768820321915303*^9, 3.7688205129557667`*^9}, {
   3.768820563479466*^9, 3.7688205860995083`*^9}, {3.7688206659534893`*^9, 
   3.768820681477879*^9}, {3.768820786441463*^9, 3.768821012901668*^9}, {
   3.768821045387505*^9, 3.768821047379105*^9}, {3.768961779911677*^9, 
   3.768961783496491*^9}},ExpressionUUID->"7e509f4b-76b4-4b53-ad65-\
78ba6b0e2b59"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"CellularAutomaton", "[", 
    RowBox[{"30", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "50"}], "]"}], "]"}], 
  "Input"]], "Input",
 CellChangeTimes->{{3.7688077510326567`*^9, 3.7688077510379744`*^9}},
 CellLabel->
  "In[199]:=",ExpressionUUID->"4f53692e-3f72-4b7e-aa61-6bfa25918545"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJy1lVFSwzAMRCVuwhm4CUdghm/u/0eLrd2VsWM3iUPJtImj9dNKyvvXz+fX
m5l9PP6/7Xm4Pz7PU/3+OD//vP76u1dXxMVyo1zFfSsRLBaXBYxZbnpdEI8b
49TdaKi4+vcLUjVK2WeNkjaHBVgXcTxwPQHWy+YiFYtlg7I5wwKsi1wiB1ge
YQ3wErMBTZsb+IIoVHGgCTyhkQpNAFm6voSd4gDRAE9opCInYOKLR0KQO0FD
4VnwMxU5ARNfkH4XeT5pjImNwtJWZdovJvLMHsPDisi8t8dKv6h8fCS8bJQ3
+ixH/aLykT0JHxXiodRVmfQL86XZU9vdRXakMukXXmb2JDxaZsQx9cU1X6bM
6I3I85hj6oucPDNHAbLYDjTm/ZKnFtqSbdjtjxHLqF8wPGBxJeMUnnAoy6Bf
MDyMsODwyPSKykG/eAyP+IKxiOcXNGb94t58Mczlw/4YsfR8MUkSTAq2JT9a
lo4voiylxIJb1jjyRZWl/Vhwr6n0fUnKrLD++2OVpfUlKTsrbK0/RiytLwzK
CgPfGZWOLzJNWGpl/QmNkS8yTZDFV/pjxKK+mEri9XWWQ1nUF5kmGO/nOZRF
fUHHsNMvcCiLjlyO/MC4ptHzhSO/il/kUBadJhr8OgdCuvqSg9+h8d+X6MfX
3h8LKsmX6JNr/dFRSb6A6zaOqqK+ROZu5Kgq6ks4c6tG68vZ98eCSop+P0dV
SdF3aCRfNvghKuHLJo6qgjG/79Axv1Vlox+ispmjqOzXOMXxC/ECEP0=
   "], {{0, 0}, {101,
    51}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{3.7688077523758297`*^9},
 CellLabel->
  "Out[199]=",ExpressionUUID->"8d293e16-1e31-4026-b85c-79a41b1d4a3e"]
}, {2}]],

Cell["\<\

In the 2-input, 1-output family of 16 possible \[OpenCurlyDoubleQuote]simple \
rules\[CloseCurlyDoubleQuote], NAND gate, and 5 other gates  are known to be \
universal logic components. Therefore, it would be more reasonable to \
consider these 6 rules are \[OpenCurlyDoubleQuote]simpler\
\[CloseCurlyDoubleQuote] rules than any of the interesting 3-input, 1-output \
NKS rules. It would be rather trivial to know that if 1-input, 1-output \
binary system would not be able to be composed into universal computing \
functions. Therefore, we can assert that the class of 2-input, 1-output NAND \
equivalent gates, are the simplest possible rules in boolean valued systems.

The Rule-30 automata is visualized as a one-dimensional array of interacting \
3-input, 1-output logic gates evolving over time. Unlike Wolfram\
\[CloseCurlyQuote]s 3-input, 1-output automata, the Universal Logic Component \
of common digital electronics starts with 2-input, 1-output logic gates. The \
possible outcomes of 3-input, 1-output logic gate can be illustrated as \
follows:\
\>", "Text",
 CellChangeTimes->{{3.768815098971383*^9, 3.768815279175622*^9}, {
  3.768815425086301*^9, 3.768815455844751*^9}, {3.76882101523919*^9, 
  3.768821018030303*^9}, {3.768821099719118*^9, 
  3.768821116957294*^9}},ExpressionUUID->"25eda055-c616-4502-b31d-\
a1d465daf684"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", "30", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.768807762273972*^9, 3.7688077775990753`*^9}},
 CellLabel->
  "In[200]:=",ExpressionUUID->"eace93fc-89c1-439d-a20e-0ddf324c33d3"],

Cell[BoxData[
 GraphicsBox[{{InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{0.6153846153846154, Rational[1, 2]}, {0.6153846153846154, 
      0.5}], {Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{1.8461538461538463`, Rational[1, 2]}, {1.8461538461538463`, 
      0.5}], {Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{3.076923076923077, Rational[1, 2]}, {3.076923076923077, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{4.307692307692308, Rational[1, 2]}, {4.307692307692308, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{5.538461538461538, Rational[1, 2]}, {5.538461538461538, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{6.76923076923077, Rational[1, 2]}, {6.76923076923077, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{8., Rational[1, 2]}, {8., 0.5}], {
     Center, Center}, {1.2307692307692317, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], 
         RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{9.230769230769232, Rational[1, 2]}, {9.230769230769232, 0.5}], {
     Center, Center}, {1.23076923076923, 1}]}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 1}}], 
     LineBox[{{1.2307692307692308`, 0}, {1.2307692307692308`, 1}}], 
     LineBox[{{2.4615384615384617`, 0}, {2.4615384615384617`, 1}}], 
     LineBox[{{3.6923076923076925`, 0}, {3.6923076923076925`, 1}}], 
     LineBox[{{4.923076923076923, 0}, {4.923076923076923, 1}}], 
     LineBox[{{6.153846153846154, 0}, {6.153846153846154, 1}}], 
     LineBox[{{7.384615384615385, 0}, {7.384615384615385, 1}}], 
     LineBox[{{8.615384615384617, 0}, {8.615384615384617, 1}}], 
     LineBox[{{9.846153846153847, 0}, {9.846153846153847, 1}}]}, {
     LineBox[{{0, 0}, {9.846153846153847, 0}}], 
     LineBox[{{0, 1}, {9.846153846153847, 1}}]}}}]], "Output",
 CellChangeTimes->{3.768807778612425*^9},
 CellLabel->
  "Out[200]=",ExpressionUUID->"241a9d2c-01ad-476d-9f29-550112eaba4f"]
}, Open  ]],

Cell[TextData[{
 "However, when searching for literature that explains universality of logic \
gates, detailed explanation of whether they are universal or not has not been \
accessible to non - computing science majors. Therefore, we wrote this \
article to serve two purposes :\n  1. Enumerate all 16 possible 2 - input, 1 \
- output logic gates, illustrate exhaustively each of the 16 possible gates \
is universal or not.\n  2. Demonstrate that \"computational universality\", \
or complexity of system, is realized through the compositionality of Logical \
Gates. In other words, a component being classified as as a type of universal \
gate, would not be sufficient to support computation universally. The \
complexity of supporting many and all different kinds of computation comes \
for the composition of many of these same type of universal components. \n  \n\
  In other words, we want to emphasize that having access to Universal \
Components is only a necessary but not sufficient condition to implement a \
Turing Complete machine. The true power of Universal Components comes from \
not the component itself, but its ability to be generatively composed into \
other kinds of computable functions. Therefore, identifying an efficient \
mechanism to generate and examine the equivalence of logically composable \
functions, is the true benefit of recognizing the \"Universal Property\" of \
Universal Logic Components. By focusing on the generative mechanism of \
logical functions, we can further extend this functional compositional \
techniques to analyze and synthesize other kinds of effective \
computing/simulation systems in the real world.\n  \n  In [Spivak 2013]: \
\[OpenCurlyDoubleQuote]The Operad of Wiring Diagrams\[CloseCurlyDoubleQuote], \
he explicitly spelled out an NAND gate is a cospan, as depicted in this \
following diagram Example 2.2.11 of the corresponding paper. (The following \
screen capture to be removed for later editing.)\n  ",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3Qm4TfX+x3GRuVCGyBwNhkwNSkUjkqREk666xL3IPKQSkaZr6EqGjGW6
GhQqpShFkYuuJIkSqWhQNGj8/f+f7/Os82zb3vvsc/a09tnv13PXPTp7Wnut
vc9e67O/v++v+t97X9M1f758+foX+f//u+bWwRf163frkHal/v8/2vfq/89u
vW7rcnmvAbd1u63fOX8v8P+/fOr/r7vi6Hz5/v9/+RwAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAACAI/z111/uzz//dH/88Yf9jPW+vPvRv/OKwG2U
l55XbsVjP7NNAQAAAABAovz6669u//79bs+ePW7Lli1u/fr1bvfu3Tm+H2UW
P/30k9u3b5/79NNP7X4++OAD+126+/nnn+157dy5023cuNG9//777vvvv0/1
aqVEvPbzL7/84r7++mv32Wefuffee89t2rTJXocAAAAAAADx8vrrr7vmzZu7
kiVLuqOPPtpVqVLFTZw4Mcf3c+DAATd69GhXvnx5V7RoUZcvXz7Xrl07t23b
tgSsdfKoFmnatGnuxBNPdMWKFXNHHXWUu+yyy9yaNWtSvWopEa/9PHPmTFep
UiVXvHhx26YXXXSRe+uttxK01gAAAAAAIFV+//13d+jQIRvrlYrH/uabb9yC
BQvc2Wefnevcy6sD+vjjj93AgQMtE0mH3Cuaba/aJNUljRw50h1//PG+z70S
+XqK1372tukDDzzgypYtS+4FAAAAAEAetWHDBjdv3jy3Y8eOlK2DHrtz5865
zr0C/ec//3FVq1ZNi9wrJ9v+pZdecg0bNvR97pWs11M89vMrr7xieSu5FwAA
AAAAeZPO/UeNGmV9klJFvZq6desWl9zrqaeecieddFJa5F452fYvv/yyO/PM
M32feyXr9RSP/fzaa6+5c889l9wLAAAAAIA8SOPGnnjiCffPf/6T3CvJcrrt
0yH3SubridwLAAAAAABEsnfvXjdgwAB31VVXkXslWU63fTrkXsl8PZF7AQAA
AAASTfPN/fbbb9bH+ueff3a//vqr1Xzo9/q3fq8+16HoerpMPaYPHjzofvzx
R7u+bhvpcXR973G06Pf6nRbdn36XynUV9fTWdXU97/p6bC3e48byOKG2h3cd
77G95xhue+ryOXPmuFNOOcW1adPGbdq0yR5bi+4j1nUMR/ftrbeeg+4vkblX
NK8R73WgddNP79/ef0e6npZw2yqU3G77ULmXty0j7etgse6/eD4n7znotloX
Lfp3uPdhoNzs52DR5l6J2GYAAAAAAH/TeaDmVXvuuefc448/7u6//377t84L
d+/e7RYvXuymTJli55M6Twyk88XvvvvOvf32227ChAlWIzJkyBA3e/Zst3nz
ZjuHD/U4U6dOdQ8++KCbP3++++KLL2zRuavuQ3mJ/r1r1y47J03Fuooee8uW
LTbe695773X9+vVzw4YNc8uWLbPsQuv+9ddfH7E9o30cnYPv3LnT1nn69Onu
4YcfdnPnznVffvmlZQbvv/++Pfb48eOtv/h7771nv/cyAOUMypkeeeQR16BB
A5cvXz53wQUXWGaxatUqW9avX2+1O7ldx3Cvl2+//dbWRz3Jtb3VC0rbf+vW
rXHPva655hqrOdJrZPny5Xa/ev28+eabbs+ePYe9RjRH4Pbt293GjRtt+ymz
0TZYt26drZ9Hr42PPvrIfv+///3Prq/H0DaJRizbPjD30vbXOuuxddtHH300
5L4OFsv+i/dz0jpqXbUNtf69e/d2ffr0cePGjbPbaFtHypVys5+DRZN7JWKb
AQAAAAD8T+elM2fOtPnQypYt64466ij397//3c4lhw8fbkv79u1tzrXHHnss
63Y6T1bO0bdvX3fJJZfY+aMym7Vr17rbbrvNXXjhhZbjqLbCe5xZs2bZ+ekJ
J5xgj9O6dWu7zy5duriePXu6GTNm2H83b97czr117rt///6s8/9krauyiCef
fNLW68UXX7Tzet2Hsrh//etfrmbNmu7aa6+1jCVQTh5H5+HPPPOMa9KkiatQ
oYLLnz+/jSvTebu2w+DBg23uv1dffdXW4+STT7as0MvzlJnpv6+44grbVoUL
F7bt2qxZM/udFj2mbp/bdQym7aBt3aFDB9tHyuT037qPgQMHuhEjRriOHTvG
NffS81BO0b9/f8tkVqxYYdvtb3/7m+Uc06ZNc99//729Rj755BN3zz33uDp1
6rhjjz3WspvixYtbzqQM0aPsVL2rihYt6o4++mhXpkwZd8MNN7h33nknqnXL
7bYXL/e69NJL3aJFiyy/Vf4SaV8HimX/JeI5KUv697//7W655RZ7Dt98843l
VKNHj7bXtl4X2i/hMrzc7Odg2eVeidpmAAAAAID0oXPDyZMnu1KlSrkrr7zS
zjN1jq6ap06dOlmOMGjQoKwxbaqluf766+0cWeengXbs2OG6du1ql+m8NvBc
VXmP7rt06dLu+OOPt5zq9ddfP+z2yiV0e2VbOg8OrqtK9LrqPFrn8YFZiUdZ
hPIB5TuBuVcs20S1Y8qKWrZsaTUzqmELrG/R+fnll19uOUKoLEU1OSeeeGK2
/ZhiWUc9b23z0047zTKjwPopUW6i/KZcuXJxzb2USfXo0cPqswIpD9V+0HW0
r5W3eFSPNnToUFeoUKGw20S5h2r4zjrrLLdw4UJ7TeVGtNve4+Ve5513nrv7
7rutZi7afR3L/kvUc9JrV7mR6hUD94EyUtV8af9pnULVvkks+9kTKfdK1jYD
AAAAAPjfggULXPXq1a1eSrUXGtOm8T+qvRg7dqyNc5IDBw64Bx54wHIn1VDo
HDeYzud1rqr6leBzVe9ct2HDhpY5hPLGG2+4pk2b2voobwnOJRK5rsrRlEto
zFmoMVqqARs1atRhuVcs22Tp0qXujDPOcOXLl7exlME5n87NdRvdtx43WLQ5
RW7XUdtAz1kZUYsWLdy7774b8v6V2bRq1SquuZfyDI2jDEX9oJRP1qhRw+qm
Al8jXr6k7aq6qmDK8TRGU3VJsfR3ym3upWxW+yAn+zrW9128n5Peb6p/LFCg
QMj38sqVK61eTJcpyw0l1v0skXKvZG0zAAAAAID/eeeg9evXP6IuIpD67ygX
qlSpktUnhaLePhrLpewquJ7LexzVN/33v/8NeXuNaVLNjsb/qaZL/ZqSta4a
S1mxYkWr6VKtiM6dNQbKO99WPyCN6QqsYYllm3hZiPKiwPGZHo0lUy1VwYIF
reYlWLQ5RW7X0etXr8dX76Zw48H02BovGM/cK9JrRFmnxsQVKVLEerBrv3g0
1k69pjTOUWNGg/s3KbvTtvby0dzKbe6Vm30d6/suEc9J77169epZ3eaGDRsO
u0zv2euuu87yaeVVocS6nyVS7pWsbQYAAAAA8D/vHFQ9cFavXh32eup9pdqk
008/3c6RlQsFL8oVdC4camxRNOe6on5gGjen82rdJlnrqvNg9a9S7yf1OGrb
tq31MFIfdI2h07i04PFQsWwTLwsJV//2ww8/WAaouhqN+wwWbU6R23VUDd35
559vtXWTJk0Ke//Jzr3k2WeftbkH9Rp5+umnD7tMPZuUX2pfBtaoKb/U+DzV
BUYz52Akuc29crOvY33fJeI56X2gfniqn/PmdNRzUG6tHOymm26y+9L7J5R4
7OdIuVeythkAAAAAwP+8c9BQNRUenduOGTPGzsvVj13X/cc//nHEon7Umg9O
vYpeeOGFkI+T3bmuxkapn5QeR72CkrWuup3GxjVu3NjqhVR7ox76ysGUV6h2
RflX4NyKsWyTwJ5Pofp3eVmIat/UkypYNDlFLOuocWDKvLQv1BM8nFTkXhp/
qX2i56SaoECq1VOeoW2j1483nlF91jVXoG4bq1j6e+VkX8fjfZeo56RaOo0P
XLNmjWWJqpPUnBUa86o5IELtG0889nO43CuZ2wwAAAAA4H/eOWi7du2sp04o
GuOmvkPKgdTP+s0338z142R3rqu+V40aNXIlSpSwuQKTta7Ks7R89tlnNhZN
5/B6rJIlS9pYK683k7KvWB7Hk6jcS+f9qmfSc4llHZUR6bmrZkZ91cJJRe6l
nlDqOxbqNaI8RnmX5m3UeqkXv7bFkiVLLDuJRy+naLZ9oNzu63i87+L9nPRT
66saKWVOykW17no/ak4Jry9XPHKvSPs5XO6VzG0GAAAAAPC/aLIkUd939YmO
1Is6msfJ7lxXdUbVqlWz6yp7Sda6ag654H7jGsulvu3qGaWxc8qAtH6xPI4n
UbnX1q1bLQfQWK5Y1tEbY6Yl1ByXnlTkXosXL3Z169YN+RoRb4ymrqP9pfF3
Gj87Y8aMmNbPE+2298Syr2N930Ur2ud08OBBN378eMu11BtLzycw5wuVe3nZ
mSce+znSOMdkbTMAAAAAgP9FmyVpLJD67Jx88snWAz4cnQOr5ia4p3g057oa
k6bs5JhjjnFNmjQ54pw1kes6ffp0m1cx1Dx/6l+kc3099siRI2N6HE88ci9l
ccE5xbJly2wbev33c7uO6nemPmpen6bgGiZPsnMvrYfGXeq5h3qNyL59+6yv
ver0lFlq+6qGb8uWLTGtnyfabe+JZV/H+r6L93PS9j777LNd5cqVrWd88OtC
OdnNN998WO6l7R7Yay0e+zlS7pWsbQYAAAAA8L9osyT1R1JfHI0fizS/31df
fWU9qHWuH+pxLrvsMusJFO4xunbtanmFHis4P0jkuuocvUOHDnbbUDTnm3ql
33nnnXHZJtllIYFzW4bKvbx6LM17qZ5WHvVEmjBhgtWvxbKO2vZ33HFH1r4I
rmHyvPfee7Y/4pl7aZ69cK8RzX2ofRDuNRJ8X6r7+uc//2nZXahMMzei3fae
WPZ1rO+7eD8nzXFQrFixsPMgvvPOO65FixaH9efTvlBu7InHfo6UeyVrmwEA
AAAA/E31Dt64Qs1fmF09jM7ZVXuhOiCd82r8UiD199F55L333ut27tx52GXe
ua76AakGI7jGQrfVPGzqia3z4eC+PIleV+Vep556qtV9Bc/3p8fW/WmeOvW3
j8c28Xp2n3POOSHPu3XeP2TIEMtCdO4efL+qx9J2Um9ujevz1tPLGAIzntyu
o+bMVIbRrFkzq/sJvp3yBNXkKC9RXZi2Ybi6sGho3bX/NbZNYyu1XoH0+Hqu
yk5DvUYCeXVHhQoVsuftbaN4yMm2l1j3dSzvu3g/J713y5QpY3ni8uXLD7sP
vW/UR009uZR7jR49OmvdAt838djPXt2ZXptvvPHGEZcnY5sBAAAAAPxJ57Pq
XfX555+7+++/3/pGqx5l/vz5VlehHj6hamOUc6jHua6rGh/VdmiMlu5LP1WD
MXz48JBjz7zcS+OWbrzxRvf888/b42gMoWqJ1MtH57Cq4Vi4cOFhfbSTsa7K
bAoXLmzzvynv+fHHH+0+tH5ffPGFPXaPHj3crl27Ynoc3Z/qTDRGTFlRjRo1
rBZJY/N0mbID3U51MNddd53159YceVon1QV5mZzWaeDAgTbn4gMPPGDbUD3c
1cMqsAdZLPtNj6U5LpUfaF3Wr19v20W307qoRkj3V6tWLavL6dKli9XhaZ/k
Jv/Sa0TzaWo+Ro0nVYai+9Lj6afGymkePtVNBb5GQtG6q/6sdOnSrmfPnmHr
1XIj2m0fr30dy/su3s9J+0C5s56PxgUrs9Nz0bqsW7fOsqR//etfrk6dOq57
9+5u48aNNoZSuaknlv2sbaFtqn2rGkO99qZMmWLzFQTWdSVjmwEAAAAA/Enn
farFUO1U9erVrQ+OFv1bv1NOEJzvBNI4KJ3Tqq6jY8eOdv6o26inkrKRUAJ7
+uhc+q677rLaFp0jK0/SeKUBAwYcMX4xWeuqehT1qVIfKF2uDEDn1mPGjHG3
3nqrjbnavn17TI+jfE79uUM9F/UjUj6i66pOSddRTqJaKv1UPyXVm/3vf//L
ekzVvGkMn2qJ/v73v9vjKVfRNovXfpPNmze7Xr16Wf3NoEGDbJ9p3ykfUX7Z
uXNnm/vxuOOOc2XLlrV5L5Xb5JQytrvvvtt9+OGHlpdonKUe9+GHH7b1VO1O
qNdIOKoD0ng35S7xlt22j/e+ltzuv3g9J4/Gtmo8coMGDVynTp3sPaP5FrU+
6teljFrvF73flV0plzp06FDW7WPZz6o30zYM3qbKt0LNcZDobQYAAAAAyLtU
+6NMROePqvuIJLiXtcYZaXzR22+/bee/4XrwJGtdv/32W6sjEdWvaJycchOd
l6u3UbT1SznZJvGg7bhjxw4bp6a+RsHjueK5jqrFef/99y2P0X2I6oL0O9XT
fPTRR1bLFK8+4bqfWF4jGiunMXrherbFKjfbPh4S+RqL9jnp/aD5T1WrpnGE
yqgCsy3dTusWzfrFup+jkez3JQAAAAAgs0QzhxuQGxoPqMwlMKNRdjlr1iyr
qwIAAAAAAEgkci8kgrIu9YPS2FmNafPq8lSHpDGqqkMDAAAAAABIFGUR8+bN
sz5G6hGlTCKWef8Aj8bHdevWzRUsWNB6jqnuS73L1dNL/dmSNfYQAAAAAABk
FmVb6gmlfvBDhw61uRjr1q3rJk+ebPPHaSwaEAu9jtQDXbWEmpNTrzfN0afM
S5kYAAAAAABAImgeuHHjxrnatWvb3G+aU03zrtWvX9/mb5w7d26qVxF5gOoH
lX1prknN0zdkyBDG0gIAAAAAACBP0NhG1RVqDkLNSQgAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAFLvr7/+cr///rv77bffWFhYWHy5/Pnnn6n+UwkA
AAAASEPfffedW716tXv66adZWFhYfLcsWbLEbdu2LdV/KgEAAAAAaei///2v
a9OmjcuXLx8LCwuL75ayZcu6f/3rX6n+UwkAAAAASEPKva6++mpXvHhxV6pU
KRYWFhbfLCVKlHCVKlVyo0ePTvWfSgAAAABAGtq4caPr37+/e/DBB90HH3zA
wsLC4pvlhRdecL169XKTJ09O9Z9KAAAAAEAaUr3XP/7xD/fvf/871asCAIf5
3//+5/75z38yzhEAAAAAkCvkXgD8itwLAAAAABALci9E8tdff7mff/7Z/fTT
T/ZvIJnIvQAAAAAAsSD38rdffvnFffvtt4ct3333neVQf/75Z8jb6Pe6XNfT
sn//flu8/1aOFa19+/a5Bx54wA0ZMsRum+p1PnTokP138P2HW3QfBw4csHUK
99jwL3IvAAAAAEAsyL38bc6cOa5u3bqudu3a7qSTTnIVKlRwVapUcX369HGf
f/55yNt8+eWXbtSoUa5+/fquXr16dvvTTz/d/vucc85xEyZMiPrxX3/9dde0
aVN33nnnuVdffTXl67xgwQJ3xhlnuFq1arnq1avbfZcvX95Vq1bNHq9OnTpZ
i27fpEkTd91117lx48a5999/33IzpA9yLwAAAABALMi9/O23335zP/zwg9uz
Z4/lQscff7wrVKiQZT0PP/yw+/XXX4+4jeqaVOu0du1aq9OqVKmSZUDKfrZs
2WL1T9HQ/WgevVKlSrmyZcu6hx56KKqaqUSus+5bNVwff/yxu+OOO1yxYsVc
gQIFXOfOne3xdL2DBw9mPf7KlSvt/nRfWiZNmuS+//57ar/SBLkXAAAAACAW
5F7p44knnnBt27Z1V1xxhcufP7/VQS1dujRihqPs55577nEjRozIcX+uXbt2
udtvv91ypXz58rmbb77Z6rL8ss7z58+3OrKSJUu6kSNHRlwP1Xr97W9/cxUr
VnR9+/a150a/Mv8j9wIAAAAAxILcK30oQ1IWNG/ePFejRg3Lo2666Sa3c+fO
sLdR7dPUqVPd+PHjc/x4r732muvYsaONOTzqqKPc2Wef7V588UXfrPN//vMf
G9+oerT77rsv23VR3Ziyu6JFi7pu3bpZ7zL4G7kXAAAAACAW5F7pQxmS8p2v
v/7aDR8+3PIbjT/U79S3PRRlSNOmTXOPPvpojh7r999/tzGO/fv3t/GNxxxz
jDvuuOPssXIyRjCR65zT3Euefvppy9+0KFv7448/on4uSD5yLwAAAABALMi9
0oeXISl32rhxo2vXrp2NHTzzzDPdokWLQuZRuc29PvnkE3f//fe7KVOmuOXL
l1t/eI11vOGGG2yMoB/WOTe519atW228o+rXrrrqKqsBg3+RewEAAAAAYkHu
lT4CMyT1pnrmmWfcqaeeajmS5izcvn37EbfJbe6lHlx33XWXe/fdd93u3btd
z549LStq1KiRe/75532xzrnJvVTHprkhVb9WpkwZq2Wjz5d/kXsBAAAAAGJB
7pU+AjMk0byEmi+xePHiNmfisGHD3E8//XTYbXKTe2nORGVDgwcPdj///LM9
3uOPP27940uUKGGPE+1Yx0Suc25yL1GdWZ06dax+TX2+gh8f/kHuBQAAAACI
BblX+gjOkETzFGrsofrFN2jQwPpXBV6em9xr27Zt9jgzZszI+t3KlStds2bN
LCtq376927FjR8rXObe516uvvuoaN25sz+Xaa68NWXMGfyD3AgAAAADEgtwr
fYTKkET1S96ci9dcc431sPLkJvdasmSJGzJkiPXj8nz55Zeub9++9hj16tWz
rCrV65zb3GvVqlXu0ksvtdzroosucm+99VbUt0VykXsBAAAAAGJB7pU+wmVI
P/zwg/2+SJEilgFp3sRff/3VLstp7qUxjuPHj3cDBw50hw4dOuwy3Y/mdFRv
rHvuuSeqvliJXOfc5l56zbdp08ZyL9WbPfvss1HfFslF7gUAAAAAiAW5V/oI
lyHJhx9+6Dp16mRjB9W7au7cue6PP/7Ice71wQcfuBEjRrjZs2cfcdnbb7/t
mjdvbnnR1VdffViNVirWObe5l3r1X3HFFfY8zjvvPPfaa69FfVskF7kXAAAA
ACAW5F7pI1KGJC+99JJr2LChjR1UPZP6aOUk91L91nPPPed69+5t/by+/fbb
w5aPPvrI5nVUXlS7dm03b968lK5zPMY5tm3b1m3ZsiXq2yK5yL0AAAAAALEg
90of2WVImpdw3LhxlgNpLOKAAQPcnj17os69dPuHHnrIlStXztWoUcOdfPLJ
RywVKlRwBQsWtPGJgwYNsnGRqVrn3OZeS5cudWeccYZlbbfddpvNMQl/IvcC
AAAAAMSC3Ct9ZJchyccff+y6dOnijj76aHfqqae6CRMmuClTpkSVeyljuPfe
e62OS722Qi3vvPOOa926tdVKXXnllVaflap1zk3upfWYNWuWK1++vCtRooQ9
X/gXuRcAAAAAIBbkXukjmgxJli1b5ho3bmz1TE2bNrWxidllSBrjqDkaNY+j
cqhwVBulnvb58+d3p5xyiq1TqtY5N7mXasl69epl669eZcrx4F/kXgAAAACA
WJB7pY9oM6RffvnFaqZKly5tYxJPOumkbDOkAwcOuLFjx1r9U3b3v2DBAsub
ChUq5Pr27WuPl4p1zmnupXVQ/7K6deu6SpUq2byV0cxJidQh9wIAAAAAxILc
K31ofJ7mWtSch9n59NNPXffu3W3soDKe7DIkvQ6GDx9uuVB23nvvPXfNNdfY
WMeWLVu69evXp2SdlXtVrVo1qtxLmdcnn3zievTo4YoWLWrjKj///PNs1wmp
Re4FAAAAAIgFuZf/KbP5+eefrR6rW7duNlYvu/opWbFihTv//PNd5cqVQ2ZI
qnVSHvXjjz+6xx57zLKs5cuXZ5tR/fDDDzbWUblX9erV3eTJk93vv/+elHUO
XPe5c+fa9UqWLOlGjhx5RO2W/lvrpfXYvHmzjZ3U9bt27eq2bt2a7bog9ci9
AAAAAACxIPfyN2VS27Zts2xJcxCqDmrgwIFuw4YN7rvvvouYJakPvfrD63Ya
Qxhs//79bs2aNW7YsGHWT151U7fccot79913bZ7FYMqQdJuNGzdavVSBAgWy
+mS9/vrr7ptvvrHbJXKdNR5Sj6ParbvuussVK1bM1sOr39Jl3rJr1y63atUq
N2rUKHfWWWe5OnXq2OtcuR3SA7kXAAAAACAW5F7+Nm3aNMuNNJ7v5JNPtl7y
qrGqWLGiu/32292+ffsi3l5Z0MSJE22OxkDKnpRL6X50f7rvmjVruipVqrgL
L7zQLVy48Ij70vjGTp06WU8trcdpp51meZlu5/1O+USi1lnmzJlj91muXDlX
pkyZw5YKFSrYY2pd9Dz0eLpuixYtrB5s06ZN9PNKM+ReAAAAAIBYkHsB8Cty
LwAAAABALMi9APgVuRcAAAAAIBbkXgD8itwLAAAAABALci8AfkXuBQAAAACI
BbkXAL8i9wIAAAAAxILcC4BfkXsBAAAAAGJB7gXAr8i9AAAAAACxIPcC4Ffk
XgAAAACAWJB7AfArci8AAAAAQCyUe+m8cty4ce7QoUMsLCwsvlm8v09jxoxJ
9Z9KAAAAAEAaUj3FwIEDXZ8+fdzMmTNZWFhYfLOozqtLly5uxowZqf5TCQAA
AABIQ6qnaNOmjcuXLx8LCwuL75ayZcsyzhEAAAAAkCvKvdq2beuKFy/ujjvu
OJYULsccc4wrUqSIK1GiRMrXJdOXYsWK2b4oVapUytclk5eSJUu6SpUqudGj
R6f6TyUAAAAAIA1t2LDB9e3b184rd+3axZLCRWO5Onfu7J5//vmUr0smL9u2
bXPDhg1zXbt2dZs3b075+mTysmLFCnf77be7xx57LNV/KgEAAAAAaYj5HP3j
P//5j/vb3/7mXn/99VSvSkb78ccf3b333uv+/ve/u2+//TbVq5PRmM8RAAAA
ABALci//IPfyB3Iv/yD3AgAAAADEIhW5119//eV+//1398cffyTtMdMBuZc/
kHv5B7kXAAAAACAWqci99u7d61599VX39ttvu0OHDiXtcf0uHrmXtqeymq+/
/jpHi26zf/9+d+DAAffLL7+4P//8M35PLM2Qe/kHuRcAAAAAIBbJzr1+/fVX
9+ijj9qchWeddZZ74YUXkvK46SAeuddTTz3lTjvtNNu+mqOzUKFCrkCBArYU
LFjQfqfLAhfNmXfiiSe6Ro0a2dyeyhg++OAD9/PPP1ttXqbJpNxLNZd6T/q1
9pLcCwAAAAAQi2TnXpof7/rrr3f58uVzRYsWdYMGDbLzbsQn99JchLNmzbL5
7wYMGOBq1apl21pLtWrVXI8ePeyywEWZgrKFhg0buiJFith1q1Sp4kaOHOm+
+OKLjMu+Min32rRpk5s7d669L/2I3AsAAAAAEItk5l4aO6dz7KpVq2ZlMc2b
N3fvvvtuwh87HcS7v9c777zjWrRokbWtzznnHLd06dKw1//444/dbbfdZnVh
uv5xxx3n7rzzTvf999/HZX3SRabkXsozJ06caHV+s2fPTvXqhETuBQAAAACI
RTJzr6+++sr169cvK4fRUqFCBTdu3LiM7iflSXXuJbpcOYh3mzp16rj58+fH
ZX3SRabkXj/99JPV9GlcLLkXAAAAACAvSmbutWzZMnfuuedar6mjjjoqK1u5
8cYb3e7duxP++H7nh9xLfb20P7zbqP+XMqBMkim518aNG90111xD7gUAAAAA
yLOSlXupR/pDDz3katSo4Ro0aGB5ipet1K1b1zKfTOeH3Gvr1q3u5ptvzrrN
0UcfbX3CMqkeLxNyL83ZOWnSJFeuXDlyLwAAAABAnpWs3Gv9+vXu6quvdlde
eaWdb1922WVZ2YrmHOzTp49lY5nMD7nXqlWr3KWXXpp1m8qVK7sJEybEZX3S
RaJyL2WHhw4dsvv/4Ycf3P79+92BAwdsvKHmdgg3f4DmWtR74+DBg3Z93VaL
sqtAv//+u9134PX005s3Qvevf+v3GruqvFn7+JRTTnHTpk2z23mL1tMP8xmQ
ewEAAAAAYpGM3Evn+zNnznQ1a9Z099xzj2UJw4YNs/GOXr5y0UUXubfeeith
65AOUpl7KeNQZvLII49YP3svj7zpppus330miXfupW2rjEpzJyrz7dWrl2vT
po295jW36R133OGeeuopt2vXLvfbb78dcXvV4KlW8pZbbnEdOnRwrVu3tmwy
OI98++23Xd++fe011K5dO3f55Ze7G264wS1evNguV961ZMkS+92JJ56Y9boo
VaqUu/DCC21OA2954oknfJFDk3sBAAAAAGKRjNzrs88+s3NX9fZ6+eWX7XeL
Fi2ynuneuXeZMmXcgw8+mFHj6YIlOvc666yz3PPPP295hreo1kj1PZpzQDU/
qgFS3nX88cdbPqLXR6aJZ+6l1/MXX3xhczeorkrjCtVTS/nXs88+a3mWMqdj
jjnGNWvWzN4X2ieBVIPXtm1be49o3Kn2pTLj/v37H3Y9ZWfafyVLlszqn1e9
enX3+OOP2+U7d+60vPnss8+233v3VaRIERt/rN97y6hRo2w7pBq5FwAAAAAg
FonOvVTronoTzRHYrVs3991339nvP/nkE9e1a9fD+tu3b9/e7dixIyHrkQ4S
nXtpzKLu/7777stalINo/6sW7Nhjj3WlS5e2eqI5c+bk2d5W2Yln7qUaLtV3
FSxY0DKvESNG2NjDQNu2bbPHUpZVqVIlq7kLVff1yiuvWCYVLvcSjYmcMmVK
Vs1eYO4VaNasWa5s2bJ2Hfp7AQAAAADyqkTnXjrHV4agc+sZM2Zk/V51MNOn
T7ecxctlTj31VPfkk0/6oq9QKiQ69zrhhBOsv1qPHj0OW5QraDyj6sFU99O8
eXPLw3R71YRlWg1evHIv9dJSBqW8S9tf/e0+/PDDkNd9+umnbdvrehdccIFb
vnz5Ee8DjWPUvomUe4l6d1WpUoXcCwAAAACQ8RKde+lcvWXLltZvSH2KAq1b
t85qiwLnDuzevfsR9TCZItV97dX/ST2jVBem66sH1F133WU1S5mURcYr9wp8
fauuURljcC96z9q1a12rVq3suqoNU41Y8DhDci8AAAAAAHImkbmXxlxNnjzZ
VatWzeqHdM6veeK8RZmC8gWvz5CW8847z7322mtxX5d0kOrcS7788kvLU/Ln
z2+3KVGihBs0aJD7/vvv47JO6SBeuZd6qdWuXdu2Y+HCha1/fTibN2+2Hvfe
vlIPMI1/DETuBQChaT5bfWemXgp+WPSZqe+S9NP7t3pp6vNFPRxVS+0dE6k2
WGPb9Rx03KQa60z6rgkAACDREpl76bz91ltvdVWrVrVal6lTpx6x6LG9cWDe
3HLqgaRjv0zjh9xLFixYYFmldzvNP6AsJVPEK/fSOF6vz1axYsXc3XffHfa6
qoW8+eabs7a5etyvXLnysOuQewHAkZQRrVmzxt14443u5JNP9sXSpEkTm3dX
/QM0d4lqf/XdRpcuXVyfPn3s80Bz+ajGWn+Pn3nmGft81rzWGzdutHmUNSfK
/v37Lc9TTqZ8TMdGZGIAAAA5k6jcS8dlOo5TvYvmqtP8gOGW4sWLZ9UXabnq
qqvcli1b4ro+6cAvudfq1avdZZdddlgWqR74mSJeuZfOZzQ3ZjS5l/p+BeZe
6l//4osvHnadZOVeOq/yzq9SjdwLQCT6W7V7927rH3rmmWdm/Q1N9aI5Srye
jbldVCesv8/XXXedfX7o77bm99Uc2aopC8zDMq0PJwAAQE4kKvdSXjBkyBBX
t25dq3vZu3dv2EW9v3WM6B3rnXTSSVYLlmnfafol99Lt1JPNu52yG411zJT9
Ea/cKzB/0jYcPHhw2G34/vvvHzbO8fLLL3fr168/7DrR5l7z5s3L6tGWm9xL
tWdPPfWU27RpU66fe7yQewGIRHND33bbbVl/O/W3UXlRqhcdx9SqVcv+9mtR
30b1dND6adF3fYHzWedkKVq0qM0DpLlS1INz7ty5bsOGDXY8pfGUysI0bjJT
PrMBAACyk6jc64033rDafs0TqL7okeicX99nesd0Oh7UWIBYMod05IfcS8fJ
ixYtcqeffnrW7ZShqHYpU8Qr91qxYoU7//zzs7aj3mfBveo9qrHzMi29/jU+
+KuvvjrsOtHkXtp/yoxVoxcp93riiSeyxhcH516aW1KPo7w61ci9AEQSnHvp
75n+dvfs2TOli74r0qK/5fpOQ3Xs+ruq+XpVl6bvBJWNaf6YMmXK2Jj4kiVL
umOPPdZq4JVtKT9TXhZYDx9u0XU0Z7M+81Ubps/x7du3W28x5WDqHQYAAJCp
EpF7qeb+kUcecTVr1rSf0V5fY8EijfPK61KdeykzUc5zzz33ZI3P07H0JZdc
4t588824rFM6iFfutW/fPvsuvkiRIrYt1d8lVA2Vxqeovko9YXQ9vW+mTZt2
xHf16vmi7/e9/dKvX78j7kt9k4cPH55VRxAu91IPN12m65xyyimWg3nmzJlj
41xVN5Zq5F4AIgnOvTReXPOzpAv9nVef+507d9q8vkuWLLG//+otcPvtt9sc
Jw0bNnQVKlSw7zOUi+lYSZ/R+v4jUs2Yrqs+Y0OHDrXjCtWD6fONWjAAAJBp
4pV7qReQ5ibS8Zvus0OHDu6iiy6ympdI3zXq97pcecy5556bdbymnmAaJ6lj
NK9/RV4/TotH7uXtB20z1dwF9ulSlqjvgHVZ8KLtrPqiMWPGZNUBaUyGxmmo
b0pe3/aB4pV7ybp16yyr0jmKvovXuYzGoei8Q/tKc3mpt5fqG3UOo+/7BwwY
EHL+TPU47tu3b9Z3/8qDtK9F+0f3pfeR6iy93FK1esqUg9+D6p2sPFPnTFqv
hx9+2N5jeu76t/JSvX5SjdwLQCTpnntFS7289L2J+qaOGjXKjhUaN25s9WL6
3FCNmOrDwmVh+jzXdyvdu3d3ixcvdp9//rl9T0IGBgAAMkG8ci+du2ss3B13
3GG9iXQcpjkBO3bs6EaOHBmyXkjn4erRqmO4gQMH2jGczum9pX79+jZOQJer
Hubrr7+OaR39Lh651+bNm21fKl/p1q1bVg2Rl4Ho/nVZ4DJs2DCbb1PfCytv
1LFziRIlbDyG6oK8bCVTxDP3Ui2XvsPXOBeNY9G4FuU4zz//vL32Z86cabmY
5ndQ/ZXqw8KNC1ZOpnMejUFVrqX3i8Yk6jv8Tz/91MYqalyx6gM0h5j2ucbI
KE/We0jjJD3ffPON7Xs9rs6TtK9V3zVx4kTXtGlTy5yVYacauReASDIl9wpH
36O8++67VterTEuf46oNU62Xao319z3UmEj1ntQYzIULF9q8ANSBAQCAvCxe
uZdq83V+rWMpjdNSjw0t+rfmdBw7duwRt1F9ih5XeYzmPVKfVtUXeYturzFY
ys90fKZ+23lZPHIvLxdRv5CcLKrx0vZX/xHlDFoXZSOZKJ65l0fnJs8++6z1
satXr57VWClz0nwOOk/p3bu35WDZzcml8xLVUOp+9L7Qfag/vb7zv/jiiy0H
U82X9qNyNl1eunRp27ePPvroYfflzSmh962uo+vq/areMKoF8ANyLwCRZHru
FUy5lWq3X3jhBfveUJ8v+oxXPZi+BwmuBVMGVrVqVde1a1frLaFtp+88/DCf
LwAAQLwkqq89ci7e/b2QO4nIvQLpvEQ5mM4vNP4wt1SHp7GP6l2s8xzvPEXr
r+/v1S9Gv9eYSWXM4TI11V0q41TWFa7vfqqQewGIhNwrMn1Xonp8fe+hHpMV
K1a0uu5QGZjX20D1vqoP3r9/v312UAMGAADSHbmXf5B7+UOicy9Ej9wLQCTk
XtHTdx8aRz9r1izXvn17q/MKl4Hp9+oBqf6eGkdPDRgAAEhn5F7+Qe7lD+Re
/kHuBSAScq/cUQ3Xnj17bC5f9YTUmHuNhVTNV2D+pTxMfSk1ZlJ9xNRfP9w8
RQAAAH5F7uUf5F7+QO7lH+ReACIh94qd6sC0HTUWUjVe6gemnvje3MHeoh6Q
N9xwg1u2bJmNgdQYSgAAgHRA7uUf5F7+QO7lH+ReACIh94ov9fNat26d69+/
v81JpPGOwTVg+t2VV15pvfOVf1H/BQAA/I7cyz/IvfyB3Ms/yL0ARELulTia
F2XmzJnusssus/mBCxUqdFgfsGOPPdbGSL722mvu4MGD2c5HDAAAkCrkXv5B
7uUP5F7+Qe4FIBJyr8RTT3tlWxrjWL58+SPyL42L7NGjh9u0aRPzPwIAAF8i
9/IPci9/IPfyD3IvAJGQeyWP+nmtWbPGPhsrVKhg+Vdg//u6deu6xx9/3D43
mfsRAAD4CbmXf5B7+QO5l3+QewHRU58lzbf33XffWY1OJiD3Sj7lX6tWrbL6
r9KlSx/W/6tEiRLulltucRs3bnS//vprqlcVAADAKPfSeaVyL30/x5K6Zf78
+a5Tp05uxYoVKV+XTF5++OGHrNxr3759KV+fTF42bNjgunfv7kaPHp3qP5WA
76kfubKIqlWruqFDh7qff/451auUcOReqaPviJ577jl34YUXuqJFi2aNfdTP
+vXru5kzZ1rfe/p+AQCAVNN3cn379nX33HOPfX/HkrplzJgxdsw+derUlK9L
Ji/KHQcMGGAZ5Msvv5zy9cnkRVlwt27d3KRJk1L9pxLwNWUL06dPd5UqVXLF
ihVzF198sb2H8jpyr9TbtWuXHUPqtRdY+6Ve+PpedevWrVYjBgAAkCqq92rT
ps1hc1SzsLCw+GUpW7Ys4xyBbCh7UG3kOeecY5/plStXdg8//HCer7Uh9/IH
jWnU90Sa+zGw9qtAgQKuadOm7oUXXrD6Q3reAwCAVFDuddVVV7n8+fOzsLCw
+G454YQTGOcIZGPp0qXuzDPPtB6RM2bMcI0aNXIdOnSwXCgvI/fyF+WvGmNb
sWLFw2q/qlevbt9ffPPNN3k+iwUAAP6j/jk6TqxZs6arV68eSwqXU045xVWr
Vs2ddtppKV+XTF5OP/10d9JJJ9m+0PxUqV6fTF5q167tGjRo4B599NFU/6kE
fOuXX36x2q5y5cq5kSNHuu3bt7suXbrY+2fOnDkRa2zUR0+1Oum6aAydejGS
e/nHoUOH3KJFi9z555/vChcunLVv1PNe8yh9/PHH9roDAABIFuZz9A/mc/QH
5nP0D+ZzBLKn98m1117rGjdubHVfyhQmTpzojj/+eNejRw938ODBkLfT/I+6
7ezZs9N2GTt2rPVVJ/fyny1btriuXbu6UqVKWe2u9k/BggXdlVde6d5++216
fgEAgKQh9/IPci9/IPfyD3IvIDLVcs2dO9fGkXlz0MrKlStds2bN3AUXXGBz
dYSiPGz48OEp7+EXz4Xcy1/0GfrII4/Y61O9vrSP1Pvr3HPPdYsXL7aaPQAA
gEQj9/IPci9/IPfyD3IvILKvv/7aDRw40Pop6XNcvZO0KPvRvLSlS5d29913
X8hxZeReSAZlW88995zVI6rey9tXderUcbNmzbJxugAAAIlE7uUf5F7+kBdz
L9WE6FxY577pNJ8WuRcQ2RtvvGF1Xeppr3727733XtYyYsQId9xxx7mrr77a
+mAF09+6hx56yK6Trot6RhUqVIjcy+f0ubNmzRqbRymw51eNGjXcY4895n76
6adUryIAAMjD4pV76Zxac1T/8MMPMS86/snEnqfxyL3YD7GLV+6l3r779+/P
9fL999/H/D24bq96kM8++8zOgzdt2mT3nS7IvYDw1J9rwoQJlv0oSyhWrNgR
izIhzVszffr0IzJvfV5ofr2PPvoobZfly5fbvJXkXunhww8/tDkX9NoMnOtR
x6D67AUAAEiEeOVemrv6gQcecJdccolr0aKF9S1t27atu+aaa2xp06aN/V6X
N2/e3C73LtP1dHnLli3dpZdeamMzNm/eHKdnmD7ikXuxH2IXr9zrmWeesX7L
6q9z1llnZc1RqH83bdrUajQCF13vvPPOs8s1h2GTJk3clClTYnouM2fOdJUq
VXLFixe3nioXXXSRe+utt2K6z2Qi9wLC27Ztm7vllltsjGOnTp3c6NGjD1v0
vtHf9iJFilh/8XTKvKP1ySefuNtuu43cK43s3LnT9evXzx177LGHZV+at1ff
2wEAAMRbvHKvjRs3unbt2tn5tc6tNaf6008/bd/Frlq1yo5nGjZsmFXXrlxB
59/KeBYuXOjGjx9vYzFKlixp5/7Lli2L0zNMH/HIvdgPsYtX7qV6LdUjvPnm
m65z587u6KOPtuypffv29r7bvn2727Fjhy36Dlz7Z/78+Tb/WrVq1exctX//
/jGNS1S9l2q9lIWWLVuW3AvII/R3QT2Tateubd9XvP/++yGv9+KLL9rffG+u
x7yG3Cs97dmzx9155512rOHtu1NPPdXqEul1DwAA4i1euZfmpFa9UO/evUNm
BTr/V6ajYxvVGun6wZQ3jBs3zi5XBpNp4pF7sR9il4j+Xurdq9zpmGOOcffc
c0/E62rskvJG1X/pfE5jTmP1yiuvuLPPPpvcC8gjDhw4YD3p9TdlyJAh9ncj
lE8//dQ+4zUWcujQoWGvl67IvdLXF198YdmXXpve/jvjjDPsuCOvvU4BAEBq
xSv3Uj2RspYXXngh5OXeeAwd12gM3TvvvBPyeuvWrbMalyeffDKm9UlH8ci9
2A+xS0Tu9cQTT7hy5crZuA6dq2ZHvcE097vqxHTeGqvXXnvN5o0n9wLyhrVr
17pWrVq5+vXr25jqcNTDa+rUqdYDvnXr1vaeykvIvdKbejPoWCOw39dll11m
38nptQsAABAP8cq9lixZ4u6//34bUxVKtHnLd9995yZNmmTz+2SaeORe7IfY
+SH3Es3TpvGJ69evj/nxyb2AvGXBggWuVq1a9ncqu2xc8+hp/LpqafLadxnk
XulPxyXqde/Ny1mwYEE7FlIfMAAAgHiIV+711FNPWS+pcPPxRJu3aP5AZQSZ
eJ4bj9yL/RC7VORe6tWjcR2B82du2bLFcsdXX3015scn9wKQF5F75Q2qX9Q8
OwUKFLD9ePzxx9tnJX3uAQBAPMQr99I4C82nHk60eYsou1F/KY310jGPepwq
F1DNu/6t3wf2ftDvf/vtN/u9+njrZ2B+oNvqv73b6j51/XC8DEL3dfDgQctB
dLtE19zHI/eK537QfanPvbdtM2VfpCL3Ug/8DRs2WP81z759+6zP/aJFi+y/
td20vbQdtOjf0fZAyS730n1rG+u5e9tZ+0WLt8+DJWPfkHsBiITcK2/Q58ni
xYtt3K7mf9G+1HwMzz77LOMdAQBAzOKVe6n3dqSMINq8RefROtfVWIzHH3/c
xuxpziqdV+/evduOi6ZMmWLn7jrP1rGSauH1+xkzZtjc7dOmTbPH8yhTUL8q
5UrKhO677z6b4yoUHV9pjJ96S+i6AwYMsJ7Bs2fPdps3b07oPEPxyL3itR9E
2+Hdd9+17Z9J+yIVuZfmdpw8efJhfdm0PfUclSsp49JcnZqPU/3b+vTpY9mw
5oDU+mZ3XhAp91JWpdoyraOet+aXHzZsmPXWf/nlly17+/rrrw+7TbL2DbkX
gEjIvfKOn376yY5FVeulfZk/f3533XXX2ZzHAAAAsYhX7pWdaPMWncPPnDnT
5p7T/Hf63k/5g87blRdoad++vatataqNAdP5t+qSzjvvPHfiiSfacZL+HTg2
TOf0gwYNsvneixYtatfRuX0w1bxs3brV9e3b1+Yy1Dm8jp9Vf6/j6gsvvNDN
nTvXcohEiEfulZ2c5F6Zui+SnXvpuSq/0lxroeYjUL6k96f220svveS++eYb
mwNeuWKTJk3cwIED7dwvVE2WJ1zupfMMZczqraL8Ufma1ke9hpU11axZ0117
7bWWywWub7L2DbkXgEjIvfIWZVzdunXLGu+oz031uYxUFw4AAJAdv+VeHp1b
q/6lVKlS1vNBdUOqPVFu0qlTJ8sPlJ94x0I659f5u/KW4KzFo96/Xbt2DZm1
6PabNm1y119/vWvQoMER82PpWEy31WUahxkpY8gtv+VenkzbF4nMvY455hg3
ePBgu18tqqPS+MaePXu6iy++OGTupXorZUnq26bMy6OMSjVfZcqUse2xd+/e
sI8fLvfS7/V60PoF03Z48MEHXceOHbNyr2TvG3IvAJGQe+U9Or4466yzssY7
NmvWzK1cuTIhx10AACAz+DX3Es1XVb16dasn0lgqjYHU+KkVK1a4sWPHHjHP
nepV1A8iXNayf/9+d9ddd4XMWg4cOGDfKSrbUR1LqF6qyqVOOukkq40JzB/i
xa+5l2TSvkhk7qXnq59169a1mjdtTz3PwoULW11dcO6lbazMR999a3suXLjw
sMt1LqBzAl2mMajhhMu9lGFqH82bNy/kWEntx1GjRmXlXsneN+ReACIh98p7
9Bmsv/n6Tk37tFixYq5///7WYwEAACA3/Jx7qV5E58/qcxpcVxKKviM888wz
w2Yt6n2lsWShspbly5fb7SpVqmQ9lELRWDSte9OmTROSTfk598qkfZHoeq87
77zT8iP1OtN4RWWHt956q2VSoeq9tL3r1atnY0pVGxbo/ffft/4nyiTVgy2c
cLmXxrFWrFjRarpUx6X10vhEby4C9erS2EqvlizZ+4bcC0Ak5F55k/pZXnPN
NVk1X6r/WrJkCTVfAAAgV9Ih91IPodWrV2d7/ViyFo3LK1++vDv99NPdnDlz
7Pw/eFGPd2UPocZ3xUM65F6ZsC9S0dde/eHvvvvukLmXjvPVh0vr5c3pqO3n
zQF500032ZjSSO/hcLmXMqrmzZu7o48+2p1wwgmubdu2dj+ae0DPXT3vA88z
kr1vyL0ARELulTfps2769On2uaT9WqhQIderVy/7jAEAAMipdMi92rRpY3Un
2clt1qLjqzFjxthYsgoVKtjjaZsEL8qkLrjgAnf55ZeHzCdilQ65Vybsi1Tk
Xjp305hD1VaFovGOGjO4Zs0aG1eq+qzWrVu7Vq1aWe95batHHnkk7OOHy720
vRctWuQaN27sihcv7goWLGjfrysH09hJ1ZBpGyj7SsW+IfcCEAm5V9714Ycf
2v70ar7OOecct3Tp0lSvFgAASEPpkHu1a9fObp+d3GYtGtelHkY6tlL/8Dff
fDNnTy5O0iH3yoR9kYrcS3M2al9o3GIg5U3aVqqbUmZ12mmn2XbTPtA8At7+
zG3upfvX8tlnn9mcnMrStJ9LlizpihQpYuurPl7aDqnYN+ReACIh98q71HNy
xowZ9tmpfavvZoYMGWLfAwEAAOREJuVeGhemsWShxtap1ka9upUNvPLKK9E/
sTjKpNzLz/siFblXOOrjO378eMu11C9L2zJw3GGo3Et1WZp3IFC43EvzC2hO
yUAaU7l27VrXu3dv6/2lMY16bUqy9w25F4BIyL3yNn0GaNy8t39btmx5xDw6
AAAA2clLudeyZctsTrxwWcsXX3xh5/KhshaNx1Lv8JNPPtl6fYejzEHfNSbi
+8a8lHul877wU+6lbEnbsXLlytZHPrin79atW+08LzD32rJli/XYChQu91L/
lGHDhoWcy1F9xJS5ab+PHDnSfpfsfUPuBSAScq+8TZ8h48aNszkdtX+rVKni
Jk6cSH97AACQI3kp91JepJqYJk2aWO4STGPIrr/++pBZi46dtR2KFi3q+vTp
Y2O6Qvnqq6/c008/bfVM8ZaXcq903hd+yr0mTZpkx/vh5kbU/mvRooXlXjo3
EO0r5VWBwuVeyso6dOhg2zwUPab63msOSkn2viH3AhAJuVfe531+af/qmKFb
t242/h8AACBayci99L3cBx98YPPO6bhF597qDRTp+zpdphyoWrVqNsecaliy
o8e44YYb3BlnnGG9ugNp3NfixYtdo0aNrD+R5gUKHgumuiTlNJqzUOf7Gi8W
SP2UdC6vTGTnzp052ALRSXTulZv94N0uk/ZFvHMvbT/1KClbtqz1J9H4zuDn
E45qqsqUKePOP/98t3z58sMu0zbTvO6a31251+jRo7O2i/rRB/Lqxpo1a+be
eOONrN8r9zr11FOt7it4H2i9tR/0egm8v2TuG3IvAJGQe+V9u3fvdj179szq
b6/PHs2BDAAAEK1E5V6qTVfvIOUGOmbR+btyDn1XV6NGDffQQw/Z8armqFNP
b69uROfa6i/0+eefu/vvv9+VKFHC+kTNnz/f7d271/odhRqTJbqdal5OOeUU
67+t+a41Vku/1/NUdqNzaK9HxKpVq+w7Q+98X+uwYMECezzVNamWRpfr9vqp
7xxVq5OovkaJyL1yux8kU/dFvHIvPQfdfvv27W7QoEHWJ17zJOr5aBuor1bw
Ng+m8YrKGk888UQbj6jre9tx3bp1li8pE6pTp47r3r2727hxo5szZ05WjZ3u
W7VXGhei8SG1atVyU6ZMsf2ty5R7FS5c2OZmXL16tT13/V6PobGo2u89evRw
u3btOux5JWvfkHsBiITcK+/TccbkyZOtXlr7WLXn6jUJAAAQrUTlXi+++KJ9
J6f551RPop865/YW/bcyEV2mual1Li46b1bdimqLqlevbn2EtOjf+p2+8ws8
Bw+m83ndXvUxOl9WT6QHH3zQ8h2dn+s8X3PVqTd36dKl3XXXXWfn1oE2bdpk
GYLqaDp27Gjn8HrcwYMHJ7SfaiJyr9zuB8nUfRGv3EtjG7Vtve0bapurbkq1
VpG89957rmvXrq5BgwauU6dONu/iiBEjbFvo/atcUuMQdS6gfmrah4cOHbLb
KufU/gref8qspk6danVcqsvTfWq7Dhw40DKyMWPGuFtvvdXuV7ldKMnYN+Re
ACIh98oM3lw52sf6DumOO+4I+70bAABAsGT190o21dKsWbPG6oj27NljtUta
Pv30U7dy5UrrL6Xfq64l3Dg/5R+bN2+2c3jV2SRaMvp7pUK67YtE9PeKlbaL
tx31+lCPNS/bEo011HbJ6bbR81M9mGj7q0++xkGqbkx1gtH0Dk7kviH3AhAJ
uVdm0GeMeoJ6+1nftagm2aPPKm8uY/2k7z0AAAiUV3OvdJRXc69048fcK1OR
ewGIhNwrM6h+XDVe3n7WfCtr1661fpLqo6C6Z4391zh79QdQXwf9XpcDAACQ
e/kHuZc/kHv5B7kXgEjIvZIvsJYqWXVVGtOoeYoLFixo+1lz5syePds9//zz
1p9S/RK814AW9VC44oorrAem6pAZE5ketJ/YVwCARCD38g9yL38g9/IPci8A
kSQr99K5uD4bNH+HN+eL/ls0rk7zvHjzjoSj2iP1zdR1w83pq3F6qlPSfekx
wonlMb3b6vMtcPHGyuv6mr8kOH/Q8/7++++ttkrrqEU9PjUmPhmUc2nuYu1n
/dR8Ll6v+3CL5uPp0qWL+/DDD8lTfEyvLb3uNBe43tMAAMQbuZd/kHv5A7mX
f5B7AYgkWbmXHkfztDz55JPWE1HHTJoPRFmKztW1DpqvRHPghsurNGeu5ufV
/CTKYULRWD3NNVK1alU3dOjQsJlWLI+pnzru0zzBlSpVylr0mJp35bLLLnNj
x451O3bssDmhPcq5NK/w8ccfb4+puWpUf9W3b9+cbMpcU21X7dq1j8i2jjrq
KFeoUCF3zDHHWM6ln/pv/V6Xax7lDh06WP9K+n75k8axjhw50uZheuGFF1K9
OgCAPIjcyz/IvfyB3Ms/yL0ARJKM3EtZiea+7dWrl80v8tRTT7l+/fpl5Uj6
O3Xttdfa42ve3WeeeSZkbZE+2y+44AJ35ZVX2nwuwXQbze+rDKpYsWLu4osv
tvlgQonlMfVT8ycXLVrU5gFu1KiRLfXq1bP/1vzKukz3q+MS1aCJasSUd1Ws
WNHmZdY20fjCAQMG5Hrb5sQrr7zizj777MMyrwIFCrjKlSu7m266yc2YMcMt
XbrU5jFWzqff63JdT1mY1lM1RfAf732s+aHJvQAAiUDu5R/kXv5A7uUf5F4A
IklG7qUxf/obdNVVV9m8tZMnT3YtW7bM+qz2MijVFylnadeunfvoo4+OuJ/s
ci+NGezevbs755xzrGeVcpuHH344ZJ4Vy2N6uVf9+vUtLwukMZCqi1KuV6ZM
Gav90jzC3jzMyvqGDx/upk2bZnVv9913n3vggQdys1lzzHsu3r7Onz+/9flS
D6/gcaMa37l48WLLUXQ9XV+53oIFC+yyvLwkej5Lby4BHR+pTkvjXFWXGPw6
9a7njQ0OvkwZpG6nf2u+TmWVyl91LKzjsHBjgQEAyA1yL/8g9/IHci//IPcC
EEkyci/1vLr77rutzmnMmDF2vKR6rCFDhtjlXgZVrlw5V6VKFcuLNEYxeOxh
YAa1adOmIx5HtUpnnnmmHQeodkkZgMbnhep3FMtjRsq9PPv27XN33nmn9Yfv
0aOHfRYq19A6Dhw40K1cudK98847Nsfis88+m6vtmlOvvvqqZYLevtbznjBh
Qti+XapTmzVrlu03rzZM2aXGS7744ot5dtE8l4nquabjo5deeslel9WqVbPX
X8OGDd1dd91lealXGyhvvfWWu/76690999xzxLGU9qWy3VGjRrk33njD6vVO
OOEEq8vTWFuNnQ03FhgAgNwg9/IPci9/IPfyD3IvAJEkI/fS+L65c+e6W2+9
1S1atMgtWbLEzvvV60u8DOq8885zffr0sTxJYwQ1HjIwk4mUe6mmTLVdyhHU
52j79u3Wj139rObMmXNEvUwsjxlN7iXLli1zjRs3ds2aNbOcS7U5+rlixQp7
DPUOU86SrLoc5WvqZ+bt63CZYKCPP/7Y9luk3vd5bbn00kstk4w3vUYnTZpk
OaLGw+q9pgy0efPm7rjjjrPaQGVd3mtV4xX1GtNxrWoDA6lGr0aNGnb+oZ52
ylhr1aplr/9WrVpZ77jPPvss7s8BAJC5lHuprl6fMUgtHa/ecsst9t0XUke5
l8Zu6JyD3Cu1dG6nWgPVWABAsGT1tY8kMIN67rnnLKdXnZTGHqoGxhMp9/Lu
QzmTaqqUJU2cONF6yOtvoLK3eD1mtLmX+tp37tzZ1a1b18YHppqyR/U+8/Z1
7969sx3Pp6xGNUWpzqLyQu6lvPP888+3saMaQ+pte9VDahuXLVvWvqfyjpui
zb1Uo0h/LwBAounYSTXI+j4RqaVj3UGDBrm333471auS0ZR7qV/viBEj7HgO
qaM5yzR/mMaqAEAwv+VeGr+l8VnqVaT+8Bof6Y09DJd7KT9QplO9enWrM9YY
Q1FtlWqtdBtlDvF6zGhzr71797r+/fvbvI/jx4+P6zbLDdXXaSyc9rP6mqnO
LbvcS+PuVEfnvT40t6PG0ikjzKuLxnKqhiqeVN+ncSGax0DjewPn+RR9h65x
ixqHqmNZIfcCAPgJ4xz9g3GO/sA4R/9gnCOASPyYe4nO3TXuUOf93tjDcLmX
5ojUeDGNH9OxmK6rRc9DcxAqy1INcuB4wlgeM9rcS59/yjiUpWjsZarp+w/V
FHn7WuMXs/uM1jZUPubdRrmM5ntUr/68uigDDa4PjJX6hamHl7JZfS8Yajur
J5fGoT7xxBP2O3IvAICfkHv5B7mXP5B7+Qe5F4BI/Jp76XNk9OjRlhldc801
NvZQNVuhci/1NlBdl3raq5/9e++9l7Wo7li9k66++urDxi/G8pjR5l47d+60
40PVe/nhGHHq1KlWb+Tta83lqB714fra6/fqwX722Wfb9TWvo7Iyr54O0fPm
Gq1Tp46bP3/+EZdrbkaNHQl8rUTKvZTLqkcYuRcAIFnIvfyD3MsfyL38g9wL
QCR+zb1EuZPGHqpHl2pldD4fnEFpHJ7mJCxRooQrXLiwzRMZvBQqVMjVrFnT
TZ8+PWtcXyyPGW3updxN/cLUbzzVvTC0ndTnUXMyevta/9bz2LJli/vtt98O
u77+W+Pk9TmuvEvXr1y5sm1r5Nw333zjBg8ebFmV8sdgXr1X4OVe/WGo96Rq
wjRmldwLAJAs5F7+kddyLx2f6/tWjc3IrgeHn5B7+Qe5F4BI/Jx7ieY79MYe
6m9ZkyZNDsugtm3bZvPZaIyj8irVawUu+tun2q0iRYq4rl272nizWB8zmtxL
n93qXa77US1aqufbUb1Qv379jujhXrBgQXfhhRda3ZeyGW0fjRvVNtA8g+rn
5fX1uummm6xXP3JOuePYsWMtTx06dOgROeOGDRusJlE1i3rdyCuvvGK1dsHz
bnr3pX0XmHvp9a3ba75UAADiLV65l46RNMe1ap1jXfQZmKx5sf0kHrnXoUOH
7Lgvt8v3339v8x/FQrfXcafmoNb3xTrW9o7V00G8ci/eE7Ej9wIQid9zL32e
qE5JYw/LlStn+ZaXQen7IM3FWLt2besJrjwqFGU4DRs2zJrrMZbHlOxyL33W
fPrppzaPZNGiRS1v8vrkp8rGjRst//N62qvWK7D2SxmKxthp7knN+aj/DqwL
U/ZHHVFsXn75ZavHUg66bNkyO77RMafm/9HrrXz58pbd6thPNEeTssdGjRpZ
Py+9hrSsXr3atW3b1urwvNzLG0ep/Td79my770w85gEAJE68ci99Zj3wwAPu
kksucS1atLBjLH2u6ThFi47p9Htdrs9BXe5dpuvp8pYtW9r8y+rjunnz5jg9
w/QRj9xLx7D67lPjGnR8Uq9ePVv076ZNm9rxSuCi6+m4WZfre10dG06ZMiWm
56GesTruLF68uB2fXnTRRe6tt96K6T6TKV65F++J2JF7AYjE77mXaOyharq8
nMbLoA4cOOCGDx9u8wuqf7zqYEJRBqXjNI2FVK2NrpfbxxQv91LGoDkS9X2X
Fn0/pc881e7cfvvt1kP+/PPPt7wj1VRDdPrpp9tz0bGF6oJ03KKxoTrOCK4D
8/IxXa7rqidVuD5giI5er8q3ypQpY5mpXosTJ060rEvZauvWra2vvkf1d7qO
xupq32luUM3foOPMatWq2W283EuvO81Dqn2rY1HN46D+/AAAxEu8ci99F6c+
EPrMUs6heaP1/c7y5cvdqlWr3KOPPmrfV+pYRHO4KFdQFqKMZ+HChTZHtmqk
9f2kjuP0XVKmiUfupWPXjz76yL355puuc+fOVtuvY7/27dvbvt6+fbvV+WvR
MYX2jY4H9b2ujkM0lkLHJrGMS1S9l77vU+aj4+ZMzb14T8SO3AtAJOmQe4lX
s6XPYy+DWrt2rWvVqlW2fbaU16hnkvrbK1vQ4+X2McXLvZRHaP69c8891xbl
DaqZUo2XLtMYNfUfT3WfAo2pe+SRR+z4RPtY/caU1+l5qEZI37Mde+yxtt7K
ufRT/63fd+nSxT6LU/0c8gplX+r1pteL5hnVuEftD+WkOsYMpmNNZV1VqlSx
1696rGmfaf4Gfben403VdomOi6666iqrUdQxk1fbCABAPMQr91I9s2pUevfu
HTIrUBajTEfHLKpv0fWDKW8YN26cXa7z/kwT7/5e3pzf+i5Z8+xEou+Plauo
/kvnEBpbFyuvt0Om5l68J2JH7gUgEj/kXqrF1TyByrDC9cHS33IdZymLufHG
G63n+oIFCywz0GeNaroiUR2NvgfRHIbKfHL7mKI+8MqDVLcTuHjjBK+44gr7
nubjjz/2RV6k7+v0PZ63j/WcVZMmOnZRbbV6QqlGSN/haQ7MRYsW2XyU4Wro
EBuNQVTPNW3jaHpj6JhSr3GNiYxEGa+yNX2HS30eACCe4pV7qYZF5/fh+id4
vVt1zKJxW++8807I661bt86+/9FxXaaJd+6l+XL0vZm+99RYiuyoT4O+U9Xx
ZXbH4NF47bXX7DvBTM29eE/EjtwLQCR+yL2QOMrdvHkBvT5e+lz1aoQAAACi
Ea/cS9+13X///Vn9LINFe46v74ImTZrkHnvssZjWJx2lOvcSfW+s8Ynr16+P
+fEzPffiPRE7ci8AkZB75W36PB41alRWn3qNy1QtOwAAQE7EK/dSDwjVxesY
JZRoz/FVO628JhPPc5Ode+l7VI0BCJwzR+MflK+E6xeSE5mee/GeiB25F4BI
yL3yNo3vvPzyy7P61Gusp45TAAAAciJeuZd6sk6YMCHs5dGe44vyAvU00rg7
1bL/+uuvltForL/+rd8H9mzQ79X3VL9XnwH9DMxydFv9t3db3aeuH46XB+m+
Dh48aLmFbpfoXgPJzr3UP0E9MtRnyrNv3z7rc6/eGB5tO20zbQst+nc0PTOy
y710v9rG2r7edtZ+0eLt81ASvX/ilXvxnogduReASMi98i59Pmn+F83ton2r
vujq4UXfJwAAkFPxyr3UszJSRhDtOb43P7d6GT3++OM2Tuy5556zc+3du3fb
XNZTpkyxHEXn3jofV19N/V7zw4wePdpNmzbNHs+jfEc9kpQrKYfQcZPmOQpF
x1MaV6Ye47rugAEDbH7x2bNnWx9ZHYclSrJzL/WKnTx58mH9p7Q9vSxE/1Ye
ormQdOypnhp9+vSx/EXz7mj7Rzr+jJR76f71na3WURlTv3793LBhw6y3vuZM
V/b29ddfH3Gfydg/8cq9eE/EjtwLQCTkXnmX+i1obhiv1uviiy9Oq9pxAADg
H/HKvbIT7Tm+zttnzpxp8wBqLkId6yh/UIai7EZL+/btXdWqVW08ns7JVVej
ubw1F1H+/PmPmNdb+cqgQYNc7dq1bX5rXUc5SzDVv2zdutX17dvX5s/Teb2O
nzXXuI6rL7zwQjd37tyo5q7JjWTmXnquyq6GDh0atu+6sg69LrTfXnrpJffN
N9+4PXv2WI7SpEkTm5ta5xzh6rLC5V4//fSTZTiaT0pZi7I1rY/mZFK+UbNm
TZufXblc8DonY//EK/fKDu+J7JF7AYiE3Ctv0meKjj+8Wi/NS33nnXfad2YA
AAA55bfcy6PzbdUilSpVyl155ZVWr6I6IJ2vd+rUybIcnbd7Y7OUvShL0Xl+
8Dm+R3MUdu3aNeQ5vm6/adMmd/3119u8QcoNAu3YscNuq8s05iwRc3snKvfS
8eLgwYMtw9GiOiqNb+zZs6d9fxou91LNlXIN9ahS5uVRTqWaL817rm2yd+/e
kLcPl3vp93otaP2CKeN58MEHXceOHQ/LvZK5f/yWe3ky8T1B7gUgEnKvvEef
JTpm0OeiV+ulYxHNuwMAAJAbfs29ZMGCBa569epWx6LxVRrvpTFVK1ascGPH
jj1izkHVDjVs2DDsOf7+/fvdXXfdFfIc/8CBAzaPoTIF1baEmiNbudRJJ51k
dUqBOVC8JCr30vPVz7p161p9j7annmfhwoWthihU7qXtrKyhQIECtk0XLlx4
2OUrV650zZo1s8s05i6UcLmX8hrto3nz5oUcJ6n9qPmbAnOvZO4fv+Zekmnv
CXIvAJGQe+U9+iy5++67XaFChWyf6jNIdc2RelACAABE4ufcSzUkOqeuX7/+
EbUmoaj25cwzzwx7jq9+SxrXF+ocf/ny5Xa7SpUqWS+rUDQuUOvetGnTuGVT
gRJZ76XxAcox1NdJYxWVk9x6662WSYWr99I2r1evno2hU31YoPfff99dd911
lsGo51Qo4XIvjdmrWLGi1XSpnkjrpTENXt919YzSuMrAOrJk7h8/516Z9p4g
9wIQCblX3qLjAH3OnXrqqbY/9dnUunXrI45BAAAAciIdci/1FVq9enW214/l
HF/jwcqXL+9OP/10N2fOHMtigpd3333XMqBQY77iIdl97dWnXN+phsu9NNZA
vbiUA3lzOmobevNA3nTTTTaGLtxrJ1zupaykefPm7uijj3YnnHCC9a3VfajP
unImr6d+oGTun3TIvTLlPUHuBSAScq+8Q5/7+pvfoUOHrP2p2uZJkyYlZBw9
AADIHOmQe7Vp08ZqgLKT23N8ZTpjxoyxMX0VKlSwx9M2CV6USV1wwQXu8ssv
D5sVxSLZuZfOFzTmULVV4WgMncYcrFmzxsbRqUZL3722atXK+s9rez3yyCMh
bxsu99L2XrRokWvcuLErXry4K1iwoPXvUA6mMXmqH1Pe5B3nJnv/pEPulSnv
CXIvAJGQe+Ud+rzVsYrmWtG+VC8G9ZD86quvUr1qAAAgzaVD7tWuXTu7fXZy
e46vMXbqJ+X1Tn3zzTdz9uTiJNm5l+Zr1H7QmMVgypy0vVTDo9zqtNNOs22n
/aAeG97+zE3upfvW8tlnn9n8g8rRtJ81b1ORIkVsfdVPysuckr1/0iH3ypT3
BLkXgEjIvfIG1XnrmEW9E7zxjRo/r+MIAACAWGVS7qXxeRrXF2pMl+qe1DtV
Oc0rr7wS/ROLo2TnXpEcPHjQjR8/3nItHXtqewaOMwiVe6lGSH3WPeFyL/VS
15ySgTSecu3ata53797W+0tj67Q9PMncP5mUe/n9PUHuBYSnv7cab+zN1est
+k5D7239HVfNbl4eI0bulf70OtZnjD6nvP1YuXJlOy71+n4CAADEIi/lXsuW
LbP5CcOd43/xxReWq4Q6x9cYLfVwP/nkk63vejg6f9B5hJZ481PupWNQbUsd
e6qnefB509atW+38IjD32rJli/V78oTLvaZPn+6GDRsWci5H9RBT3qb9PnLk
yKzfJ3P/5KXcK93fE+ReQHgbN260v8Pqs6j5J7ylRo0a9p7X37D58+dbDpZX
sy9yr/SmXEvHDerz6e1DzcXTp0+fhMwRDAAAMlNeyr2UF6k2qUmTJna+H0zj
+a6//vqQ5/g6dtZ2UF8JHW9pnFco6jPx9NNPWx1NvPkp91If2WLFioWdp0/7
r0WLFpZ7jRs3zn6n/aXMyhMu91JOpr612uah6PHU915zUHqSuX/yUu6V7u8J
ci8gPOUFV1xxhfVJVD7dqFEjW5RXV6tWzZUoUcI+AwYPHuz27duX6tVNCHKv
9KXvvtSnUsc9+gzS/itUqJDNFa3v0QAAAOIlGbmXvmf+4IMPbP4/HdcoB1G/
oEjfP+sy5UA6dtf3gNEcA+kxbrjhBnfGGWdY3/RAqqNfvHixnROoZ1GvXr0O
G5MnqodRPqC58pQXBNfXq6+Vzu+ViezcuTMHWyA68cy9tP1mzJjhypYta+dE
GsuWk/ECqu8pU6aMO//8893y5csPu0zbbcmSJe6ss86y3Gv06NFZ20Y96T1e
zVizZs3cG2+8kfV75V6ao1x1X8H7QOut/aDXSuB9SbL2TzJyL94T0SH3AsLz
cq9zzjnniNxZ9Zd6z+tvsP7ean7WvIjcKz3ps0R14126dLE5bbTv9FPfAa1c
uTLVqwcAAPKYROVeOuZWHyflBrt377YcRefX+k5PYzAeeughO15VHbvGYHi1
JDq3V6+nzz//3N1///32fbX6E2msxt69e61fSajxcaLbqfbolFNOsZ7c6nui
cXP6vZ6nMgOdQ+v4qmXLlm7VqlXW19s719c6LFiwwB5P9TSqv9Hlur1+qn5J
dVOJ6nUUj9xLz0HbfPv27W7QoEHWJ17Hkno+2gbqqxW4vcPxxh1o/IzGJOo2
3rZct26dZR3KIurUqeO6d+9u423mzJljNUW6b9UATZw40VWpUsXVqlXLTZky
xfa1LlPupXmaNEfg6tWrLWfS73X/Gnen/d6jRw+3a9euI55bMvZPonIv3hM5
R+4FhBcp9xJvfgrvu4+8ONaR3Cv9KPPS9zadO3e2+Zy13zR3sOZ4Dv5+BgAA
IB4SlXu9+OKLViOieQD1XbN+Kv/wFv23zsV1mY7ZlYuIzqVVP6SaFs3ro7Eb
WvRv/a5nz55H5CGBlBno9qpT0vmyelM9+OCDlinonF2Zi+YNVL/u0qVLWz29
zq0Dbdq0ybIc1TN17NjRzuv1uBorsn79+rhup0DxyL00tlHb1du2oba36ndU
a5Wd9957z+YQb9CggevUqZPNvThixAjbHnrdKIfRWESNu1MvGe1DzcmkPEf7
K3j/KTuZOnWq1XGpBkn3p+06cOBAy8jGjBnjbr31VrtP5XbhJHr/JCr34j2R
c+ReQHjR5F56r6t2V/lXKMrMlXOn66Lx3spPyL3Sg/aZji30OeLVeSnzatiw
oX3HkhezWQAAkHrJ6u+VbKprWrNmjdWv7Nmzx46ltHz66adWQ6++Rvq9al/C
HWcp/1DvCZ3Xq/4m0eLd3ysetG28ban10jmGsi2PvrfVtsnJ9lGWpHow0fbX
WAeNg1TNmOqhoj3uTdT+SVZ/r2RLx/cEuRcQnpd7aSzjc889Z/Wc3qK/parH
bNWqlX0v8dJLLx1xe/39Vr2Urpeuy+zZs+05knv5n8bF6/NHtd5ePy9lXvpu
bd68eWHrlgEAAGKVV3OvdOTH3CsT5dXcKx2RewHhebmX6jQ1f4VqNTVniHIF
jRlTf8e6detaphCqv6PGSKt208uM8sJC7uU/+h5F36eon6TmuvH2leq9VEP8
zDPPkHkBAICEIvfyD3IvfyD38g9yLyA8L/dSfqB5e4877risRWOX1ddLtTTT
pk0LWUtL7oVEU56lz9HJkye7mjVrZu0n9fVSVrt06VLGNgIAgIQj9/IPci9/
IPfyD3IvIDwv99L8GBrvpz5/WtQfUb371MtPYxyVg6mPonoFBtLfOvX/UkaW
rovyvkKFCpF7+ZB6ee3YscP6QOo16O0jzbejmkS9RgEAAJKB3Ms/yL38gdzL
P8i9gPCy62svmmtVY8kuvvhimz83kMY+7ty50z5z0nXRvLatW7cm9/IR1W9p
TgX1jVS+5fWvP+qooyyr7NKli/UKBQAASBZyL/8g9/IHci//IPcCwosm99ry
f+ydB9gVxfm3rVEQWwALioJYERFURFEQSxSNEBURCBgkKElAsVFiN6hYIkqw
N2wowYIR1AiKIoo1CAHEEogUUVEjlthj5rvuyTf+l3XPOdvO2T3v+d3XtRcv
p+yZnfrMb555ZuFC06dPH3sGLGft1jWIy3/SSSdJ98oJaKkffPCB3dfI2cSu
XIhf37RpU7uvljNWhBBCCCEqiXSv/CDdKx9I98oP0r2EKEwp3YvYSpyfd9hh
h5m2bdvaMx/rGtK98gE+Xpz1/Oqrr5oBAwbY2HKuTNiHutdee5nx48ebb775
JuukCiGEEKIGke6VH6R75QPpXvlBupcQhXG6F/sYH3zwQfPJJ5/8cBHH/vXX
Xzenn366jYHVvXt389prr2Wd5NSR7pU9+Hjhw4U/YevWrX8oi7XWWststNFG
pkePHuaVV17JOplCCCGEqGGke+UH6V75QLpXfpDuJURhnO7VoEEDs8suu5h9
993XXu3bt7f6w+abb27q1atndbH7778/6+SWBele2eHieOHjRcwu6qErB2J6
bbfdduaiiy6y+x6FEEIIIbIE3WvQoEH23CeRLffdd5854YQTzIwZM7JOSk2D
7oWtjh0v3Stb0L0GDx5sRo8enXVShMgd6A29e/c2jRo1Wu1C79pxxx3NgQce
aM4++2wzd+5cu+exLiLdq/Kgd7Ffcfny5ebaa6+1mqvLf2LX169f3/zsZz+z
e2/xBRNCCCGEyBrmleecc4656667sk5KzfPYY4+ZM88880dnbonKgu5FTN4L
LrjAfPzxx1knp6ZhX9Z5551nxo0bl3VShBA5RLpX5UDv+vbbb63/Fv6DnTt3
/uGsRufjtc0225izzjrLamJCCCGEEHlB+xzzg/Y55gPtc8wP2ucohCiGdK/y
4/y7Vq5caSZNmmTPSVh//fVXi+NFHPuDDjrITJkyxWpjQgghhBB5QrpXfpDu
lQ+ke+UH6V5CiGJI9yof7I398ssvzbJly8ydd95pDjjgALPeeuuttqcR/Wvn
nXc2o0aNMu+++27WSRZCCCGECES6V36Q7pUPpHvlB+leQohiSPdKF7eX8bPP
PrP978iRI02rVq2sT5dX70L/2nbbbc0pp5xi5s+fb78nhBBCCJFX6pruhe3F
GiWxVKvNDpPulQ+ke+UH6V5CiGJI90oHbKYvvvjCrFixwvzlL38xxx13nD0j
weWr28+If1ezZs1svzx79uw6e16CEEIIIeoWaeleX3/9tVm1alXs65NPPrHn
YceF73744Ydm6dKl9uyqefPm2ftWE2noXm5fwqeffpr4wgauxbOY0tK9VBbJ
ke4lhCiGdK/4MKYwRn300Uf2PJ3hw4fbsxnXXnvt1fQu/k/8LvYz8hn8u6R3
CSGEEKKaSEv3euCBB+zZPh07djTt2rUzrVu3thd/d+rUycaF8F58br/99rPv
t2nTxnTo0MHcdNNNsX//9ttvN1tvvbW1zfDB5/z2Z599NtEzVZo0dC/icFx6
6aXm4IMPtrFnu3btao466ihzzDHH2Ktbt272dd4/9NBD7fvuPT7H+126dDGH
HHKIGTp0qFmwYEF6D1glpKV7qSySI91LCFEM6V7RcFoXZxVj/1188cWmffv2
q8Wpd3sZf/KTn5hNNtnE2mdjx46164pCCCGEENVIWroX/lpvvvmmmTlzphkw
YIA9zxq7qUePHvY3Fi1aZBYvXmyv119/3Tz33HNmwoQJZvDgwdZnHpvrzDPP
jL03EX8vbDJ0hsaNG9es7jVnzhzTvXt3q/+RB1dccYU9b3z69Ok2z6+55hrT
tm1ba9e2aNHC6jvkE7/JOU3YtkcffbTZeOONrS45bdq09B6wSkhL91JZJEe6
lxCiGNK9ioNN9d1331mfYfy6XnrpJat17bvvvqZevXqraV1c2G6MWdhl2CNT
p061Y6IQQgghRDVTjvhed9xxh9WeGjRoYM4///yin8UeYz6P/xe2K3u6koCN
tvfee9es7vX8889bX6FTTz01ULNBm+Q3sG/xM+LzfrBxr776avs++kutkZbu
pbJIjnQvIUQxpHv9GHy6iD3x+eef2zMWn3zySbs/kXUW73mM3n2MaGCbbbaZ
HWuuv/568/bbb1ddjFQhhBBCiEKUQ/fivGvspw033NBceOGFJT+PfTZmzBjr
J4atlQTsO9Yxa1X3wpcIneWRRx4JfP+tt94yJ5xwgrV12T/3wgsvBH7ulVde
sf53d911V+y0VCtp6V4qi+RI9xJCFKPWdS/ibHH+InsXOYOROKevvvqq1a56
9+5t/ba8ZzH6ta6f/vSndp8j5zbio8y9hBBCCCHqGnnQvWDGjBl2jyLnAyWh
1nWvKVOmmFGjRhWMwxFWayH2xw033GCuu+662GmpVtLSvVQWyZHuJYQoRq3o
Xk7fIqYDYxS+8exbfOONN8yDDz5ozjvvPBsjEp2LvYp+ncvtYaxfv75p2LCh
1brwx2ffY5IzhYQQQgghqoEsdC8Xb8J7Pt3ChQvtvP6JJ55I9Nu1rnvdd999
No5UoXgcYbUWyoZyrEW9IS3dS2WRHOleQohiVLvuhT2EpoVN9M0331gNilhc
jBv4bxE7FR8u9sU/+uijdt87Nhs2Dmf5FNK4vLHpide1+eab2zOFWIthfRE/
eyGEEEKIWiEL3Qs7Dj987DjHBx98YOPcP/zww/b/7swh4lNw8Td2YSnC6F7c
262Zcm/+ZR2VC7szKKaF0+r4nvsOdmOaZ3mnoXtxrua1115b8P2wWou7F7HV
yReelTJw+cNz8zeve8vFrUnzOnnFv159k+/yf/dd7llsX0Ul8t1PWrpXmmWB
hsZ8p5bKAaR7CSGK4de9evXqZf7xj39YzSjLy9ku+GVh86xatcpe+O8yruCr
hZ71zjvvmHnz5tl98dhA2GLnnHOOfSbiQxKvFHuKfYmF9C3v3kXid6FzcQ7j
9ttvb3r27GnPysbe8o4BQgghhBC1RBa6F2c73njjjavFPWJe7dY6mYMTZ4Lz
7oiPdNppp9k5P2fgMd8uNtcupXsxV8e3jDSibZxxxhnmggsusLH1H3/8cWt3
Yot64fewVYk7jo4xdOhQc9ZZZ5m7777bLFiwwKY7DdLQvbCxi2k1UbQWnvnl
l182Dz30kLn55pvtOjF/Y8svX77cTJ482drT5DPlQhkuWbLEvj5u3Dhz5ZVX
mltvvdX+pgP7n3hVPCt5yblSrGEHUal895OW7pVWWaA3of8Q36uWygGkewkh
iuHXvZo2bWq6dOliNaMsL/zOuOjb999/f7Pnnnuali1bmu22285sueWWVpdC
owqKvVXqwo8LPy/OwUbj4sxfbK499tjDnHjiiXY8wKeLMUIIIYQQQlRe92K9
Ef2KWBRB8b6ZX5MW9IDHHnvMromuWLHCzt07dOhghg0bZu3cQucMFdO92DuA
doBdyBwffY30LFu2zM6rWRs99thjrS7nTS/xM04//XR7zhFzffZQEBMDW7tz
587mnnvuSSU+Rhq6Vymi6F5oKLfffrtdb+Z8TmxttCDymHLl6tGjh9l2223t
HlX0EXyc9ttvP9OkSRNrz/O3d+8qmiPnSmH/E1OXz6A9+qlkvgc9dxq6VynC
lkWtlgNI9xJCFAONn7WxjTbaqOiev0pf7EFs0aJFonv49S2ekTj0zZs3t2PG
kCFD7BrizJkzzfvvv192/1shhBBCiGqlnLpXgwYNzIgRI6x2wOXOGTr55JPN
QQcdFKh74W/FXJq4SGheDjQqfL4aNWpkBg4caFauXBn428V0L95DZyB9ftAW
LrvsMtO3b98fdC+0NfYfsG+iTZs2VkvwsnjxYpsW3mMfWtIzv/OmeznQPrCt
WZ8mbi6+Q/jGoZ3069fP6ptoKG6fHPmAvojm4tdbHJzbSd4F6S2Vznc/edO9
HLVWDiDdSwhRDLQe+mzsiU6dOlmdKA8X6xA77bSTWXfddW2MLXy70K9YZyC2
PDoWNhL9NnoWPlv07ZtuuqnVtog9T4x6fNfwscWHi72Q6Hzl9LEVQgghhKiL
lFP3Yi7Nv61atbJ+JdiBzrcf3xW/7oUtx/yWGBVt27Y1kyZNWu39Z555xsZl
5T32eQVRTPdCJ2D+f++99waui+IDdskll/ygexGjgzMmSTP+LmhvftCq2LeA
D5lXp4tDXnUvmDhxol1jpgzZ6+Zi8D711FPmqquu+tE5nOQl5VRIbyHOCTFM
gvSWSue7n7zqXlBL5QDSvYQQYZg7d671+2Lsz+piPc9dxxxzjF1HO/roo+2/
2FlnnnmmjatAf3b99dfbdQnsnKlTp5pZs2bZ/g77A98t9igqHpcQQgghRDqU
29/r7LPP/uFMIvYrMj/v37+/tRGD/L3wKWndurXdt4VvmJf58+fbGK3M+4lz
FEQx3Yu9YltttZW1QfFjIV3sz3K2JbGK2FvpfMlYW0UvYL8CscaCYM8mmgXr
zEn1qjzrXvjzoG/svvvuP/L7CQI/pL322qug3kLsK/a6Buktlc53P3nWvWqp
HEC6lxBCCCGEEEKIJGQR15742Oeee26g7sVeKXeGtzvT0Z2HhA7Wp08fu2+r
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
66QIIYQQQgghhKhC5O+VH+TvlQ+0zzE/yN9LCCGEEEIIIUQSpHvlB+le+UC6
V36Q7iWEEEIIIYQQIgl1Tff673//a77//nvzn//8x/5dTdQ13atay0K6V36Q
7iWEEEIIIYQQIglp6V5ff/21WbVqVezrk08+MV999VXs3+e7H374oVm6dKmZ
O3eumTdvnr1vNZGG7pV1OUC1l0Vauhea35dffmk+/fTTxNcXX3xh9cNaQ7qX
EEIIIYQQQogkpKV7PfDAA6Zz586mY8eOpl27dqZ169b24u9OnTqZAw44YLWL
z+233372/TZt2pgOHTqYm266Kfbv33777Wbrrbc2G2ywgVlzzTXNgQceaJ59
9tlEz1Rp0tC9si4HqPaySEv3WrZsmbn00kvNwQcfbA477DDTtWtXc9RRR5lj
jjnGXt26dbOv8/6hhx5q33fv8Tne79KliznkkEPM0KFDzYIFC1J8yupAupcQ
QgghhBBCiCSkpXvhJ/Tmm2+amTNnmgEDBph11lnHah49evSwv7Fo0SKzePFi
e73++uvmueeeMxMmTDCDBw82zZo1M+uvv74588wzY++Hw8cI/yJ0hsaNG1ed
1gJp6F5ZlwNUe1mkpXvNmTPHdO/e3ep/5MEVV1xh7r//fjN9+nSb75yh2rZt
W7PGGmuYFi1a2N8knyj/SZMmmbFjx5qjjz7abLzxxlabnDZtWopPWR1I9xJC
CCGEEEIIkYRyxPe64447rN7RoEEDc/755xf97HfffWfn8/gdnXTSSXZPVxKm
Tp1q9t5776rTWiDt+F5ZlgNUa1mkpXs9//zz1m/r1FNPDbwP+iTlje6Fzxef
D0rL1Vdfbd9HC6s1pHsJIYQQQgghhEhCOXSvO++802y22WZmww03NBdeeGHJ
zxOTasyYMdY/6e233070208++aTZd999q05rgbR1ryzLAaq1LNLSvfDrQvN6
5JFHAt9/6623zAknnGB1L/YyvvDCC4Gfe+WVV6wP3l133RU7LdWKdC8hhBBC
CCGEEEnIg+4FM2bMsPviZs+enei3q1Vrgax1L0irHKBayyIt3WvKlClm1KhR
ds9nEGF1r48//tjccMMN5rrrroudlmpFupcQQgghhBBCiCRkoXsRO4p9dd7z
6RYuXGjn9U888USi365WrQUqrXuVsxygWssiLd3rvvvuszG9uF8QYXUvyoey
rEXtR7qXEEIIIYQQQogkZKF7EXv91VdftfGNHB988IGNr/7www/b/zPX//LL
L83nn39uL/5GoylFGK2FexN7HT2Ce/Pvt99+a69vvvkmMKa704j4nvsO+wK/
//77sNlSkkrrXmHKAcpVFnHKAcpdFmnpXpytee211xZ8P6zuBWhoxPniOcl/
lz88M3/zurdMeJ185HXyiX+9+ibf5f/uu9yTzxeiEvU/COleQgghhBBCCCGS
kIXuxZmCN95442pxj5hXMwdnXs0cnLPwOO+O+EinnXaanfNzBh7z7WJz7VJa
C3N1fJpII9rGGWecYS644AIb0/3xxx+3ms+HH3642nf4PfaaEXccHWPo0KHm
rLPOMnfffbdZsGCBTXcaVFr3KlYO5BN/l6ss4pQDVKIs0tK9OBug2PfD6l7o
Teg/xPe6+eab7d7Jhx56yOpPy5cvN5MnTzY33XSTzWPSTrktWbLEvj5u3Dhz
5ZVXmltvvdX+ngPNk7hh1Dny8eKLLzaPPvpo4O9Xqv4HId1LCCGEEEIIIUQS
Kq174WOCZnLeeecFxvtmfk1a0AMee+wx89FHH5kVK1bYuXuHDh3MsGHDzD//
+c+CvkDFtJYvvvjCagcnnniineOj6ZCeZcuW2Xn19ttvb4499lirB3nT+8Yb
b5jTTz/dnqnHXP+9994zL730kj33sHPnzuaee+6xel1SKql7lSoHKFdZxCkH
l+ZKlEVaulcpwupepOf222+3Z2NyPueaa65p00b+Uq5cPXr0MNtuu63do4pO
ha/ZfvvtZ5o0aWLWWmst+7d37yqa4/Dhw03Lli1NvXr17GfQHv1Usv4HId1L
CCGEEEIIIUQSyql7NWjQwIwYMcJqB1z477Cv7uSTTzYHHXRQoN6Cnw9zaeIi
obM40EbwM2rUqJEZOHCgWblyZeBvF9O9eA+dgfT5QVu47LLLTN++fX/QW9Bz
5s2bZ3r16mXatGljtQQvixcvtmnhPfahFdJ/wlIu3StOOUC5yiJqOUAlyyJv
upcDDQr/vE022cR07drV+nDhG4eG1a9fP6tvomW5/YrkAfoi2pdf93Jwbif5
FqR7Vbr+ByHdSwghhBBCCCFEEsqpezGX5t9WrVpZvxL8UZizr7feetZ3xa+3
sF+K+e3aa69t2rZtayZNmrTa+88884w54IAD7Hvs8wqimO6FTsD8/9577w3c
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
+eWXs06WEEIIIYQQQgghhBCx+e9//2seeugh8/Of/9xcd9115sYbbzStWrUy
Y8aMyTppQgghhBBCCCGEEELEZtWqVebcc881HTt2NE8++aS9/vjHP5qFCxdm
nTQhhBBCCCGEEEIIIWLz97//3Rx77LGme/fu5q233so6OUIIIYQQQgghhBBC
JOL777+3sesff/xxs88++5gTTzzRfPzxx+Y///mP3fsoRKWgLn777bf2bAX+
FkIIIYQQQgghhIgL2sKyZcvMjBkzzPnnn2+23XZb06dPH/P0009b/6/PPvss
6ySKGoB6yJkKb7/9tpk6dap55JFHzD//+U97puinn36qM0WFEEIIIYQQQggR
ma+++so89dRTVvM65JBDTMOGDc3RRx9tLrzwQnPnnXdaTUyIcoLmtXTpUnPJ
JZeYXr16mbvuuss88MADNtbcYYcdZnr06GFmz56ddTKFEEIIIYQQQghRpXz0
0UdmxIgRpl27dmbKlClZJ0fUEIsWLTK/+93vzDHHHGPmzJnzw+uTJ0+254mi
w77xxhsZplAIIYQQQgghhBDVzOuvv2769u1rDj/8cPnWiIrB3sarr77atGnT
xtx0002rvcdexz322MMMGTLEfP311xmlUAghhBBCCCFEFhBvnNjPn3/+ud2r
JqoT9nh9+eWXNo4W5ZlVHPmZM2eagw46yPzqV78y7733XiZpCEL1PH3yUufg
xRdfNF26dPmR3kqabrzxRrPjjjuaMWPGVCw9qm/lIU91Toi6Du2LNqezaUQc
vPVH58vUTShj9Q35gHJwba2ulYnGIpEGxHj+4IMPzKRJk+z+IOLhRK1PfJ55
CP4WqovZgcb0pz/9yQwYMMDGNPrwww8zsTOoS7vuuqs588wzbf+UB9Ko5+LH
5KXOAWW7yy67mN/85jdWa3J4993i91UJVN/KR57qXNrIrhNRcTowZ3YkvbDh
3JjNPenDlixZYveMz58/354NIkQYWJNYtWqVWbFihVm4cKFdi1q+fHnWyRIp
g/88NpbOrcoObAX6bvprznOirb322mv2tbqAxiKRFthLL730kj1zr1+/frYu
xYH6eOmll5qzzjrLfPzxx6mlj/6U+/3rX/8KdTHG0vfiW1FX5kFRYb7N3P7g
gw+2823Osavk/InfYo9ZixYtzJVXXlmx3y1GWvVcBJN1nXPcfvvtplmzZuaC
Cy5Y7XXGSeJ9VSq2l+pb+clLnUsL2XUiLpwXg/1FW+Dsjq5du5qjjjrK9nlc
3bp1s6/z/qGHHmrfd+/xOd7HT5azaIYOHWoWLFhg+7Bbb73VNGnSxNSvX9+s
ueaa5mc/+5n1qa01sCeZ12NfpnEWcNr3yyuc401923jjjc0666xjttlmG3P9
9dcHfrZW8qQuwlnt48aNM6+++mrWSanZesS8l/nWFltsYerVq2fWWGMN0717
d/PWW29lnbTEaCwSacLaC/FujjzyyER9FuNbp06dzH777WeeeOKJ1NLHWn77
9u2tD0fz5s3Nlltuads1c9uWLVtanyJ3tW7d2nTu3NnurSPGz7x582wfWM1z
objQT5B3xDPCjvX6vpSbf//73+YPf/iDLZ977723Yr9bjLD1vFbHzDTIss45
/vKXv5h99tnHjBw58gfdmzXn8ePH2z2OlYrtpfpWGfJQ59JAdp1IAjopc5wN
NtjAHHjggeaKK64w999/v5k+fbp57rnnzDXXXGPatm1r50KsRzE+P/vss9Zu
wx917Nixdk0AfQIbbtq0afa+9E+cjXvRRReZn/70pzVZJ8mD2267zeYb/XnS
50/7fnmGMY3xbeLEiWbvvfcuqHvVUp7URR599FFz7bXXWjsmS2q5Hjl/r3/8
4x9m2LBhVvuqFt2LfgK7vNjeII1FIg2oY3feeafVlLCD4upD2OzEztlkk01M
48aNzeWXX56ar9W3335r17w5o+2cc84xG264oVlvvfXM4MGDzfvvv281buY6
XCtXrrQ2HnvrGF/p+0gLn6t27StMv+Bn8eLF5sQTTzR77rmnefjhh8uYutXB
x5Z9ZmiQzzzzTMV+txBh63ktj5mFiFrvsqpzDnx+Bg0aZPr372//xg5zWhia
eSVie6m+xaea+rm0kV0n4vL8889bv61TTz3V+r37efPNN+16ILoXPl983g/r
VawX8j5amJfHHnvM6ma1WCfxv8SfdK211jJNmza18/s83a8aoI9mT3oh3asW
86SugH3z5z//2WrnWaN69D8oj2233bZqdC/WhvGRoJ8oRS2PRSI5xEg5/fTT
zU477WTnaXHBx/6UU04xa6+9trWrjj/++LLEMmf9kjniZpttVnT/HPMH1s7p
95g/nHfeeVW/7zxKv+Bg/jhq1Ci7hstcqlK8/PLLdh7fu3dvO4/LmrD1XGPm
j4la77Kqc16Y45177rnm2GOPtRoY6eBs0UrF9lJ9i0819XPlQnadiAp+XWhe
hfo35j4nnHCCtc/Yy/jCCy8Efu6VV16x64bEIvTy+OOPm7322qsm6yRrr/gL
77777qZnz57mb3/7W67uVw24tdBCulct5kldAX++u+++22otWaN69D/uu+8+
s91221WN7jV16lRzySWX2HhkpajlsUgkBx+qX//613Z+5rdzovDkk0/aeWWr
Vq3s/gz8mfF7TRt0r+23395svvnmZvTo0UU/yzg7cOBAa+exB3LChAmpp6eS
ROkXHIwB+LuRB+iS5Ywvz735PdZ+KHv2Spx99tm5iLEWtp5rzPwxUetdJetc
EEFnCs2dO9eO/8SyqURsL9W3+OS9n6sEsutEVKZMmWK130LrTGF1L2Kp3nDD
Dea6665b7XXVyf/5orJnPq/3yzOldC9HLeVJXQH76pZbbrGaeV6o9XpUTboX
9jrrw6wBS/cS5YZYhD169LBxb+64445Y96B/YY8ja4TMPRo0aGA23XRTc/HF
F6eueUTRvfhtfPbxQSNN/jjX1UTUfsGBHwSxbtEi2RdarrhGzDOpS3/961/N
u+++a2OLY1tTXnkgaj2v9THTEafeVarOBcFeZ/yEqIMO6iY2QJs2bczw4cMr
kh7Vt3jkvZ+rFLLrRFTo44jpxV7FIMLqXm6P9h//+MfVXledFEkIq3uJ6oN1
bvY4Bu2vFtlQTboX8YmIzfqLX/xCupcoO/g+sCeRmFx+OycsxNBhnZHz+/C1
79Chg7Wt2OPG/sc0iaJ7MYdizXL99de32tdpp51WtXGjo/YLDs6OZu8DsW7Z
61kuWGNmPxn7yJjnX3jhhea3v/2tjauWB9Ko57VInHpXqTrnh/ZO3dthhx2s
xo0PEPudOdvipJNOsmdKVSrWnOpbPPLez1UK2XUiKpztUGyfdFjdq9C9guok
GhkaM+eQotuHWeekn8YOo29mnQKdjnskWSPlnnyf9PCv+5ur2HvuN4M+w+Ve
ZywhjaTZn1bv+y4f3Pf4m9e9dmep+wV9xpu3pJHXouS5+15QWZE2yoA4ILyX
xlq1+y3S6fYAFNO9wuSJ996k08X05e8odn3UfIhavknSGrbcg+JfkiZn83Dx
O+WOaezyErsLnwdX1uX4jTDlVaoehekLCn3O9Qfez4Ttx8rRnkvh173C1o80
86gUfJ7ndmdOcaYw9jpp43L9t588j0VBz8g9XV3l3IEw7cT7PdIWpk27uuS+
w7/8Fpfrt9y9/fXR7ZOJ04fE6ZOzaBMOfNrPOussG1+GeUMcXQgfH+LNE9OJ
M8xOPvlku+7O+VrEk06TKLqXezbsvK222sr86U9/Svz7UepiUB/sHav4Dv93
YydlzOf994jTLzg444m9XeVeYyM/OC+KWOLE18GvJk97tsLU86zs0VJE7f+y
rneVqnN+SM8999xjzzIjljxnyuKHit8Vew5feumliqVF9a1u9nPueco1x3Zk
Ydclmd9Vwn4Uxfn000+L+ltE0b2wz+nDvHjrJDHxsd/RpmmzjP3E5GO/E3Wn
WF/Bffk+uhoaN/0ksYEWLFgQ2+eV+sbzYXPga0vfwd/0C6y94f+LfUr6eI8Y
guzJwl4Fzk3i93mN7/M9no0zUfgue6+Z27OGgS87Gg5Q5zk77aGHHjI333yz
Xf/lb9oA9548ebJdD+bcTOeHV+x+QN4R95HvcuYJPnyMa8SMJG/nz59v/fHw
rwmT5/Qb5Dn5wW9eddVV9nuvv/66fT7qAeuUnHmA7UZszLiQH9RB0kSsJ56d
ZyUvWAsqpHuVyhOXLzwnZUN9Y1xlLZs9HZxlRf4W62/i5EOc8o2b1jDl7vKH
tFBXaYNurkoePvXUU9bmYZ8y9s8777yT+lq/G6s//PDDH9KEjwO2P/Fu8HVw
6UpCnPIqVY9IFzEoKBfSTl8we/bs1foCoHy4n7c/oH9wfWKUfizt9hwWp3th
F9GXkTf4pdD22JM6c+ZMu17o941Pkkf8jn/cKATlS9lwzhR7MRiXOnbsaMcT
2ggXv8taqJ88j0UOfhd7aOHChba8iTfMPgbqLPFbaT9B8Thc38H3iM10/vnn
mzPOOMOmkTwhll7Q9yhHvkNdYv7Dd1j/51xm8ot78ZvePo16cNlll9n3qB9c
tGF+i3ri2nOh/RNx++Ss2oSDNKEfUefQq/zzkVLwefJoxIgRP2ju9MnEF95o
o41svqdp+4bVvShbfG/bt29vz34k9hhlHZeoddFbruPGjbMx+Imz7/U3xdai
z8A+4D7sC/XGREvSLzh4H98J4q6VO+Yk/QS2DfZlVH9nNzcu1zwpTD2vtD1a
ijj9Xx7qXaXqHOn023T8H99D7D+eCduI8ql0vCfVt7rbz5Vzju2otF0Xd34X
9XdEdkTRvYJwdZLvcmYq9YRyxoZnjs15qvjaYkcH7bWknWMfcN4H50VSP+jL
WI/AH5ezn+nfmCtEhXkafp6cn4u9xzMSa+Pwww+3acV/DV/0hg0b2jVZzgQn
Bq3bg07/cdxxx5n69evbvQG8f/TRR9s8oo8+4ogjzNZbb23fY12FdgA8J/02
98K3l3uzxsJ8gfkNF+sunKvm4qUVux/Qnkgv+yY4f5i1E/o2PkMfi60dNs+5
F+MEvvcHHHCA7Z9p1/Tr/P/nP/+5jU9C/4VtjU80c6E40Bfx3OQj92Fc4v+U
87Bhw8zIkSOtHR6ke5XKE6CPYe2aOszzMx4xb+eZyCt+g70nhdag4+RDnPKN
m9Y45U4/zW8xRjKvJg0zZsyw+cvchzyN2s4LQVrpy9E6iL/J2EQ6aHfE8SWN
+Hx17drV2g7Ml+Pa83HLq1Q9Is/RBFq3bm1j39BP8C99g/f8IcZCfrtevXpm
nXXWsWej4Tc1a9asyP1Ymu05Ck73Iq8Yl8kvbCxsY9KDXkj+YK9hk7i6SB5R
fsTEph8kj/Cjp+/35xE6jsujRo0aWf0zbH3DbuQ5SR92H/0283pXvlzkJ/ni
J89jEZCXtHnaI+2Qc2ypO9hSrGNS5uQd446/D8CGpJx4ftLv9Fzq/y9/+Uur
L2NTeucU2IfEEea5sa3pi3lG2iBzCzQTzvhinCQ/GPf23Xdfm9/0aZxBR1r5
PvMV6iX/p11RNvQn2Kf+vjVun5xVm/CCHU2do0+JCrYU8xjS6mAvEXWX9sKY
EOVcrlJ4dS/K0/kDuMv5KVDHKGdsH8bhJL5HceqiK1diuzdp0sSWK3972zDz
S/yiWrZsafsOPuMtgyT9goOxg3jZ9BHMXfIK7Yd5IPOkqNprWErV80rao6WI
2//lod6Vu87Rh9LPU1/QF8rtyx8X1bf/Udf6uXLOsR2Vtuvizu/KbT+K9EhL
96J9M8dGX/auA1PmtAH6K39bpY9GA+7Vq5dt47QRL9iInEHEe8zX4vbpaMHY
fbQr7HdvvSOtaDGsydKf4QvjBZud+TvzPdYZ/HXWnSUepMnQDvCz2WSTTey8
n7kk+UXf169fP9vG6QO9fWex+zlYf0An6tKlix1P6IvD5jkw5yBfd9ttt9XO
dcI3EB8Z9kHwL/fks/gGxLHX6T94/p133tnO57x+IUAfT//FOezFfHKL5Qnp
pz9h/YeycjDHw7+AeTfPGrQ+kjQfopZvkrS674cp9z333NNqX6yDeOMCkF7G
cnwPWIdI2v/SHtFGJk6caNNE26JMgfM0mPu6dRvsMtpgnz59YvsOJi2vUm2L
to9fCv0E/lBB6XQxF8hj+ivnz52kH0vanqPgdC/qGjFP/c9IeWE/8Bnqrree
Ar4L2Dk/+clPCsadYKzHlsPemTRpUuz1ZdbzsB+jxvfK61hE3SHvqKfshfPa
aPyNfsg4Q2wg73voVNhS2GE8k183pr9Br6Rv4bnc+9hpjO1BZ8dzf8qZNQds
VwffpR/DTkXXxb57+umnV/su2iZ5gU2Iboq/mJek/Zy7R6XahIP+0J3/jg4e
Ffo8xjPWrB20BcoO2xldPc3Y5k73opzwqcN2cxd6G/0/53nRV3Xq1MmuAXzw
wQeJfjNuXQTaDDosbdo/H3S8/f/PnfTPB71E7RcctGG0ZuyRJOd1lhvsJJ6d
uRNzO+plmnpGlHpeCXu0FEnqHGRZ78pZ53hO+lfsZp4Ln6o8nt2n+lb3+7ly
zrGzsuuizO8qpWWIdEhL96IO0Ff4bWDKGz2WuoM/iBf2TXLuBO/xXexiP9Rx
5mDcwz8HCwv9EvWX+T7aMnNiL+ztoZ8NipvHd5k3oPEGacnMrVm7L9RPowk0
b97casP4V7izSvCvYI8WeneU+wExRLBlt9hiC7t3Ikqeu3iXaE1Bc3tikLAW
wfpCkriX5Bs+Bsx9DzvsMLsWFQR9Fus8xXSvQnlCPrLOTV/btm1bO8f24tba
eY+x0Uta+RC2fJOk1RG23FlHwjc66D7MhZo2bWpthqQxR2i/2FqMr8zjXXoo
e36HOa7DnU2D7zV1Muo+yzTKK0zbYn2MNFJvH3nkkR+9Tx9AOaOvOT0zaT+W
pD1Hxele+PWwxhqEGxOwP1lb89vSrs8nzay/+SGP8APHvyfJXp24ulcexyLy
EHudPA3qD1knxJbGRw6tye2NoN8gL+kfsbEKtZsHH3zQ1n/u4exK7DRsRdpi
UDnQP5MPXt0LXB0J6qcc+I+ipdD3Mba6OpJGPweVbBMO8oF7Mp/h+aKArY7O
//vf//5H+z9ZO0YjxD+SfjKtPeZO96K+H3XUUba/9V70zWj0+KQSV5q5Bz5E
pC+O3Z2kLjqoc5R9ofkgujt5VI75IOknX9Cd8TMvly9VGtA/ENcHPwb6UTTi
tDSNKPW83PZoKdKoc5BVvStXneM+tGV0bdI0ZMiQxJp2uVB9q/v9XDnn2Fna
dWHnd5XSMkQ6pKV70U94ff4cLqbhuuuua/sRL8SVoV/AtxXdPgj2apEubGz/
unMUnJ0etOZKX8s8sFmzZvYZvDYh/q7MH/BPDII1db5bqJ92c4jdd9/9Rxpw
nPtBkjx3ay+sP9Nn+9fcyWPyaaeddkq0VuDi1ZMGfGgK+RbRn7MPqpjuVSxP
yFPKlLkifsdenL8v/Rbzdy9p5UOU8o2bVkfYcqctM/YE+eixfkyMZXQx+u64
MJYyj2eNBh9er81FXqJR+WMLuHLEj5l4XFFIo7zCtC3nU8YYy9qS3+6h3Jg/
er+ftB9L0p6j4uprMd2TZ8YvkLPfmHthX3vxnhfE/gJ/zALmbDyHX9OPSlzd
K49jkdO18JNjn59fhyJ2BP44aELkvctTty7A/Bf9pBCst6JvYOu69PN5/o9P
F2uR2Ga0Izd/plzpD/xtKUwdwc8T3zXsdtZC6b8cSfs5qGSboCzYK0SfRd+I
T0LUuQL1kzkGexv8EOuDvaH0y/R91IU0CBvfCxvcne1Gf009o/yikqQuOrxr
90HzQXx3Xb1Kez4I1GfWTRgD0P295zpExcWn5qJdUYeSXC5Wt4ubzBoM9ZF+
ljZD/ifx/YpTz8ttj5YijTrnTWMW9S7tOkdaWU/Av4U8xc+G/j3NuujOSeJ+
cfVW1be60c+FpVxz7CzturDzu0pqGSI5aelehdaGXftm/Zc9EV6Yn6LZs2+J
No5d7r+YQ2E/B/kORsHtN8CGYE3W9b/8y2/vs88+1g+GOa/XJmR9mnXcQvP0
sLoXPuvE2ShFlH4/Tp7zvKwf4lfAGjD54sW1X+xj716yqKCp7L///lYnJ556
IZLqXi6+AesE7vwwnp8yZM7FvjrGDv/5VWnlQ5TyjZtWR9hypy0Th4rf8sMY
iC9TofE4LK4PD0oLegdrP/45M/nDek+cfj+N8grTtrz7vIilgH3jfY97E6/M
m7dJ+7Ek7TkqYTQNYD2Ts4QK7c3CRsHmYz7v9V1yfk2shSX1a4mre+VxLKLd
sW+CPX7s/wsLeUkfWqq9evfTsX+VuQ9tlPKhzaCN4BNE38KeY/arFvL7CVtH
nP8ldYTvOJL2c1CpNuHiCLNWS9+Ajhu0fl8MnhffNbRg7AXy1nvhm8reD/pl
fATwv0uDKOc5UtbkN3o+9QnbPKq2l6QuOrKeD1JW6JC0BTRm2n2x/baFYB6J
1oA/AH0h/hXUHeZdcS5sUu7BWpG7uC9xZbBZqTuUNf1qHL+euPW83PZoKdKo
c940ZlHv0qpz3Ic9VuyDZ28zdQL/YcrSW2eS1kUu8gKNgT6GeONRUX2rG/1c
FMo1x87Srgs7v6ukliGSk2Z8ryjtm34RW426SpxC/AqYq/sv1sjxTWH/btC+
oyhgp7PfwOvDgE3KujNzEfoX75ycNFKHmW8XWvMIq3sF+U3EuR8k7VNpc6xn
kKdenwz6St5j3xpz/iT+GozBjB/cK2gN3JFU9wJsUPxG8Z/FLsS/gZjMrNtg
K1K/8KHwk0Y+RC3fuGmFNMZSp3uxVsgaTBwY49nLRCxKbDB+1wtxbngG75ks
7nXmyHHXO5KWV5i2BYxP3Mdptk4bwM8JH3ivrpZGP5ZGuYYlrKbh/PQL1Ufm
fIzh2GXY2c5/CX85/Em8ZxTFJUl8r7yNRcxHWAtknoKuGgbyFN9CfMTYI8Je
gUKgr2BrOl9PyoHnYh8q+0awRVkPxU5HB6NsGff4nl/7CltH0Hpoc+SZd08z
JOnnoFJtgjZNLHrKhTkC9k/UM5fQ+NDC0QC5D32U/+J5yX98KP0xPeMSRfcC
no09ttSRUvXJT9K66MjDfJA5CPMUxkDGojhnnuGjgH8f+U9bYQ0A2zLJxT2o
P9zT3RednH6JdkvdYS0xTqzquPW8EvZoIdKqc2mlMYnulUadQ7tmPZF6Ql/C
s1In6FtcvUmrLtKXoVHgP++N6RAW1be60c9FpRxz7CztujDzuyy0DJGMrHQv
5s7sxWU8j2qDxQUbHFuevpz9xPQN1D/sb9YmsGMYM6jDvMcZwLTXYnFIwupe
+MR6z7ONez9I2qei+9NnMyYxX2GPDWvyrMcQX5CzOZjfJ/GLZe5LHEP0b9ZE
C5FE9yJ9PCuaB+8xB+O5yWfGaVe3C82x0siHsOWbNK2QF93LpZXxze+7EhTb
yz0/5+64+FxR9zlC0vIKq3txX2w27B/O7XHxBMg7+gbv+dpp9GN51L1cPSFe
A/2iHxdDglhytF9iMZPvTvNMI35BIbvPndnuL+c8j0X0h+QldbSQP78f9BTq
IekqVWfx9acNMI5jV+FXRf64cYy1e3Qnyp5+mfmSi5eBDe8lbB0hzgr7V7x1
JI1+DirZJkgz/RFtnd/k+aPs7cEfgj089Htur5H/wq4i/ykf/77QuETVvagH
2N+kgf0m9JVhSVoXHeWcDxbqF/z3Z47Fmjv/MjfMIzwDfSr+C2jWPC+xnJLs
kY1Tz7PUIdKqc2mlMW69S7PO0YfiH4OWRL2gHeMrk8cz4lTfaq+fK8ccO0u7
Lsz8LgstQyQjK90LWPcmDlyxGMtpQl9FLEHOWyXmFP9HD3d6Cz6UtFd0Wdbz
0AVor7TNQlSj7kX/jg8W5c36L/FmiNnHc9OH488SFJcvCm6fFFfQeWKOJLoX
+gTrM8yhWEMgL7xjQdAcy40ZaeVD2PJNmlbIi+6FPxVjcdB5MYVie9GesOGZ
I59//vmxYkYkLa+wuhfgr4TNQH6j5XBf4j1Qhn6S9mN51L1cfH8+i2YThNvL
zOcob3zXKXv0zTQoZPcx96P8/LZcnsci1x9i8wXVoUKgTTRo0MDmM/W3ELQ7
2hfjOPsIWW/H39IfA5Y2RAwT9uSRFtYl/G01bB3he8y7vHUkjX4OKtkmHMwn
sVvxSfOeyVgMng39ifginHNZCNoG/R7pLTUmhiWq7kUfTF5RR9gnxR6kKCSp
i45S5Uo+EVcxznywUL/goKwY86iX6H9+vTdPkDbmUqwtsT/If4ZZEqLU8yx1
CEijzoVJY7nqXbnqHG0ZH1PiJBJ7CLsorfMy0kb1rXb6uXLMsbO068LO7yqt
ZYhkZKl7oQOz76lUDEHasVs3TYo7A5e4J8zP6Ofcvl32znPOKvtC2B9Ce/X7
rfipRt2LtQk0dsYg+mtiG5NO9nfFiXcbBLFl2BPt4rgUWptIonu5mDn4YxOv
xP8bjA/EgvLOsShjF48ojXwIW75J0wp50b1Yw2PfUtB5fmhitCnvXkN8wJj3
M8fGB9i/NhaWpOUVRfdiHP7d735nfWJY10MrQGML2uOftB/Lm+5FOrGj0UWo
J4XGceLMELcD3yF0FNKOXxH1Ng2w+0iD3+6j3tJX+ONV5HkscvHwWKPH3i3U
H9JWXDxhcOeU+mNo+XHjOD6KnOGHlsSZ4Jx3FXSWIzou+hR1gX0sXsLUEe5J
GTBH8NaRNPo5yEL3Yn6AfhVFm2TuwT5O/L1KnV2K3zM6IWWEn10pHw3uV+ye
UXUvN9Zi6+F3SPuK8rtJ6qKDtkv9KFSu7777ru1LSs0Ho/QLDuZg1Bm0gkK2
Rh6g7aOLks/E94q6x6kUUep5JXWIoHqXRp2DrOpdOescOhfPwrjCfCavfiaq
b/nu50qNM1FJe46dpV0Xdn6XhZYh4lNu3ct77pO/TrInGj2avTLFzvxDF8bG
47eSwpyZM5WI3YNdj+3tzk5lvoFPKPHp+vXrZ2P7lNJu86h7Fctz4Dv01fyb
1tnYftyeNObElHGhtQl3Lkoc3YvyIcZUoXhRLp6JN/4M5eHG3jTyIWz5Jk0r
JC13SEP3Yg8bWhBzLnQo79wW3yh0Thfbi/GUfOFsT34XuyIuScsriu7FMzF+
sS8TXzLsNvqGoD4qaT+WRrmGxdVX+nr/edIO58Pv2m6xeKjufqyPohNS9mnZ
UM5Hin1hxBNz4IuHBumPH5fnsQiNkDxlHTToXAbv/fHtQNMFYmOwTwT/HM75
Dqr3bn2Xus3av7PXGduCYo846IewTUmXF1emQWeOO9y5p/46kkY/B5VsEw7y
kfqLlkd7DwO6IOVSbJ+Gg7GOPd7YWtgeheIQkg5sEvpNfMgK2chRdC/myMxH
+DxxSNgn5Y9XXep3k9RFhzt3t9D4w/7PXr16FS3XqP2Cg/gs3Bs/Xu6RV1hX
wpcZLbUcvhpR6nkl7NFi9S6NOgdZ1btK1Dl+g7E3zjm0lUD1LZ/9XNhxJipp
z7GztOvCzu+y0DJEPKj36Mj4aWKL0dewZhAlrpOLf4wvdlBZujNGqZPUB38/
Qj2mb8A3iL7C/z79OPWEPn3JkiXxHtQD7c/F7qFP8e/JcTFLiCdKukudnePW
t4PsfPLR7QXBzgzjB1Hsfo6keY6tTpmjd3K2F3thuNAzsLPoT8kn8j5JjC80
fuY4nCdC3+9PB30DfiWUA35h9I9Bv1coT9AlKCfm3Jzn5wU7Hw0GrYU5Fn2t
q0toNWnkQ5TyTZpWiFruQfoD82nqN+stbm4dB77LOMTveDUub2wvngsbnrPM
XBztJDpr0vIK07a8uP2c+C/TNxaLU5ekH0vanqPAOM7cl72J+BT47WTuzf5F
NA+0sVJryM5/h/6UZ+e7aeF8pIgF6u5LuTqdxF+/8z4Wofmw14P+jvjE/ryn
vbAGyv4zr1ZFW8O3ElsSm9b/3NR9xjTsTPbSub2+9KfsKcDvy78HhnzkeWlP
3j4GnK3HPmb6Lb89TLpZp6Ue+etIGv0cVLJNONz8jLj/3LPQ2Mfr/B59Df6N
aFk8a6k0sC5N+WBrsRZPHQjam8ReVHQsfE3pq/0+tS4NjD2UE9o854wEQZoY
Zznbi76MZ6MuBc3Vwvxu3LrocD5nQb7C5AX7q/ltYqUMGTIkMH+i9gsO5mOU
FXPVPOte5SZsPYdK2KOl6l3SOgdZ1TvVOdW3vPZzYfr7OKQ9x87Kros6f6+0
liHCgw3L/JC2S9xM7FTqIHWGeNHsGcfmZi5JfSqkW9LW0S7Zy4BmwXfp26jD
vEc7xs5jvbhnz562fWPzo4Wgz7p2zv2ZT6LnoqkyN+B7tEn+Rf9Hd09zz6w7
h4oz2/z7zd06ttNhCkG6eX58lPBV4vnpi8gzNG3ST7ztUaNG2ZhGPB/rrayL
EwPF32cVu5+bd6SV5/heEY+c+MaUuztniv6PeBLsRzvppJNsn4k/btw5hZvH
0ReQHnQE+kTyhvRwf8qcPRf8/oknnmg1dfKHPqdUnrA3hv6IvGA/D6+TD9wf
XYQ+hvnArrvuas8dpKzxHXbrL3HzgbRFLd8kaY1T7scee6xdI+J13nf3YJ0I
32kuxiZeixPLjXJk3kbcBtJFf7Js2TIb54cYT/yf9Tr2abD2RLtOoqEmKa8w
bSsIyuayyy6zv4E+UCwGQZx+LK32HAVsJjRPzmJkfxs6BPWVdPIv9ZTYC2ia
xGIoVWakgXxt2LCh1TfTjJ9KGeL3gH2JFsS9GbOwo7wxqaplLOJ38IenP6Td
kPfu/uQ9v0d/wuteeAb6AtLFWjS2OJ/n4hnJf+xCbD6vPcX4hX8Ze4t5Vtos
z8j9yFt+izPYabdenO5FH8GeBHw03RkSlAE2O2sZrHf760jSPjmLNuEgjbQJ
7kldLtQ3YD/x+zwfuiK6OFo8z849gsqd7/CsjHH4W9F/4WuHfYyt5f0edZy5
EP0bfR11zuUx5UffSoxg5lz0fZQx6aVMuZe7yEd+k3pAWfFZ5pOUWZBfSLHf
dcSti948Zl2E+RDxq6hPrn6wrkG7xnfF+cQx93NjmCNsv+CH+ofvBL/NGFWr
hKnnlbRHS9W7pHXOPXMW9U51TvUtr/1cmP4+LmnMsbOy6+LM7+L8jqgcaKfo
kdRJbDb+RXdwF/+nvfAe+mrQmT+UOfNbdFDWLd1Z3fzNHlfqKRoHfgB8hvrK
PfmXuB/MIf0+9szRsYNZCyZ2EPWDPpL4MYX2A8QFHxR8Etnf4e+DmSuz9oxu
QF9UCPRCntf7/Dwr7Q7bnrXsoPzhNZ7LP9codj/aSVp5zn3oEzhTDBsYX1js
b9YVmIuhgfJ5+kH8ktknU+j81rDwffpXfEg4w515D2MGfTlzqgEDBtjf23TT
Ta1+QewT0lgqT4C9I/ShPAd+s6y/c2YI9YfxxZ31xzyOuTz1GV0yST64s1Ki
lG/ctNK/xy13/o+Gwe8Sd9F/D/5Pmy829hSDcYV5G79B/WKM5rn4P+0HvQv7
IY2YcUnKK0w9KgTzcdb9GG/DELYfK0cfGgZ0aOJL0Qdij7AXmbaJnkg6GRvY
SxpmT7ZjxowZtj8tFC8oCayxYR9iZ6KhkkbKgjYI1TgWkff0cYyvtBf0Z/pF
rkJ7O7DFaMeki/pOfuPTjz8tdjN+lv41KsYx1pzpZ0g/7RObnTVe7Hn6mkWL
Fv3ot7zxvbCxiVNLf02/jU6G72OxOpKkT86iTThIF2fmsU+TfRNBkEb0fjRB
l0b83pirUS5oSkH5QT6QZtLrbC++517z+mthg2Cn0T+xZk9aXB+K7U2fjY8X
6+XuYtxkbsAciXtybb311vaiHpNnlCXziEIU+10vceqiFzQ5xk+3N5pyZX2B
NVfmCoxH9OPoiejpzGn85VqqXwjCxfRgDxPzmVolTD2vlD0KYepd0joHWdQ7
1TnVt7z2c2H7+zgknWNnadfFnd9F/R0hHKxJM1+lfqD1lwPaFPaf/wwOB/0V
Wnge98onhXVi5j+syTOeBJ0RRH/OGSz4hGBTMzdOY+83Ojn72umP3H5v1jB4
jXGAvfVo+VF/izGK/W7o/ugw9Pve56KfpS5561NW+RAnrXmHZ6LNsL7FGM16
U9LzQP1kVV5u3SdqnJVK9GNpQP6wZsk+KGyVOOeh44PP2myhOFJJoR9evHix
tZH4jXLFJPRT7jKkbrEfAi0oSv0iXfSZnLXA+mOhNVru6XQO2iN7UtEo0Tvx
Pyr0PX9ce/I/ah2pxn7OxZrEtg1a78sC1oWIm18olkvWvxu2Lgbh6gftGluM
73LR19OPc19ep+4G3Tdqv4Ct4c7URHdOM5ZzNZHHeu4IU++S1DmoZL1TnVN9
q4Z+Lu1xJs9z7ErZ5tUyBxCirsM6BT4dxc6ccDDPwaeGdQj66LqE8iFdGK/x
RYjrO1YKlVf24N+HduG1u7DV8KVn/U3UDcKc51gXcfF48cUiflkewIcSX8y0
9p/k/XfLCXMsfC2IO8Pae62Sx3ruqGv1TnVO9a3SxKlzdTEfhBAC3w72UxA3
MkwMQ9YWiJdEfJikex3zhPIhfVi/YewsFncgLiqv7EHrIn4Re6Xw43b2EeuY
7JuLeg6wyC+1qnu5MxqYn3HmQ9bgD8i5L5X2kcjqd8sNmj2xFYinUKt7ziBv
9dxRF+ud6pzqW6WJWufqaj4IIQQQb5D95sTkxR+2kL7PmgExmNnbTtyZoH1l
1YzyIV1cDLFy7V9XeWUL+9x+85vf2BioxHpyZ3egdRIzqlJ7D0V5oV3hW8me
FOIxomvWyhqwO4cKzY86neVzs0+EMyLZexLmHOhq/91KwL5fzv0iDkwYv+G6
Sp7quaOu1jvVOdW3ShOlztXlfBBCCEAzuOGGG6wuwFjEPjBeYw7LniXGKPaj
c2YX554Tc564W3UN5UO6EB+TsyLTiovpR+WVLZwtRCxzbFf2shKrjzhr2LE6
k7n6YS5CmRLnnvi2nGHUqlUrG8Odsk87Xl9e4Qx7zmPi3EV8WLOCuCjELya2
byXniVn9brnhWTjni3POGBvee++9rJOUKXmp5466WO9U5/4P1bfKELXO1dV8
EEIIL+wbI/Y455Nwlgd7wjhrlzMs8JFhLz6xkdjvEjWedzWhfEgP/LGYI5cT
lVe24PuD9kVeEzeCNcVa2gdXl+EMI86laNmypT2HkbOImKdwzhPnN3KOai2A
lk4+7LvvvlbTRQvMwpeRGMrs6eb3a+F3ywlxCYmhjJ5L3EfWaGqdvNRzR12r
d6pzq6P6Vn7i1Lm6mA9CCFEMtAQ0f+avxAPn3K1i+8jqKsqHZDBvrqTWpPLK
Bvzr8AkihlpdPO9WCPoR9mwffvjhZuTIkba+i+qEPoq996yVDBw40Dz77LPa
k/3/UT0vD6pzwai+lQ/VOSGEEEIIIUQc2COCH+vTTz+ddVJETFiLmTZtmi1D
xXoMRvU8XVTniqP6lj6qc0IIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEPniv//9rz1H4quvvqro
b/G3SI7KTwghhBBCCJEEZ+frfEEhRF6hn/r222/Nl19+afuq77//PvR3P/74
Y3PnnXeaW2+91XzzzTehf4/f+uKLLyLpH6Rt0qRJ5vrrrzerVq0K/b1aIG4Z
xim/uKj8RNpQ76nr//nPfyL1WyI55cp77uvuWRf1cW++VdPzkWbGCMYY/q2m
tFcTWeVztdbLIDQuVD9ZjwN1qT1UCvKJOcW9995rxo8fb/OuUr+rshJChIG+
4qOPPjKPP/64GT16tO2r3nzzTauhlOLf//63ueWWW8xZZ51lli5dGvo3P/jg
A3PppZfa79FHRmHJkiXmoosuMldccYX9fRG/DAuVH/oU5fKvf/0r1IWG9dln
n1k/rlI2pspPpAHzQerdihUrzMKFC83s2bPN8uXLs05WTVCOvMdWZR2EseHt
t9+293zttdfsa3UFdAyejz5wzpw5Zv78+eaTTz7JOlmhoMz/8Y9/mPvuu8+M
GTPGTJw40fzzn/8MZSeI8GSRz9VcL/1oXKhu8jAOYMd++OGH1iaeO3eumTdv
ntZpQ8K84eqrrzannnqq7ccczAvoZz799NPEF3XB6Wl1qe8SQlQG+oszzjjD
HHXUUWby5MnW1urTp4957LHHin7vu+++M3/5y1/MaaedZp599tlIv/n000+b
Tp06mf3228888cQTkdM8a9Ysc/LJJ5tx48bJ7jbxyrBY+T3wwAOmffv2Zpdd
djHNmzc3W265pdliiy1Ms2bNTMuWLc2uu+76w9W6dWvTuXNn86tf/cqOd9gI
pfYx1lr5kR/okthO5Hu1kOd004cceuihZuONNzbrrLOO2WabbawfYd7Icx7G
pRx5j25+5ZVX2n6mXr16Zo011jDdu3c3b731VkqpzhbsfnxqmzRpYurXr2/W
XHNN87Of/cy8+OKLWSetJKxPsH5/8MEHm1NOOcX67Pbt29fsu+++Je0EEZ4s
8rma62UQUfqmutg3Vzt5GAduv/12s/XWW5sNNtjAtocDDzww8hynFqE93XHH
Heb44483Tz755GrvLVu2zPo60LcddthhpmvXrna+cswxx9irW7du9nXep/3y
vnuPz/F+ly5dzCGHHGKGDh1qFixYULV9V632O9X+3NWefvE/KMerrrrKtGnT
xvb1Tz31lNl///2tzoGGUQj6G/qWwYMHW5siil8p373xxhvNJptsYho3bmwu
v/zyyH7oaP1333236dmzp5k6dWpN+7XGKcNS5YcWxZrJokWLzDnnnGM23HBD
s95669nPv//++9Y2+fzzz+21cuVK89xzz5kzzzzT2pgtWrSwZcrnCpVLLZUf
5XPbbbfZfDnyyCNzPyY78p5uxh3GIPwh9t5771zqXuXOQ/IA38xK7SXw/m7a
ee/W+VkjHjZsmJ3zVJPuFaYsqA/4EODv+tOf/rQqbHTGCtZS2rVrZwYNGmTX
86dNm2b22Wcfs/nmm1u/XZGccuVzXa2XhQjbN+V9fKtV8jAOuPaATsMcRbpX
aei/sOVZb7/55pt/ZNPji0U5oiWSn/Rn999/v5k+fbqdP1xzzTWmbdu2Vuek
Tf7hD3+weY6Ojf4/duxYc/TRR1s9G38J+kaotr6rkv1OVvZhENXe31Z7+sX/
8be//c384he/MAcddJDte+iH8PFBb0c/KQR+46effro58cQTrb4RBXR/1jLX
Xntt28exNvDee+9FTjv3wZd24MCB1ie5VolThlHKj/vR1jfbbDO7DlcI+gXW
Xpo2bWrHn/POO8/qY4WolfLDF+93v/udWWuttWzeXHvttVknKRTVku7Fixeb
AQMG5FL3Kncevvrqq9Y/hDzIgnLl/Z///Gez7bbbVpXuFaUs8N3Bxs+7jQ6M
zYwVjCn33HOPfY15xsUXX2x+85vfmBdeeCHjFNYNypXPdbVelqJU31Qt41st
k/U4gI6DdirdqzTvvvuuXftmTsG+Qz/PP/+89dvC5ic2ih/isrBnhDkhPl98
3g/+sKzl8z5amJdq6bsq2e9kbR96qfb+ttrTL/4P4kDhz9u7d2+rQ6BTvP76
67aMC4GOT5+D5onOERX8X/Hdb9WqlfVLZVx59NFHY6Uf+xB9h3/rss9QMaKW
YdTyQ/fafvvt7ZozscOKQTwGdCzGLvZATpgwoejna6H88J2jjHbffXfr34ZO
WQ1US7qpc8wL86h7lTsPscsvueQSG/8kC8qV98Q22m677apK94pSFsRh3Guv
vXJvowPxbSiHjh07Fl0LE8koVz7X1XpZilJ9U7WMb7VM1uMAcxX2GEv3Kg6+
Xtj66FH4egWBXxea1yOPPBL4PuV7wgkn2LkDexkL6fyvvPKK1dfuuuuu1V6v
lr6rkv1O1vahl2rvb6s9/eJ/EP8TX9N1113XxngKu1+V/W8XXHCBOe6441aL
WxgGfoM9jvRb7IVr0KCB2XTTTe2aZpwzd2jPaGj9+/e3++1qjThlGLX8ouhe
lCHrMfjyUbb8TjFqqfwom3Kfl1kO8p7uPOtejnLkITox57CyBiXdK1uilkW1
2OgwY8YMG4uT2Cqy9cpHOfK5LtfLUoTtm/I+vtUyWY8D0r3CwXo78XrZh8hZ
EkFMmTLFjBo1quD5Z2F1L/Z/33DDDea6665b7fVq67vK3e/kwT4Motr722pP
f63DeTdDhgwxjRo1shpUWJy/KnGfovrocC4Rfd9NN91k9f8OHTrYfs75KkWF
vXXcj/ugbdcaccowavlF0b24H+PR+uuvb7WvUlpcrZefSE416F7lAJ2Y+K7s
cZbulS1Ry6KabHTiq+CDJN2rvJQjn+tyvSxFrY4LdYmsxwHpXuGg38DXi5hc
heYUlGWxM9zD6l7EqkLP+eMf//ijNNSVvisN8mAfCpEH6JPwyUGLwLZCn99p
p53sGRy8Rp9STAvhu/ixEmuVvicqf/3rX63e8vLLL9sYU6wRsNdxjz32sGcL
xoH46PgeEnuqru6V85KkDOOUXxTdi7WYs846y45dW221lfnTn/5U8v51ufzI
b/xjiS2Jxse/Xr9G//usI7j3KUde45xm7+t5SLcXl07sGc454F++y0W60yxT
fsuliftz77DzGz5L++C7Lp2FniuoXPg+F6/zGhf3K9bWwuah+zyfIV3sVSa2
r3tG/+eoE/hc77jjjvacI85QJS2l2n+UPPCTJO+j4p/vhMl31y+STv51f7v/
F/scV5x6Grcsgmx0l79R2nuS8gzzbNybuR/npHDW1ksvvfTDsxVqN64Ok54o
bcQ9tysf/uZ177pJ2P4yKJZvlLabhDh5EDWfw6ShVL0Mum811MsgovZNUftm
7s/zu7N8+DvKeV6F8pB7uP6e91y5RGkTSdKZ9/YUZxwoRJw6GVb3Ctvmi41R
YcavNMeutKA8OFcLGx5bvhCcEV8sJlJY3avQvaqh76rEfCCuTRLXPo4zbofJ
zyjjaJI+Mwx5nQ+JcDCXeuONN8ysWbOsJrHbbrvZi71pxEQnxkRQzEEH/kXs
0XYx1KNAudNXjRgxwtZNp8FwPsdGG21k98TF6VvwG+N8D+Ipcr5oXSdJGcYp
v7C6F/0Kcdrat29vz35k/2KYfZR1ufyI9YkfG5ok61Oct4k9DvR/xGDjDC/O
CWEtjDhnxDemfcyfP99qk5xjQ2xKypXXK9FvFku3F/p//NpJJ2t9Z5xxhm3H
nLWDHULMhzTOLKBuUafJA2Ld4i9K+tDOaQultBf6FTRZfB3pg1gHQ5/FTuM8
bK/fMr9FvX3ooYfMLbfcYi677DL7HOQJF7Yw9+C3+Bs/VfIhbh5SnoyT5CPl
f+6551rf9AsvvNDGaiX/3JyDf7nHmDFj7Pmt2Ij4iGDj0J65Zs+eHbhnOEoe
pJn3cXDzHc4wZ62SvKSf4Dcok5kzZ9q+zJvv9IucP8u5UbQdbD3ygnggpNWB
HUIMXV7/+9//bj/Pb5A3UUhSFl4bnfIg7aSB73KuVZj2Hrc8w0L+unO2mNPQ
r9NP8Rq/6Y0fSRpJK3WYtnL++efbvoB08XnO1/PPm73tDDsAv1/+xlakvOgX
qWvMNymzMP2la2vcj/IlX91cmTpE3CziLLBP5oknnjDvvPNOaueRx8mDqPkc
hrD1krbrpxrqpZe4fVOUvplnpY/g+bGd8GF3thb1spReRl6wPslvoQ+Qh8Rf
xdZhbk8/TzxvzqOj7kRpE0nSmff2BHHGgSDi1slSulfUNk85oO9QHxh7GKP4
m3LjfCmeD58A6jPvEZfcO34Ro4T0+seuLO1m0sY57507d7blUYhPP/206Nwy
iu6FTuwfr6uh7yr3fCCuTRLXPg7bR4Xtb10+RGlTcdKTZrl5qdR8SESDvnT4
8OHm5z//uWndurWNC4VfDv0MrzHfIs5EIWgDvXr1svvkCu3jLgT9GnG8xo0b
98NrzzzzjDnggANs++zRo0escyewIdBYWCdlzKjrJCnDOOXn1b1o827dwF1O
k0eHO/bYY228NmKHhd2rUZfLj77yiCOOsOcOsO/Taz8x1rBuxR7PLbfc0p4T
gk8y79NG0IfRPbAn0QR32GEHq8HE7bvTSrcDu4LYoqQNvdOtV6MDUU+oM9QH
tIgkcF/sT+oUZyAw7vN/xmTOOR85cqStP4W0F9LEHIiz0vDF53vYEvhUnHTS
SdZew75AewLyl/ENe5c6jz8qZ0Cwf5dnxUeV8uH/pAf7gt/F9vTaIGHykM8z
jnMv5rucP0Y7YrxmzZI6QHvGVnF2EXWAds7voi+TRvpQXuPimagzSfIgrbyP
i5vv8DzYO8SDxJZjnkWbYZ5IfnIuB3MB8oY99NhInKex4YYb2jGFM9Oxhb2+
rdhI5Gm9evXMOuusY/eIs88+6nl5ccsCnI1On/3www9bew07M2x7j1ueUSBd
1Ht8gzmfl4u/eS7GD9oI0I8xZ6N8eI80oytiK2J//vKXv7TxG5nDMV928FzY
j5xr07hxY9vOfv3rX9v6hRbAhU3AeW60jzj9JTYw9jz2Mnoy92FspK7S3mif
aZxHGTcPouRzWMLWy0svvfRH362GeulI0jeF6ZuBusPaIvNx8oC+Gp0F33Tq
Ib9Dv1PIB4G56m9/+1ub93yHusBcyJUF/Rp2EjYWz0D9idImkqQzz+3JEWcc
8JOkThbTveK0eWwhzjnnzFbaJWMU9vLhhx9u2xvP1K5dO9OwYUNb9oxj1AXX
B2AHUN/r169v6y3vs98jyzN1sVNIP/OKqBq9lyi6VxDV0HeVez4QxyaJYx9H
7aPC9rdx2lSc9KRZbo5KzYdEfKhfjJO0C8blsHNpxjv6Feqfdw09DMQ1pB9i
jcLhzu6mrqLhMP5HhXaCLYGtyD7KpFBXqcOsTyS9yumfE6cM45Sf072wx1lH
ZDxyF7olaw+nnHKK2XPPPW1cXtbhgs4xLkQtlB952KJFi4L9PesA2OfEdmFt
ij7eu4bJGIRtwZgYNI8uF8XSzbiCnRK0X5a6yJjFvCNJP899WE/eeeedrVbh
r7OM8/Qpm222WeD8hrJDJ8Ymww7ArvCCzs75o7yHje2fF2BPY4NS9xk7icHj
BQ2F7zPeYpMHreUUy0PW3bCD0a3Z/+1tw/xN3qLjDBo06EftmzW8Jk2alIzf
EDcPkuZ9Etx8B02KtWRsHy9ojNQvPsMaAPM8B2vK5OlPfvKTgnnDuEOfwxyD
s22D/HCiELYsHM5Gx8+V+SO+KmHbe5I6HQcXd4q+3V//AbuOMRy7k+fw+5Ww
vsL8FPuZZ/G/T95TzzbZZBPTtWtX2+bIH77Xr18/O7ejjL16Udj+kjGJuTpj
lLdc+E1sa/zMWdtOqsMkzQMolc9xqKv1Mq2+Kcy4TJnhe+HtY7AL8KWif+KZ
gnw60Zl4D19877nW2BX4dtHn8y/5y2fxCXDrvlHbRJJ0uu/nqT05kowDkLRO
FtO9krR5fHWYAzOHZh3Nm1/kOxou+2Cw0/Gh88Iznn322dYuwC8orbyOCzY7
9YLySeIPlZbulfe+CyoxHwjT9yd57jjjdqnnTtKm4qQnKlnPh0Qy6DvRj6kL
6KFh4QxafPHxS4jiW0vfjEbz+9///kc+yWi1zBtZm2fuF9VPmnTwPcYBxuOk
YDNhP7AvOslFf4NfezHf3iTEKcM45ed0L36H9WfsKO/F3kdsHWIwHH/88XbM
xq+Mcg4zPtRC+WHTsh5aqL93tsMWW2xh/WL9+gnjD+sI9OmcS1wpiqWbcQUb
gzILmsex5kFa4/bz3JN7oE0U8wXEBmAtJmh+gz88fg3kG+Mp8wA/jK/YzeSv
3252dnfbtm2tPhKEO4etefPmdtz1ayiF8pDPYd8wjgY9H2twjPH4JKG5+eP6
hp3TxsmDNPI+CS7fmXMUOu/C2cnkH2u73nx3NjBtirVfP9gh+L7jD5FG3I64
+gJ9KmUSpb0nrdNRKabHMM8hHyl/bMpCY/eDDz5oWrZsaeuzfx4HEydOtO2H
NVn8OtyZSfh10Afj5+AlbH+JTx9pZ97gh36radOmiePIp5UHedK98lwv0+yb
io1vlCvr9GgTQf2/26vAe/76hd2Djw66G3v0/HoNsWypC3yf+wQRtk0kSacj
T+3JS9JxIGmdLKR7JW3z1GFsBXRC/LfQPb2wX5DfDIrRzneZW2PzV8L3vxTu
GZkDJCEt3SvPfZejEvOBMH1/0ueOOm6X6m+TjqNR0xOVLOdDIjlubxn1Gf+c
sNCWWKfCvyeKPkW7w+88KO4he4rx8aa/w2c3KO5EMWir7J9Ma+5F22ZPMOta
1NO4F99HZ8L3qBzEKcM45Rc2vhflgK2H/y0aFmnC97wUtVB+peJEuDGbPAjy
xXXnBbCnlTGhUhRLN3o1dYk6yJoRYyj6trM70T7xyy60xlwKF5eYZyZWSaF1
TfoW9qkF1R8XOw7/ZNbNgnA+kEHzTWd3F7PlqeP4F+GXzjoTe1u8FMpDp2vh
l8Q+FP9YSXwC2hBzFtbS/WupYee0cfIgjbxPQph8p/8iXzg7Fp2a+uZwcQxZ
S2FtwJ93zJVpZ0ntIEdcfSFOe09ap6NSTI9x2gJ9Pv1BIfBvYF2E/iIoza68
WZPxrzkHETb/sCmYVwbFT6Bv4jwdng27OC5p5UGedK8818s0+6ZS4zJ1kX0I
rDuwt8YL/XzPnj3tPAu9xYs7p5p9DPTx/jGQZycPOI+IvTFBRGkTcdPpyFN7
8pJ0HEhaJwvVjzTavFsvC9rnwvya323WrJktD+/6MfsjmGOz9ywP0McwP8DH
Kglp6V557rsclZgPhOn707KPw47bxZ47jTYVNT1RyXI+JJLj1hPQLqPsLaO/
Rf+gzYWFPpv1IeYhrD3hP+O9WAvD15f+Dh03qs8P80X0GPZE439UK8Qpwzjl
F+U8R3y88OtjzQXNnX6plF9pLZRf2HGukF8ReyPQVljTZT9dpSiWbsZD9Gr8
kagb+AJS9sRcpV2H9fcrBLYz55tRj4ibW4hi8xvmFKyZsdcEO4CxyH+hgTBf
CPLzDmN3g1vbx4blO14K5SHr1/hzs4cD/8SohJ3TxsmDNPI+CWHznbU/ziwK
mjswL8AOoY56fUKcnx3rf2nFYI6rL8Rp70nrdFSK6THkI3UE27nY/mtvPAP2
w/i1ClfexBchvl0pwuYfNgUxAILWLmh/+AyVSnsp0sqDPOleea6XafZNYeKW
U3fwq3FnJZIHrHWgL/Xp08fmr//camwefEkZG/GBp+y9uPkm64PePZBeorSJ
uOl05Kk9eUk6DiStk4XqRxpt3r3H2gz7YJydzL+klbgf+M+xz8y7fswcinJk
3TsPoKXSxpLuQ0hL98pz3+WoxHwgTN+fln0cdtwu9txptKmo6YlKlvMhkRzq
L7oq/glok2Fhfke9irI3kjHy8ssvt/NCfJH5Xf+F5oF2zZpN1D241CXWe0gX
fpK1QpwyjFN+UXQvYLxi/wHjV6kzXqAWyi/sOFeoz3fjHD5FxCWqFMXSjX3N
HjJ0V2w32i9jEf0+4zX2EP193L4e/2rGQWK4FDsfu9D8hvRRX7EN6F9YC8Zm
91+sxzPfJF4C/n1ewtrd6PqkM0i7LZSH6DKss9EnokdHJYxdEzcPkuZ9UsLm
O77j1DWejT7EC30i9hp5RJk4fzr2lOBHx3fTIkkcpSjtPY06HZVCegz5yZ52
/BVL9fP0A8ztnL+If1+PK2+/v0Yh0ugv3TydGCn4V8QhzTzIk+6V53qZZt9U
alwGfEXxIWe/GVo56/mcQ4BvAnZRUN8Dzj7jWb1+pYyHvEf6id1cyOc0apuI
m07IS3vyk2QcSKNOBtWPNNs89jgxXrxljB8AthNrYbRbb3/AM9Gm0VSTxqRM
C/aT0ccwx0tCmvG98tp3OSoxHyjV96dpH4ftowo9d1ptKmp6opLlfEgkg3xn
naxBgwb23IMo8YuYqzFPi+IvxHm7nOmJHxdjc9BFH8cYTV0O2itUDPRe1ho4
I4W2nhTqL3uM8CVNepU65zouccswTvlF1b2WLl1q+0vKEj/tUlpWLZRfXdS9
qINclDe+2LRfxhzisaJfuzgLceOjoU1wL9ai2LdfiELzG1evGHvC6K9BhLW7
8bdkjwfxOtjP7aVQHvJ8fJ56H2fPQiG7hvqPHxNlEzcPkuZ9UsLmu5trBeU7
4wp6FzFpSCOxr8kTzldhbpQ0RoeXMGXhJW57T6NOR6WQHsN6FvvTSUsx3QDo
S4nFzJiA/ezfi+XKm/0L/jh2QeRlnp5mHlRS96JeBq0/V0O9TLNvKjW+8bxo
VLyPTsWzUz9Zl3Xz9EJ6EvtZmJ9hb9EPYZPgh0VMGuoB/T62UaF5UNg2kTSd
kJf25CfJOJBGnQyqH2m2+f/H3nmAW1VcfzuJdANBiAgJEltQ0SQosRuNKDY0
sWAFG6AoigpWEBURVASMJYqav2JHVKKIUgQjSC8XYq+JRIkkEER69Vuf7+hc
N8fTdjn3nHvv732eeeC2s2dPn9+stQaNknfD35WYXdQl2gL1hD8v74LNMutu
v9Zi/5wpTlsxIE4ZbYs9XhyKpXsVY04tpu7l1ySMRUmtj/OdtzO9d1J9Kmx+
wlLM/ZCIB7aLxMrjHkDm5TD6I+0KDYT6ywc+G90EnYW7zzKBHS930NOPsVdO
dydCJryvc7a4nWHgvIX3w+cyTsKGHds1/PGTJmodhq0/CKt7+fsZGZe4By/d
felBqkP9VUXdi/sIUuNtMn/hp49PM+s19iacz0fB+y7kGg+y7W+woyJmZ7a4
uNnId93NO6Lxpou1l6kM/ftRTpx1hSXTuoa4YTyHMQKilEESZR+HfMudOH57
7rlnxhiH3ieK36GOmGc4Y+de8CTJty48cfp73DYdlmx6DPt2zl4oY9p5JtAA
8MdgTsDnivhrQSqr7gVJlUFF6l60S84hK2O7THJsyja/oVMxLrOnp04oj+A6
K52e5PeUwFyIPRp7eOzfieGIbQz2E+zX8OtJF0fak2+fiJtPKKX+FCTuPBC3
TWZqH0n1eda+3OnEOp5YdXyN75lvr/i4oYnRZliHUq7UIXvrUsHHNQpzlp6O
YuleUNFzajF1r+CaJKn1cVzdC5LoU8XUvQq9HxLx8HdBZItllwns+Jhfunfv
/r17GdNB38LmmrOAXHYznN2xd8TWEd0i3/t5OT8jTntS8y3rCGzPWV/FScxZ
aNFx7k3NRNQ6DFt/EFb38utNxqV8bLiqQ/1VlO5FH0vSvjBbvrlDG+013fNY
z7MWZw7irvYo4C+Pn76PS5JJ2822v+HslJgfuWJl8tne9jRIPutu3p/nMmfT
hlPXD5nK0McLxSaamLCZ3o/Pp6+mi2vPXJq6rqEPkR8fPzNKGSRR9nHIp9zJ
E/tKyiBducOSJUtcXHvO21h70Lc4i+Nu6yTJty48cfp73DYdlmx6jL+XLl1c
uyB+T8Pczr1fqT46lVn3SqoMCqV7ZWqX2IlXxnaZ5NiUbX7z8ReJscQaK/U5
7B+J3RXUkxhXfCxB1g7Y5ixYsMDtzYhpTPvg5/nc95Nvn4ibTyil/hQk7jwQ
t01mah9J9XlA/6SNEhuI8xj2/z42EfV05plnOt8p1u5oYvnEwPW2JxUBa2W0
OfZscZ5ZTN2roufUitK9cq1JklofJ6F7JdGniql7FXo/JOLBeMI8EsW+xv+t
P3/IBXMVsaTyeQ73NHDnM+Mez8j3ri3fDwoVy64UiVqHYesPwuhenCEyj/P7
+I0T2w8/12xUh/qLO88F7wxMN88xL+GTSVliVxl3Xs4n36yh08Ws8LB3Yy2H
TXIUvJ8ImgV+s6m2CR5/v0u6/Q1542/xdct29xd9gXZOPQTx82i6+8SDzyD2
rM9n6l4yUxmiyVA2nPWmi30czBtnROybgni7h9T4fsQ6wa6A86eoZZBE2cfB
lzvr30zl7u3dM5V76mdxjnjRRRe5vXLSvuf51oUnTn+P26bDkk2Pwbb2vPPO
c3a9zPPp9nWMTf5+Mu5ZSremTVr3yjVeQlL79KTKoBC6V7Z2yR1/lbFdJjk2
ZZvfiCNRr169jPXh45gGYzpSr952l/JjX8a/UWIx5dsn4uYTSqk/BYk7D8Rt
k5naR1J9HtBFuceemHWszVlXsZYDzruI5UXs8XPOOcfVdS67HP6W9164cGFB
ztxT8WVEecTx4Sq07lUKY5en0PsByGdNktT6OAndK4k+VUzdq9D7IREPbIKx
t2Mu5K6BMGBfy94h9Y6sILRN2izjL2fraFncX5Nr7kfDxteRcY87l/Ebz+e+
LeYNntGhQ4esvpRViah1mE/9BaEu2XMzlnAvweDBg9P+HnXLmDljxgx3vkAs
vzZt2mTV7T3Vof78mWymtamPy8odPunmVO8LyjzH/JTal7CnRZPEh5w4U5wN
FjrfjPOc83HOkdpPaTfM19ghZ7o7PR/QQWnjhx56qJvvUt+bNsdZL/M75//k
KfXMkXywFkdX5R1SP4O1IXM6NqmsFYP4eZSYKZyHpeqJ/C1nsOi8rNXSxUjI
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
G3HuBcVOSSSH6k8IIYQQQggRh7feesumT5+uuJpCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhKj2
cI/p+vXrXRKiOkIf4G5E7jIp9B2JpYZ/93TfT+Lebj6be8G5G5J/dRd4xRFs
1yp3IUQSMJb4ubKyjitVeWyszusZ0JpDFJpgG1uzZo37d+PGjdWyv5U6ScxX
pThfFHoergrzfCbory+88II9/PDDtmLFimJnR3wNGiR1wbgahLri+5s2bSpS
zqoWlO/y5cvt3//+t7377rtWVlZmn332WbGzVSEwjjFff/zxx/aPf/yjvK3x
/VWrVtlHH31kn3zyiZvLo8Jn8jnPPPOM3XnnnTZy5Ej75z//GeszRW4YJ5Ys
WWILFy60BQsWuDuqv/zyy2JnSwhRSfHzBeMK8wJz5TvvvOO+V5moymNjdV7P
eLTmqD6sW7fOli1btkX64osv3JiUSX/i+/yc3yPRX0j+a8aHbKADsD5+7733
XBu7/fbbrV+/fjZ06FC3j6btrV69Oqf+xc/9fi5u4n3Il/iOpOYr2tjSpUvt
X//6l/3973+3N99807WXYlHoebiqzPP5wN73hhtusEGDBtnKlSuLnZ1qDfM2
4+ddd91l//3vf8u/T/979tln7e677y5qv6tKvPbaa3bkkUfaT37yE6tRo4a1
aNHC7rvvvmJnq0Jgzr3jjjusQYMG9utf/9q1LWAPMHDgQNt6661tn332sZde
einS5zP3P/XUU3b44Ydbjx497K9//at16tTJDjjgABs7dmySryICsJ76v//7
P/vZz35m9erVsx/+8IfWrl07mzVrVrGzlhHGtv/9739uXJOmLyo7VbE9sy4c
MmSINW3a1OrWrWs/+MEP7OSTT7YPP/yw2FnLm8owNsZpO9V5PQOlsOaobH2/
suU3yBNPPGF77rmntWrVynbaaSdr1qyZa/OXX365LVq0KO3fLF682K1vf/Ob
37h1L3//q1/9yn29//7725///OeMz2NvNnfuXLvgggusTZs21rVrV3vsscds
/Pjxblyhre21117u+WgF2bTWTz/91G699VbXVo866ig7/vjj7YQTTrCTTjrJ
pT/84Q/u+/ycPs3P/c/4PX5+9NFH2xFHHGFXXnmlvf3227HLsyqR1Hw1fPhw
a968udsPMV8cdthhNnXq1ALlOjeFnoerwjwfhmnTplm3bt3swQcf1NlIkUBr
nT59utO20JaD32dNw/nVBx98UMQcVi2Y55nzORPcd999q8Q6kXfCXjDX+Q/n
wKwNWR/XqVPHrr76avc3nFcxn/P9+vXr24033hjaxpX9xYsvvuh0s+7du7tz
tFdeecWtK7bbbjt3RiaikU/9spblfOrmm2+2Ro0aFW1vl29eH3roIdt5553t
uOOOK6k9qKhc5Dv2FZKq2p79OTDzw1VXXeXWxKW2Hq5MY2M64radqrieyZdS
WHNUtr5f2fKbCvtU7J2wb0TLoj/XqlXL7dmp71R/GaCdYBc2e/Zs6927t9M0
0L3+9Kc/ORvJdHYfjH08Z8SIEXbggQfaMcccY3/729++Z9PF8zgn/v3vf+/0
kdGjR2e0H8PWlPETPYXfJb+cPb/66qtuL37PPfc4DQ3dgfq56aabnN7CPhA9
lz3iiSee6DTugw46yLV18R1JzVd+vkCj3HbbbYuuexV6Hq4M83yS0Ifp12jW
9KGq5s9ZGeC8atSoUa4egmCD89xzz7mfieTBz69Lly5VYp04f/58d+bJO2WD
vcGYMWOsbdu27qzr+uuvd2dkzN20NeZuzsP69+/v1glh4EytZ8+etvvuu9uT
Tz7pvsfcMWDAAKetz5w5M/L7VXfyrV/gjJu1U7H2dvnkFX+jiy66yH70ox/Z
9ttvn/W8VYhshOkbhaI6tOenn37afvGLX5TcergyjY3pSKrtVKX1TL6Uwpqj
svX9ypbfbDz66KPODqp9+/bufdA7x40bl9XfEL0MPyfWuNn2u/jdoJP//Oc/
t7PPPtv5f2UDTeuUU06xHXfc0fk/4heZyowZM1x+L7vssrTra+wbeBa6FzZf
/H4q7BfR6/g5WphITxLz1YQJE9xZQrF1ryCFnodLdZ5PGuYJ+uGFF17ofFpF
xcJ4yboNv9MgrMsef/zxjLa7Ih7MY6yNqsI6kfGZsy/srPMF20K0Lmyvg3Am
RgyDsGMBn8dY+bvf/c6di4nkCFO/2N//9re/LdreLp+8cmaLvwLa62mnnWbz
5s2rwByKqkSUsS9pqkN7Zk7Ar6jU1sOVaWxMR1JtpyqtZ/KlFNYcla3vV7b8
ZgPdC/2K/RP2UVtttZV17NjRaXuZQI/6y1/+4mynMoENJb6M7P8PPfRQZ2+V
D9h9eV9KxstU/Q27LvbameKIMK6ee+65TvfClzGTbovf5RVXXOHyKNKTxHw1
adIk5y9dSrpXoefhUp3nCwFnJdiA4Ncqm6+KhfkajRWbm+A4SZ/DBqy63s9T
aKrKOpH+yvzPGV6YvR9zOe0r9U7XiRMnunVE2DY3efJkO+SQQ1z8gcq8lio1
wtZvMfd2YfPK+jKdX4IQ+RB17CsUVbk9l+J6uDKNjbmI23aqynomDKW05qhs
fb+y5Tcd9H1s+zijJc48/ln4pfE9fNXSge5FXC58CtPBmEJcb+yy8EfELzLf
ciIuOLFDiBdy+umnf89GDF+LW265xdmapCNf3Qt/3mHDhtm9996bV76qI9K9
SvPzSwnuqTjrrLOsc+fOLlaAqDhYixHDi3n7/fffLx9jsdclBjnfxxZM8deS
paqsE7HHJsblH//4x7z3fqx5nn/+eXefaxA0MGyno5wjoaNx7loKa9CqRNj6
LebeLkpbFCIqam8VRymuhyvT2Fhoqsp6Jgxac1RvvO7FGa2PnYW/I32cOFvp
zm5z6V7E9MJ+FA2NOPZ8ThiwYdhhhx3K48sF7w3wd0Hiq5iOfHUvbCF498GD
B4fKW3VCuldpfn4pgdZCf6SOX3755WJnp1qBvRe2tJwR7L333u5eR2CNhm8x
trvUC/b82WAsRLcgpmLQdoxxl3GW2I38zNuPoaMFf59zDr7P//l+pnte+Hv+
hvmDxP/T/a7/PP88//9U+7V0v0dKtTvka57DOQ7P5Z3IZz52Sb5s+Fvem89K
ep1IPngG+SJ/PIv8prOfDJY/v5cal5e/4WtfF5Rxqu7p70TGZr1ly5burhfu
2+WZJP4+3bP5HvfAoG0F14p8Hl8/8sgjofaQ/B3PY444+OCD3X00+Er6fGS7
WzpKeYVtr7nItz2nI0qb5Hn8vn9v/uXdSP69/DtHqd90e7tMY0NS7xYmr+na
fj73f/u2wjhGDE7fj8MQpx1FreuobSvfdpLuHaOOQ8G24Z+fb5uJmt8oRO0b
wb/Pt4zyyUuu9hynnJOeR6O+e6b1cKbnpnuPqPN3KpVpbMz1HmHHwmCeo6xn
Knocy5ew41aUNUeQJPpVmPrLt9yz5SufPMfNb5JzgiffvUnY/hPUvXg/4nbs
uuuuTvvChzM1dgzk0r2wIWQ/hvaEnk7c+zBwRxnjC39P3LHgXWXkL1s8tXx1
r3w+KxNR+3Ih5vdCjiup8xX5I6+8Q75zXj66VxLvEGZ9G3cezkUS5Zbp3TKN
67nGvOBnpf5OXF84fJ643zVXvD+RLNjaEcuwZs2a7pzAr1kYL4mTyPcZy/FB
TQd1j92r1yywEcNPjc/lnmLGTmyAeQZxGhnHubcBex/u8cTulv/TJrnvj/tx
HnjgAdfPg+cStAn6NOcqzBn4qXN3LzEWuYuE3w22Qfou8w6//9Zbb7l1KfbD
+KbzHA9/RzxHvv/GG2+430d34Z08fC5fE+eRsZ4zXuyPiX+GhpPJDpn+RfxI
ypJzGN4L/ZDnY1uXhO7ly4VypQ8RM7NXr14un5QL9pOpmhbxByhn7K24P5Z5
ODiGcacB5UGe+Rzm9qAezeexzsVOsHXr1m6e5NyTfQDPJFHWnIenQn6Ib8Az
g/VFjNj777/frSXC9H/ihPq7aIhtsN9++7n7gvge9ZUaayFseVGHUdprLsK2
51SitEnGf96bMuauHt6buzO5U4Q9GeWBzX6c+g3u7cgb/ZD+xN/ynowN9Afe
PZt2ku+7hc3r559/7vogYxXnlYxrmWLGkj/mScoMX/y+ffs6nybGM2JU+7LK
hzjtKGxdx21b+baTdM+MMg7RXzn3oowZB/gcxmyeTxyUXG0mSn6jEqdvhC2j
fMjVnuOWc5x5lLbp59G4755pvc0ag+eQJ/LG//k3GJc06vydjso0NuYizFgI
cdczFT2O5UOUdhl2zZGOJPpVvvUXptx5Hv2L9TzPI1/8n+f+5z//cc+cM2eO
awP8jHsdgnlm7chnpq6n6aeFHqtSCbs3CXtvfVD38u+OrRb+idzzyBxEPQfJ
pnvxHpRJkyZN3LhCzOvUv8+Fv1+Cv2/VqpV7Xw+2ZNnuiwqje6GPBPdIuYjT
l5Oe3ytiXPHz1UknneTaP22f+GqMjex/Xn/9dTeOpMZ5CZJN90riHaKsb+PM
wxVVbsHyyWdcp0/yLownfixmzGBsY+wBtDfGJj+u+d9hTZ8rL9mYMmWK07nx
dQx7l5uIDmsZ/L7xJ+cOUd+WqUs0/eOPP971h0zzKe2E8Zm6Q0NhL0f74mvO
G4h/SPvgvtwjjzzSrRcZ27Elwxf+hz/8oatz+jj9jYTeRkzHoP84Y+xdd93l
xmX6JO2W9s8zueeXvP/zn/8snwP5P219jz32sPr167uxnPmIdSfjp4d2S1/H
rhibt5/+9Kd2xhlnlI/59A3WdNzbwx0mrBXoC5zvnX/++e4OQsaMVH9++hzv
dOqpp7r3Zq7ma/6evKLvco9pHN2L8mctQplS1rfddpubuxkrqIczzzzTzjvv
PNd/vb0Wf0O9cg/xz372M3c2xf+Jq+VhrCBOAPMm5cLvUKce+j/P4pms/WvX
ru3sqn2dkyib4Gd6OOfmjlDm4CCcU5GvsPM8duDch81dOqw1SPyfPNCmWe/E
KS/mjyjtNRdh23OQKG2ScsXGrmvXrk7D9LaX3CvAGnSXXXaxDh06uLV4nPr1
ezvWTdQNGg9rbN6R3+f5v/zlL93np9MJw75b2Lyy7j722GPdXeLYsmY6S6Pc
qRPqlH0Na0naKOt72vA111zjxg3m+Xx02qjtKEpdx2lbYdqJJ844RH6aNWvm
xhjOt6kL9HjKN582EyW/cYjaN6KUUT7kas9xy5l2wl6DWMk//vGP3TzKv/vs
s8/35lHWAX4eZRxmbUyfSeLdM623+XzmV96LM7qGDRu6OZ/4MxB1/s5EZRob
c5HvWAhx1zMVPY7lQ9R2GWbNkYkk+lU+9Re23BknuWebOypp2+Rrm222sWOO
Oca9N2MJeWzcuLGbw1hbM6f5d2Y+pI3Uq1fP5Ymfn3jiiW49XeixKrVuw+5N
2FeHIVX3Ap7J/oH3Y3zgs4M/z6Z7MZehv1HmqWvufPF3jPIZjIXkL1/C6F5h
idqXCzG/F3pcAT9f0c7QWmhrjDP4V9HG0Vpp/7QF9NJ0z8qme8V9h6jr26jz
cEWWW9hxnZ+hceDvxljHO5C4e5n+C2hSPoYffRstgXGMMwSvjUWB8Z06xGYY
TU2UPvSrCy64wH71q185TdWDpuHv4OVfNDR+F33e3/fN2IV9D/0DbY12zLoQ
zeWcc85x8yXai19v8PnM0ZwBBWPAMQ6icaNXkZfUc1baK/N4rVq1MsbhoN0y
xzCfE1/K68D0KXRdYkQyh9HvgvAuPJOf0V99H2Qe5t122203N3YEz++AtTPr
Xc514uhejP3Mcaw7OH9N1fcpS8YJyo21Qqr9PPMJ2leq7uVB6+T9ss3BnFXz
GcWOcfPat7E2iDP7Wob7b+KUV9j2mouo7Tlqm2QOZXwNrqk9tFfmBvYtqeuH
sPXr93a0KeYSyjl4HsJ6mzU0c3Nqm4v6blHyynzGHUyZ9nqUO+MGY9h11123
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
EQ9bXlHbay6SaM9h2iRrdGz7eA6/w1qNcZlzGeYGnvXxxx+nzWuu+mUsILZk
ujLCz542RX6ws+R3WFNRT/zLGMH6PrVNRelv+eSVtR35CuaTPLF2Trf2f++9
91y/5NyZeuKciL5MynZfTCpx21GY8ojTtqK2k7D9Kqk2EyW/rNGwJ6DOsXPn
fC9qzJcwY1/csTodudpzIfqmh3U061zeNxdR3j1dn0Fj4P/Ev+H92Jf5+Ma0
Z/9uPIM9oCfqeJKLyjQ2phJ2LExiPVNR41i+RGmXYdccYcm3X4Wpv7hthnmQ
sqG8U/dnjKeMw+wZs90/WFFjVdS9ST54X0LqOlj3jD/4K+WydaPNMj/RrvKB
9kl7os4oAzRl2h92TujraAB8H/uUYIzBfGAOxA4QPRObKv5FY/GJr3k/fsb6
h/4Vlah9Oc66Nem8hIFzAmJn0W/QnfAVZ+xEi+U9KHf8cNPFuUjXT/g/Oo6P
4Z7UO+Szvk1yHi5kuQUJM65PmTLFvYd/Nz/eUKYexhXKh77vxx1+l3LDFtE/
E9tUPouxAN+yXHmkD1Ov6Oii9MFf3d91QLtP16doV7QptFvsMmnDcTRN2gn6
Kmc92EfT9oPPZf5F+yZlAztJHyspLJw3MEcy/+Z6jgedmVhZ9B0fF4FzG76H
toRPMvNlXL2Xz+YziYfKeWQYGwZfrqxbsNv2sfmoZ+qQz+X73iY0FTTzf/zj
H+7vKddCxVRIkjjllQRJted82iRnepwhAXXImIz+y9zCmV+udy9W/Ubpb4XI
K+dNrCtZU+R7Z3YhyLc8oratuO3E57Gi+lXc/LJfx18lThzCKO2t2GNPEvgz
4LD9oZjvHmU8yUVlGhuTIIn1TKHHsSiUSp+M2q/yIWqbQUtinM10xyznp9gM
hbk/sFAUY29SaLDPYW5jj41/J/tq9AHO7hl7KsP8EaUvJ7EeSSovcaBtYVs0
Y8YMp+lEtZ0LkuQ7lMr6NpUkyq1UxvVUqDv0RWxosRcVpQ96KdprtntiPLRZ
zluwFWJOqiiYKxgHgutQxk7iUebyrxdCCFG1Yd/AWWKprIWEEEJEpzLsTYQQ
1Rt8zLGdxi6vFM4LRHbQYLFxJ+ZePjGBOQPFlx4f7XztiePi/Y2xI8TG2+9r
0MaxkU3qrhIhhBCVD844iZ8Sx39DCCFEaVAZ9iZCiOoN9jeMU9h6ZfMNF6UF
cS6JCUVcPWzcM52Xo2MSLw4fW2z6wvpJRwXbSHzeiTFHDAqeyz6H8338wyuD
H54QQojkwW+Hu5DwcYxzN6sQQojSodT3JkKI6gvjEfY3xAPF10BaROWB+WTY
sGFuziAWHjbCfA9tCS0Tn1r8V1988UV3LzMxT4n7UFFw1wfx74ixR2x2YlLg
64/mFfa+ciGEEFUH4tQQN5o4sfJxFEKIqkGp702EENUX7o7kLiXsTOVbXfnA
pph7U7kngTtZqMeBAwe6ux84P+FOGvzmuZu0GLHy0FTRvsgL99YQDzLuXTtC
CCEqN8Q4xQ+G8xAhhBBVh1Lfmwghqh/o7txReu655yrWUhWAeYYzdHQlYkVy
t0Q2G+OKgjMe7rnFj1+x44QQQgghhKj6lOreRAhRfWC8mThxortrln+FEEII
IYQQQgghhKgKYOs1f/58+/vf/17srAghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghMvD//t//s40bN9qGDRvsq6++KnZ2hBBCCCGEEEIIIYRIhGXL
ltnYsWNtxIgR9sEHH9iKFSts/fr10sCEEEIIIYQQQgghRKXmiSeesJ///Of2
gx/8wBo1amTHHnus3Xvvvfb22287DWzdunW2efPmYmdTCCGEEEIIIYQQQohQ
PPjgg9agQQP74Q9/aFtttZVLaGB877DDDrMhQ4bY/Pnzbfny5bZ27VppYEII
IYQQQgghhBCiUvCXv/zFfvKTn9iPf/xja926te29997WsGFDq1OnTrkGVq9e
Pdt///3t5ptvtpkzZzrfyDVr1timTZuKnX0hhBBCCCGEEEIIIdLida9f/epX
9uc//9nmzZtno0aNsiuuuMJpXY0bN7a6detajRo1nE0Yehj6WO/evW3y5Mm2
ZMmScg2MGPlCCCGEEEIIIYQQQpQCqbrX3//+9/JUVlZmY8aMsT59+tihhx5q
TZo0cbZfXgOrWbOm7b777nb55Zfb+PHjbfHixbZ69Wp3P6Q0MCGEEEIIIYQQ
QghRTLLpXsG0YMECp23179/f2rVrZ82aNXMaGNqXjw220047Wbdu3eyFF16w
zz77zFatWmUbNmyQBiaEEEIIIYQQQgghKpx8da9UDWzSpEk2ePBgO/74461F
ixa29dZbW61atZwG9qMf/ciaN29uZ511lj399NP2ySef2MqVK50G9tVXXxX7
lYUQQgghhBBCCCFENSCK7pWapkyZYnfffbd16NDB2XwRIx8NDP2LuPjbbbed
+9nw4cPtgw8+sBUrVtj69eulgQkhhBBCCCGEEEKIgpGE7hVM06ZNswceeMA6
depku+66q9WvX99q165droE1atTIjj32WLvvvvvs7bffdhrYunXrbPPmzcUu
CiGEEEIIIYQQQghRhUha9wqmmTNn2iOPPGJdunSxPffc0xo0aODugyQWGBoY
Xx922GE2ZMgQmz9/vi1fvtzWrl0rDUwIIYQQQgghhBBCxKaQulcwzZkzx0aM
GGEXX3yx7b333tawYcMtNDBi5O+///528803O71s2bJltmbNGtu0aVOxi0gI
IYQQQgghhBBCVEIqSvcKpnnz5tmoUaPsiiuucFpX48aNrW7dulajRg0XFx89
rHXr1ta7d2+bPHmyLVmypFwD092QQgghhBBCCCGEECIfiqF7BVNZWZmNGTPG
+vTpY4cccog1adLE2X55DaxmzZq2++672+WXX24TJkywxYsX2+rVq23jxo3S
wIQQQgghhBBCCCFERoqtewUTMb7Gjx9v/fv3t3bt2lmzZs2cBob2hQaGT+TO
O+9s3bp1s9GjR9tnn31mq1atsg0bNkgDE0IIIYQQQgghhBBbUEq6VzAtWLDA
Jk2aZLfffrsdd9xxtv3229vWW29ttWrVchoY90PyvbPOOsuefvpp++STT2zl
ypVOA/vqq6+KXaxCCCGEEEIIIYQQosiUqu6Vmojzddddd1mHDh1sp512KtfA
0L+Ii7/ddtu5nw0fPtw+/PBDW7Fiha1fv14amBBCCCGEEEIIIUQ1pbLoXsE0
depUe+CBB6xTp0626667Wv369a127drlGlijRo2sffv2dt9999nbb7/tNLB1
69ZJAxNCCCGEEEIIIYSoRlRG3SuYZsyYYY888oh16dLF9thjD2vQoIG7D5JY
YGhgfN22bVsbOnSo851cvny5rV271jZv3lzsohdCCCGEEEIIIYQQBaSy617B
NHv2bBsxYoR1797d9tprL2vYsOEWGhi+kQcccIDdfPPNNnPmTFu2bJmtWbPG
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
8Y9/2Pvvv+98Hoth9yPdq/AJG8Fhw4bZmWee6fTK+vXrW+3atZ0Ghj9s48aN
7fjjj3d65jvvvON8XtetWycNTAghhBBCCCGEqMZUdt2rFJDuVbFpxowZNnz4
cOvcubOLf9+gQQOngRELDA2M9owfLb6s/P6XX37p4r9livUmhBBCCCGEEEKI
qol0r/hI9ype4r7Op556ysW9b926tTVs2NDq1KlTroHhG3nggQfawIED3e9+
8cUX0sCEEEIIIYQQQohqgnSv+Ej3Ko00d+5ce+6556xnz5623377WaNGjaxu
3bpWo0YNFw8MPaxNmzbWt29fe/31123p0qW2Zs0a27Rpk+LiCyGEEEIIIYQQ
VRDpXvGR7lV6qayszEaPHm29e/e23/3ud7bttttuoYERHx8fySuuuMJeeeUV
15aJFbdx40ZpYEIIIYQQQgghRBVBuld8KqPutWDBgvJUUZ9ZiGfmk+bPn2/j
xo2zfv362RFHHGHNmjWzevXqWc2aNZ0Ghha2yy67OF9J7gJdtGiRrVq1ShqY
EEIIIYQQQghRyYmqe7355pu2ePFid19edU/Ei1q4cGHRtax0Cbsn4sBPnjy5
QtOUKVNs2rRpNmP6dJv59fNdmjnTpVmzZrlYW3PmzLG5X6d5c+da2bx5Nv/r
vM6fX1ZQXYzPnjhxot1222127LHHWvPmzV0MMK+BcT9kixYt7Nxzz7Vnn33W
1evKlSttw4YN0sCEEEIIIYQQQohKRlTd64033rCPPvrIPv/882qfPv30U3v/
/fcj6TDz5s0r14GwS0razunll1+2Xr162WGHHbZF+v3vf+/SoYcemnji848+
+ij7wx/+YCeeeKKdeuqp1qlTR+vSpbN1797d+RZed911NmDAABs6dIjdd9+9
7n7GESNGON/EV1+dZNPRy2bOdOXidbEFCyifZDWx1157zd37eNJJJ9mOO+7o
NDB8ING/0MGaNm3q8v/YY4+59o4Ghn0feqcQQgghhBBCCCFKm6i6l1L8hO3R
I488Yp07d7Zrr73WXnrppUQ/H5+9m266yTp16mSHH364tWvXziX+X0jti89G
8zrjjDPs5JNPtvbt27vntm17WF7Pa9u2rf3xj3+0rl27uvhcd955p7uzkThc
6GHohNiKbamFxdfDpk6dasOGDXP5btmypf34xz+22rVrOw2MuyEbN25sxx9/
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
77xz7cgjj9xC/zrppJNs6NAhX//OZFdmC7L4YiaZuOOAePeXX3657bvvvtao
USOrW7euuxOSeGDoYW3atLG+ffs67XTp0qW2Zs0a27RpU7GHEyGEEEIIIYQQ
oqSQ7lVx6cUXX7Tu3bu7mPajRo3K+HuPPPKIi/118cUX27hx4yI/r3rqXikp
GKfe62Bb+EJ+YwP2+utT7L777rWzzz5rC/9H/k/sr1GjnrO5c+dscTdlReQf
X8vRo0fbtddeawcffLBtu+22W2hgxMfHRxL7NHxo//vf/9rq1att48aNuhtS
CCGEEEIIIUS1R7pXxSXua8TH8cYbb8wau2vChAlO5zjrrLPsoYceivw86V7f
T+ntwL7Tv159daLdeustdtKJJ5aXHQkdEhu9aVOnflt2FWP7FUzYq40dO9b6
9etnhx9+uLsHsl69elazZk2ngaGF7bLLLk5bfemll+zf//63rVq1ShqYEEII
IYQQQohqi3Svqpuke2VK3/eDDPpAzp072557dqRdfHF3O/LIduW2X/hBXnXl
lfbyyy/ZvHlzCxrzPlfimdh33XrrrXbsscda8+bNbeutty7XwLgfskWLFnbe
eec5n8mFCxc6DWzDhg3SwIQQQgghhBBCVBuke1XRtGCB3XPPPc4uCN3msksv
tQkTpHulptRYYEH9a/Lkv9mQIbe7OF9eP6QszznnHHvssUddzPst/R6LV46v
vfaau/eReyp32GEHp4HhA4n+hQ7WrFkzZ2v4+OOP28cff2wrV6609evX21df
fVXsIUgIIYQQQgghhCgY0r3SJ/QPYivNmzfPxRmfM2eOS9ylh48i8ednzJhh
06dPd//y9axZX6ev/51ZIgm/vKOOPNKOOPxwu/zyy6R7ZUnp7b++sf0a+fTT
duGFF7pYX97vEX3pjqFDbdq0qRVy32OYNHXqVBs2bJidccYZ1rJlS3cXZO3a
tZ0Gxt2QP/3pT93dCg888IC9++67tmLFClu3bp00MCGEEEIIIYQQVQ7pXt/p
HmhcaFpTpkyxF154wcXjokwGDx5s/fv3t969e7s79i644AIXewvto127ds7P
rFOnTnb++V3t/K5drWuJpFNPPdVpNUcfdZTzz3vlFeleGdO3mpWP21Ue/wvb
r6/L69VJE63/Tf2sffv25X6P3Ll5ww3X29/+9urXv1NWVL/HTAlN9uGHH3b+
jq1atbIGDRo4DWyrrbZyGljDhg1dG/b3i3755ZdOA9u8eXOxhyYhhBBCCCGE
ECI20r2+se3629/+Zvfee69169bN6RnerqeyJ2y9/viHP1jfvtfZxInjbZ50
r7zS9+2/ymzmjOk2bNh9Tk887LDDyu97vOKKXjZu3FhXrhV932OYhKb75JNP
2kUXXWStW7d2mledOnXKNTDswg466CC75ZZbnG3jF198YWvXrpUGJoQQQggh
hBCi0lLddS98GZ9//nm75JJLyrUMn7Dr4XvEdiIRKwudA/sYn/jap+++f0RJ
JPJ79NFH2emnn2YDB95skyZNkO4VIvmYXUHfR+LZP/30U9a1a5fymF/826PH
JTZmzOiS1758wneXePfYL+6zzz7WqFEjq1u3rrsTknhg6GFt2rSx66+/3vlN
Ll261NasWeNiggkhhBBCCCGEEJWF6qx7oUuMGjXKzj///HKtCw2De/vwXezQ
oYN17tzZLr74Yrviiiusb9++NmDAABs6dKjdd999LoYS9+n169fPBg0a9PX3
h9iQIYO/SYN9ur3i07d56H3tNdal83l20YXdbPDgQfbqpFeke8VoK9/4PX4T
9+vFF0e7mGloi7Qb9FHufxw9+gUrmzfP/V6pa18+of2OHj3arr32Wjv44INt
22233UIDIz7+nnvuaVdeeaXzmVyyZInTwDZt2qS7IYUQQgghhBBClDTVWfea
OHGiXXPNNeXxmo4++mi79NJL7bHHHrPJkyc7+5589RB/B2BZ2dxvYmgVOaFv
PfP0COvT+xq7otflNmTIIHv1VeleUdP3bb/KbML4cdb72mudjZ/XvrAbfGnM
mG/sviqR9uUTbX7s2LF24403Ok2vadOmVq9ePatZs6bTwPCH3G233eyyyy6z
8ePH2+LFi2316tW2ceNGaWBCCCGEEEIIIUqOJHQv7EWIHYTvVLH37fkm4hf9
6U9/sqOOOqpc88JuC5+uUJ/1ra7xzf1/Ae2r2GneXHvyicftsssutYsu6ma3
3DLAJsneK4G0Zcz7SRNfsev79i3XvrAX7Nmzp02YMP6bWPeVUPvyiTyjDWPT
iP1j8+bNrX79+uUaGHHBdtppJ3fPA/dAfPbZZ7Zq1SrbsGGDNDAhhBBCCCGE
ECVBEroXcYKwk0JHKvZePd/9/NNPP23nnHNOuZ0Ofoyvvvpq+M9LE/+8VNLw
hx+yc8892zp2PMNuuKGvTZw4Qfc5JtiGfMyvSRMn2nXXXedivNGe0MD4esqU
yeXl7O3Fip3vOOm1116zkSNH2vHHH28tWrSwrbfe2vlA/uhHP3I6GLoY95yO
GDHCPvnkE1u5cqXTwL766qtiD3NCCCGEEEIIIaopSehe3BGHhjRw4MCi783z
SVOmTHF+XN6/sVOnTvb444/H1EC+tQEqofTAA/fbSSed6HSKq6++yl6ZoPsc
k0zBeuc+xyuvvKI81j1lPnjwYJs9e9YW2ldltPv6/vsucH3o7rvvtlNOOcXZ
fHEXpNfA8IXcbrvt7OSTT3bxwD744ANbsWKFi4kvDUwIIYQQQgghREWShO6F
zyC2INOnT8+5Xy6FvTt78ZNOOsnpE/g5otfF9tH89t0WbGH/Vdx07733Ov9N
7I969rzcJkwYK3uvpJMv7/nz7fnn/2oXXtgtoKd2tEcffcTFuZ8/P2jzVfnK
m7xPmzbt6zY0wWbOnLnFz/j+gw8+6Gy9dt11V+cLWbt27XINjLsi8ZOkPb79
9ttOA1u3bp1t3ry52MOfEEIIIYQQQogqThK617yv9/XshdG/Ur/2mhixsvEj
nD17dl7x4guViFd09dVXO10CfeKiiy6yMWPGFF1XKET68z33ON87/DiJ8zVh
wjjpXoVIPsZbWZk99ugjdtppp5W3L+K/v/LKhG99T+dvoUsWPd8hEn0YG0l0
YvpQpt+j3z/66KPWtWtXN6Y0aNDA6tSp42KBoYHxNeUyZMgQFxdw+fLltnbt
WmlgQgghhBBCCCEKQhK6F/cfnn766XbTTTeVf925c2fr27ev+x4+X0ceeaQd
c8wxLo7WuHHjirJ3R2vgff/4xz+W+6LdeeedlU6DyDfdc8897k4+dIZLL+3h
7h+U7lWg9K2WNWvWTLvjjqHl9yW0b9/ebr99kM2ZM7tosb6S0NlefvllF8OP
d8qmewUTmjexvrjjcu+997aGDRtuoYFxT+T+++9v/fv3d3rZsmXLbM2aNbZp
06ZiD4tCCCGEEEIIIaoISele2LhwH6L/+owzznB7/nPPPffrff/tzg+KfTP6
1w033FBuG1aRadKkSXbNNdeU2+L06NHD+W0VXTMpULrn7rvL4025d5XuVbgU
sOOaMH68XXXVleX+jp3PO8+eGfm0zS+bW36/Y6HLnWfQx4jDhWaF1owfMv68
QQ0M28wZM2Z8rz9im4Ztpr+n9a9//atdfPHF7n1Gjx4duv/ynFGjRjndG62r
cePGVrduXatRo4aLiY9fZOvWra137942efJkW7JkSbkGprshhRBCCCGEEEJE
pVC6F/GuL7jgAnvhhRfKf+/5559332P/XNE2X+zjedcTTjihWth6kaR7VWwK
xrl/7LFHy/0dsbm7/vq+NmPGNJtfNm8Lf8dC5QM9F30Z20Zsz0jk54477nDx
uPzvDh8+3H0/9U4K/v7KK6+07t2729ChQ51+7dsSMePi3GGBfyO+xdx5yec1
adLE2X55DaxmzZq22267OR/R8ePH2+LFi2316tW2ceNGaWBCCCGEEEIIIUJR
SN0L2w1sRvzvvfLKK24v3a1bN3vxxRcrVJPw+/igrRd76mJrJYVM0r2Kk3wM
+FtuGVhe/sS4RwsrK5v7XdkXSPcijl6fPn3suOOOc//ia/jII484HYnv3Xzz
zeX2Wuhep556qg0YMGCLz6C/YJtF/LuRI0c6e020L97lvvvuS8xOkrKiH+Lr
yP0LzZo1cxoY2hcaGD6R3BfpNfTPPvvMVq1aZRs2bJAGJoQQQgghhBAiJ4XS
vdhL+6+D+/Frr732e3ZghU7Yl3CXHHfKsW/HBubuu++u0rZeJOlexUrf2HI9
++wzLs7dljZf07eI85V0G+Tzhg0bZn/4wx9cHPqg7uy1LO5dfPLJJ9338tG9
8JOMEt8rSt7xRR48eLCzx2zRooVtvfXW/7+9e4GusjzT/z8/SiKEhDbgwCBg
gRnECsOAoqJWu+oBBBQFFAFpQUAFRM6CiJwsglLlIAUFQUWOEo4SIIAJIecz
bQft6lL/HdAZoSN2YAZKDMn9z/WEN9kJASEJeUPy/ax1r4RkZ5/ed2/Xvryf
+7Hg4GC3N6SqWbNm7v5v2LDB/vKXv9jJkyddBpabm+v3WykAAAAAoAq6UrmX
/u3NuffKj9xLn6U1j0if3/WZXXsbjhs3zt0X//ORK1vkXj7WuRn3mmmvzEvH
YPCgQbZh/briz79yrwrMvjSPa86cOTZgwAC3r2Lg7/RaUP7bu3dvt95RP6tK
uVfJ0mwy5dPqHVXPV2hoaGEGprn4jRs3tscee8w9hj//+c924sQJO3PmDBkY
AAAAAKBQdc+9NMtbs4i87EGf8fWYfc9FKqHIvfwt5UwffbTBBg0a5I6BZmxp
7WNGuvZ2LJrzVZG5V0xMjFvbqD6zTZs2nff7lStXWp8+fdxaR/27KudegaV1
o1prqV6vNm3aWFhYmJuF72VgDRo0cP2cyvUOHTrkMrC///3vdvbsWb/fYgEA
AAAAPqrOuZfWN65YscL1t+jz+v3332/Tpk1z+9f5nYlURpF7+V0HLT4+zr0O
vL0dn39+lEVF7Sp2DIr2dyz/bQbmXhEREef93ns9/FDupX0nxo4dW2Vyr8BK
Tk52vWzDhg2zdu3aWf369a1OnTpuFpgyMP1bfZ1vvPGGyxb/9re/2enTp8nA
AAAAAKAGqq65l7IE7R85fPjwwln2mqdfmXPF/C5yL/9L5+HKlSvcTDkdh379
nsj/97v5xyHdsjIzi3q+KugYaJ3j3Llz82+nn7333nvF5ocpB160aJG7L9qj
UT9TfuS9VgMvu3nzZpcrlZZ7aX8Kv59XrzSfX3P7tUfszTffbD/5yU+KZWCa
kd+5c2eX8ykvO378uJ06dcpycnL8fusFAAAAAFSCisi91q1b5/Z601wh/Vsz
s5966in3+TvwcupF0axtfX7esWPHFf08HB8f7/aIU9+HPqtrbZfmfVf3WfaB
Re7lf+l8096lI0eOdMdBexa++upvLCP/OBTPvSru9vSa7tWrl+v70utAeVdG
Roabc6fXntZd6jWryyszevLJJ93MO82U1+WUnWm9oGbje7mX1/+lx6DHo+v0
+7ktWbrvyuu0PlNZV8OGDa1u3bpWu3Zttzek8rAOHTq4fWZjY2Ptr3/9a2EG
xt6QAAAAAFA9VUTuVdVKWYLmGHnrG7t06eJ60dTv4fd9q8wqb+6l51H9NMoT
lHN43+t3+rfWi2p+mvez0v5ez7lK35d2mfT0dDe7SZe5UJZS1tvy/k7ZT2Dp
9nRd2usw8H4ddLPoU9xl9Dtdly6r+1ie45CYmOD6jby1juPHj7P9+6OvWP64
f/9+ly9rT0TlWer7euedd1yGpTnwmhXvPY9aszh58mR76KGHXK6l302fPt1+
/etfu7/3ci/1aiov0vmkyynbrsoZso69snVlf3rOGzVq5Hq/vAwsKCjIfvaz
n7nHEhUVZd9884393//9n33//fcVmoHpujRnX9er0vdkbAAAAABQeapb7uX1
1yjn8dY3aq2jel38vm+VXeXNvfScKT9ZtmyZm5GuPOSDDz5wv/voo49cD536
6ZSVlJZr6e+Vn2jNXWnrS/U3msHUsWNH15+k3qPS7kdZb2vjxo1uL8Abb7zR
ZRyqtm3bWqdOndysN/U+6XEpz9PltX+g1uBqZtTEiRPdDHWtnVu8eHG5z8ml
S5e6ufY6Fk8/Pcw2b97ker7S0lItNTXF5W1pqakuY/N6wMqTK6mf6fXXX3c5
V7du3VzvltYtar5XYI7n7Xeq/KdHjx5uNryex4ULF7r9IJSbqddL90nrl/Wc
6TJX05w8PUZlW+r/VL9dkyZNXAam7EsZmNZEar9Ibx30V199Zf/7v/9r2dnZ
Zc6o9Heaq3/s2LHC9yRdt/K4o0ePut+RfwEAAADAlVcZuZc+91X0eq7SSreh
feg0Q8zLex599FGXW1Tl3pQrVeXJvfRcvvzyy24+elxcnOv1UX7o9QlpHvrt
t9/ucgPtlVlarqXcSTnD3Xff7bKrkr/XsdJsKe3L16xZM7c+rbRMq6y3pdlV
d9xxhzu/lX1pjVv79u3d9//0T//k1sDpdvXYlAUp93r66afd78ePH28DBw60
f/u3f3NZW/mOxUFbs2aNy+R0LPr372/Llr1tH3+8Lf81t9j1JClPUpakjFE5
k7K4isi/dLz0uNS3drHr0e/UA6fL/tAaxtRz+Zzf53dZSo9T6znnzZvn+tmu
v/56q1evngUHB7vzS/tD6pxQ5rlhwwb7y1/+YidPnnQZmHq1LoXm5//nf/6n
ez9Vhqo5Y17pNnR+zZ8/377++mtm7QMAAACo1vT/+4vVuTUwXuWW+PfFqqwq
LPfSZ+oSlXVunZk+x3+8fbsdiI21DH1eLuWyZapzn2P1GVxr0rR/3ahRowqz
HuUgym60bs3vz9t+VHlyL2Vd+hv1AKlXSb0w6h3y+ua8LEo5gc4f5UUl15H+
UO6lGVLq9dL13HXXXfbggw+6vpySlyvrbXm5lx6/+roCL69zYtKkSS7/0rmv
bEt5j+ZeqfdJs+C0PnDMmDGuz6l8x+KgbdmyxT2H6j9U3qLsS8+t7lvJUu/b
b3/7WztwILZ49hVw3lMVU8r5dOx1bqvnKzQ01GVgOteUUzVu3Nj9Tufgn//8
Zztx4oSdOXPmghmYfn7o0CE3Q039ZIF5l8r7t25D+2j+8Y9/pO8LAAAAQLWk
dTRHjhxx/QRe/Yf39T/+w9Xhw4dd6XIqrb/xSr0CKvUVqP7rv/6rsDSrRqX1
NF5pvY1Ks5wDa8GCBVa/fn276aab3Gdt9YWUpRJLqYiNG23Uc8+5PELryrTm
bNHChRa7f3+pl7/UCrw9zR7SmixlId46MpX6grRGq7QcpaZUeXIvzXPSXgXq
V1EflvqybrnlFpeB6fdeFqU1Yy1btnQ9LDp/Avu1LpZ7qWdI+dI///M/uzWF
On6tW7e211577bz7UtbbuljupdLaQvVYKfvS2j1letqbQTOttBeoZsJpn0DN
yyrvsVD2q/NRuZdX3jpcHSOdr/rq/VyPRX1gyooPVkDfF/XDpfcV9dupz69N
mzYWFhbmehG9DKxBgwbuPNFrQNmWMjCtVwzs2dJ7ss5rzRHT3+irsrTrrrvO
9ZHpe+93yr6GDh3q3r8BAAAAoLrRXGh9DgpcA1OZ5fUfeD0Iyr60BkwzlLzS
5/DA0mdzlTKsi5U+s6u8zKVk6bN94O2UpZRxqW+me/dubm697pd+ruvWbWud
Wk3OvFTlyb3UT6VZUJrHrnNVc9G1P6dyRv3ey6J0vLVXobKjkmsQL5Z7qTdP
v1Ofl3qslHc1b97cBgwYcF4vV1lv64dyL5X6sJRl6NxX34/yKZ03ysR27drl
1sRVxLHw5sIHZl56DH369LaxY0bbjBnTXMamdbneMdOs+Tff+K2lp3trHitu
rbB62/QY1Y+pDLIq7s/oZ+kc1Cw75VLKfvX+qP0gNQvMe7/U+43m0+nY/O1v
f3Nz8bWfhvJZXUaX1/mnnlrv/znoOnWO6ne6jM55rcO+1DWUAAAAAHC1WLt2
ja+5V8nS5zit9yotp6qKpVndffs+7nID5QNduyr7utetldOsJGUf+lx/oX0E
a0KVd679xcrLopQ/anbVU0895fphAtcgXij3UnajDO2nP/2pm6GuWVZeDqaZ
81pfWBG3dSm5l2Zaaf1hixYtbPbs2VfsWGjOvHrLAjOvcWPH2O5dOywjPSW/
Ul1t3bLZRo4cUXg5zcCPiNiY/ziTCiqpoJLKWN4Mr9WrV7tzQnueqj9J2aPW
fpb1eqtzqd9PeZbOO+2NoLlwyr+8/2egGfmdO3d2z6cyeP1MPWLaS+APf/jD
ee/9+pnWOHp/r3WU6h87fvx4la3vztWJ//kfy84+Y3l57EsJAAAA4OL0OV9r
C3/yk5+UsX584fpxQf34Ekqf4fT5S99rHZuyhYooZRDqhygts9LPvd6xi9X9
rreseHm/6927lw0bNtQGDfp1/ufGPm5WkvqBvJ4v5WKTJ0+2yMjIGtvLUlm5
l3qkNANLvVtaH6aZ4cobL5R7KQPSGsp/+Zd/cXsO6mfeusd//Md/dLllYF5Z
1tu6lNxL54bWHypHU4/gFcu99u+3adNeLsyzdN6uXbPa0tOS86sg98rMSHXH
5/3337PHH3/MXU6PWef5iy9OslGjnrMhTz3leuKUm2jdsDKTyy29Vrz74ZXO
E/28LNdXk0o5oc4z9QfqXA2cBRZY6knU7PrSKC9SjtawYUN3WW9/Ba3zreql
Htuo/PeRgtwrVw+mkv/LCQAAAOBqceLE/9gXX3xun332qX366b/boUN/sH//
40H74x+y7A+/V06jXCLDfn8w05W+P5iV7iorM81Vwefk1HP9IgVV8Dk62dJS
kworNSXRVUpygqvk5PjC0udp7Wd2ww2t8z+XT7WtWzYV1paA2rzZqwhXmzZ5
tbGoIj5yFZFf8+e/6WZClfx8rcxKn/l1W9Pza5pXL5+rcz+fMf1lmzljus2a
NaOoZs6wmTOn5//+ZXtl1kx79dXf2NSpU1weMHDgk/bIIz1dv0Vg3qZ8Zf36
9TUy+6rM3EvPr/qlAtcgXij30md+Zaw6N7RnnnqQVJrZpXlfyi8//vjjct/W
peRe6jXTcxMeHu5ytyt1LHbv3mXjxo0tPC8nTXrB4uNji+demXptZ7hcQTPV
vIx4wID+Nn78WBs6dIjLw7S2N3Bdr9+9lzWx7rnnHpe9ao/Qa6+99rzcS7mY
/t/GhezYscNdxu8+38st7W+q/sOzZ3MsN/cs2RcAAACAi9JMl7Nnv7ezOWfs
++9PW3b2Kcs+U7n19tIlbo1ju3Zt7a1FCwtykQqoxMR4e+O386xHj+4ux1D+
otxi9PPP2/ZtWyvmdpQTZGW60gwkzSWfNWuW2ytPt+llAlqfpCykps0Fr8zc
Sz/TDCtvDeKwYcNcX1bJLEqZleZcKWu9/vrri82Pu+2226xRo0ZuzaHminnH
q6y3dSm5l67nV7/6lZuzpDn2V+pYKOfQXqNebjJ16kuWmppoaWnJlpGW4o5L
VlbBcYnJv09TX3rJXU7nsDLdqS+9aKNHj7JBg35lffr0sofyX1cPPtjV5byX
U15PZGlZjn6u5/Byr7MmVOC8Qp1TmvmlOV7q1fLmJWrto9f7pV5G5bulrQXU
z5T3av/Igtn3P3JrJTXzvqrXHXd0ti2bN1lOTnZA9kXuBQAAAKAU+Z8V8nJz
3ecGfX7Q54jvvz9jOd//Pb/OuPo+++/F/l22+vtFa9k7S+3HLvdqZ4vfWmRZ
ruekYiolOdH1BkyfPs3Gjxtnby9davtjol1eVdbyrrvg3xkB876z7PfnchLN
L9K+fFq35WUHWju3Z88e37Oo6px7qbw1iDfccIObCa7bD8yi1Mf1yCOPuHW1
mpV08803Fyv1eykT0xo+7a9Xntu6lNxLP9f1tm3b1s21v1LHQo9bM/m9jGlM
/vm4d8/u4r1e546J8lvvsspbprw42bZt3ez6KNetW2Mfrnrf3n9vha1c+a6t
WHF5NW/e6y7nK5l96d/qjVywYP5lX2d1rXffXW5vv700/7xYZLNn/8adY8pm
w8N/4nIuZVza71H7Pio3veWWm61lyxaFezVqX1DNxipJ8+21BrtgRtg/5J/3
HW3u3Nm2Zs2qKl1r8ytyx3b7/7783P23Sv/PJjc3x/3/m4Lsi/wLAAAAQHH6
rKB1Isq+Cj4/5Jf6v/R5orByXJ3N+f6yy7uOi11m2bJ37Mc/Ppd7LX6rsH+q
ZB08Vxf6/aVURVxHVrHryMr/vmCPO9cbFNDPpXnUWjenOff6XK+vmqWenp7u
ex5VnXOvwDWI6udSJuVlUTpGCxYscNmWZn6r16rk9XpZldZTaQ/Jst7WpeRe
Ohc0a15zmjS3aO/evVfsWGzbttWGDx9e2IPYq9ejtnDBfEtKjLf0tNTCHDcp
KdGtEfbOW60Vfnf5svz7WjT7PiM9/ximl61HUln0woUL3B6WXvalc6RXr162
YP78guuuoJ7Pq7GUQyYnJVjcgf1ufbcy+3vv/aXrK/Tm1WsvRuW2N/3sZ/bM
00+7TPKb//rK/vbdf7u1195ejepbXLhwYeFej6dOnXI52PLly92eDrqMMt5J
kybayRN/q/Re38uv/3NfC/5/jJd7nVvraOReAAAAAEpXkH3lFWZghaXPExVR
gddZynUvz/9Mrc9wBbnX4sLeqfPr4GVWRVzHpVx3Qd5V2hpG5SovvfRS4ed7
7R24du3aGrPe0Y/cy3vetQYxKCjIfbb3sijN8FIPjHKmiRMnlnq92lNQ+zRq
7a1yImVbZbmtwNzr5z//udu/0NvPUH1k2qNPuajyNWUQWh97JY/F2jVrXJ+V
1hl6PVaPPvqovfrqbNu9a2f+fYqzyMgdNnPmDLc/qdeDNXHiBPvkk70Fede5
ufduTWQ5eiaTEhPs/fdWuudZ+aOe5w8/XGUpKUnl6sW8Wis9/7lNSkqw2Nj9
tnHjBps8eZLddded7hzUOaW+LK1n1H4iHfLPl7Fjx9iePbvt+Ld/dRlQYCXm
H8fu3boVrndUrqUeMfWbat8EnY/6mXe9Dzxwvx04sP+866mq5fURn83JLvh/
Mrns6wgAAADgEgR8bihaL3Jly8va1HtQPPcqPWsqykcuvSou57rwfSnZ51Wy
NEdHeYOXI2heeExMjO+ZVHXOvVTeGkStB/OyqDVr1rjvO3XqZO+9994Fr/uN
N95w68bUG7V58+Yy3VZg7qWc7c4773R/r9ypc+fOrhdHuUbTpk3dfo4pKSlX
7DjoHH377bfd+k7NpNe+pIHz6Lt1e9D1f+n+eT/T73Xerlr1QWGfV+FMu3PH
r7yVkZFu6WlF50NNKj325OQkl3WtW7fW7Wmg81JztgpmbtV232vPxdtuu9Ve
emmKxccdsJMn/uei/bPZZ/5uG/PPP72f6jouNB9ev9NlPnj/Pcv5PrtM/byV
XYX9w+fWN+blev8vhdwLAAAAQNX17rvvutzrX//1X+13v/ud71lNRZf269Pa
Oi9T0Pqu119/3bf1jlqbmZqamv+ZO7lYKXfRfc3IyKiwfrQrmXupf0p7Cvbu
3bvUuWnq09KMtZYtW7o1e1pnOG/ePLfGUXmO+q4udN1bt25116tcQGtTy3Jb
+rl6+zQfS306XmnfRmVd2odvwIABLlO70ueC+ss0p79rly5uz9G+ffu6DMw7
NiVLP+/X7wm354T2eyzYtzUw77pQTyZ1sfKyrv37Y1x/24gRw92eilqXqMzU
y7oaNfpHl5++Onu2+5u/nz51WT22yr727d3r9h1QtqpeMfUjqvS93m/vzz+f
d+6MdJlXhfX2VkblnS3MurxifSMAAACAqqy6514qzW2aNGlS4XrHgQMHuizF
j/WOmm+u+/Lkk0+6+6EMSPXMM8+4fQ7Vf6c1eBVx365k7kVdem3fts3NqVev
WZ/eve2NN35rGzass1GjRrocVpms9gzUV80ZU/+ZZksVrG3U8Sp+zArX95ah
B7MmVWDWFRMTbStXrrAhQ56yG29s4zIoZV36qnWH2ptRGen8+fPt0KF/t5yc
7628PbX//d9/ddnWyy+/bH369HEz1LTu+uOPt9uxY0fLff1+lJdzFfV4kXsB
AAAAqNpqQu6l0npHzffS+jGVZu34sd4xIiLCzaNS3qHcS3voDRo0yPr37+9m
LalfSbOvKmLGOrmX/6V8Sq8xr79Lx3r1h6tcppWSkph/nKNs7drVbu9AZWEx
0fssTXs8ZqQFZF7pxfq8fv8Da3trcun5Vs+keij37dtnS5cudX19rVq1Ord/
4v9zey2GhoZas2bNXM6o/RM+//xzN6sKAAAAAFC91JTcS5+FNb+sW7duLgfS
512tf1SWUJn3w8u9NE+o5H6Gn3zyiev5Uv6lvpPy3ha5l/8VFxdnM2bMKJwv
p16ufXuj3NrFwn6uC1VmaWsbOV4lS8+J1qpq34KoqCj3ulZ/lXIt5VyaMa+s
KywszM110zpTzX47fPgws6kAAAAAoJqrKbmXSj1UL7zwQuFMce1jt2PHjkq9
DxfLvVQffPCB+8w+derUcs+dIvfyt5THrF+/vnBfBWWur7/+2rk59WkFc7u8
NYyu0gv3aSyWd2UV7YXKsSp6bvX60Jy4nTt32muvvWY9evSwxo0bu7nxyrqu
ueYaN1+rdevWrs9u48aN9s033/j9lgsAAAAAqEQ1KfdSaY65ciXlEFpTqM/L
moteWbd/odxLn+N1P5YtW2aPP/64m9Ne3hlf5F7+ltbaaS6/dwyGDBliGz/a
cC7z8tYvXmgvxaziPV6sa3TPh/Z+UNa1fft2mzVrltvvQHsuelmXZtTr/eym
m26yESNGWGRkpH377bd+v80CAAAAAHxS03KvAwcO2PTp0wtn3A8bNsztH1hZ
t+/lXqNGjXK9ZvoMHx8f7zIwZXKab//000+7y5X3tsi9/CtlVZoppz4jPf+a
aT9zxgxLSU4MyLwyS+w5eLDE90VVU3Mvb/9TvUY2b97s1gH//Oc/d+9Zyro0
s0t7JGqfTu3Rqbl9ei2dOHHC77dWAAAAAEAVUNNyL9XatWvdHHmv50s9OZXV
8+XlXlprqV4Vr5RPKYvT/Vq5cmWF3B9yL/9KOc0rr7xSmK8q/1q3bk3BusZi
xyBgD8Jz+VZRzlUzj4vOfWVdmo2m7FBZ1q233mohISEu66pdu7b7Xn1et912
m1sTrPz41KlTfr+dAgAAAACqmJqYeymT0BopL5NQf1Vl9Xx5uZfWWk6YMMF9
Zn/ppZfc91oHp5n2ykg050uz+MtzW+Re/pR6lNS7p/Wqeu67dHnAXnllpiUn
Jxbu0ViwvjGr3GtZq0sp60pJSbHY2FhbvXq1jRw50tq3b+/WLWo2vZd1NWrU
yO6++2579dVX3d+cOXPG77dQAAAAAEAVVhNzL9WaNWvsiSeecLlE165d3efo
8uZMl1IXm2uvz/H6zP/kk0/as88+ax9//HG5bovcq/JLOdbu3bts3Lix7nlX
X59y1c2bI1zelXHeGsea+dzrcev1phloMTExrsdRue+NN95oQUFBLuvS13r1
6lmTJk3sgQcecHucHjp0yHJycvx+2wQAAAAAXCVqau6lNVQzZ84s7PkaPHiw
W1N1pXOIH9rPUb1oM2bMsMcee8zNuC/PbZF7VX4px5k3b57LafS8P/zww7Zg
/ptuD8fM83q9albuFZh17du3z5YuXeoy3latWrk5Xcq6goODLTQ01Jo1a+ae
u7fffts+//xzy83N9futEgAAAABwFaqpuZdq/fr1NnDgQJdPaMaW1htqTtCV
vM0fyr2Uxyn30jpIfeYvz22Re1VuqV/vvffeK1zfqOd+4sSJFv3J3oLnPb+y
Ap77mjCvXo8xPT3dkpKSLCoqyhYuXOjObeVayrm0B6OyrrCwMGvRooX17dvX
Vq1aZYcPH7a8vDy/3x4BAAAAAFe5mpx7aZ6QenO0155yCn0eVw+KenGu1G16
uZdyqN27d7v53V6pD0ZzoQYMGGBDhw61TZs2leu2yL0qr3TObMo/tk8PG1a4
vnHw4EG2du3qwsyrcH1jVtF+jX7f7ytRXtalDHnnzp32+uuvW48ePaxx48Zu
Lr2yrmuuucbq169vrVu3dvPsNm7caN98843fb4cAAAAAgGqmJudeKs3Qeu65
51xOobxCc7W2bdt2xbIvL/d65JFH3OzucePGud6v0aNHu8//ygd69eplCxYs
KPeejuRelVPKeZTv6Dh659Gjjz5qCxcusPS0lIDcK6PazvXS6yUtLc1lXdu3
b3f7RihP1p6LXtalGfV6r7npppts+PDhtmPHDvv222/9fgsEAAAAAFRjNT33
0uf1FStWuJzCW5umDEqfyfU5XtlTRWYUW7ZssREjRlj37t0LS1mXbl9rLidN
mmTr1q1zt12u28q/z4sXL3brN5XF6DGRe1V86dzQ+j0dN29W3IMPPuj2b0xM
iDsv88qqRr1eeizqU9RMus2bN7t1wtprUe8nyro0s6tu3boWHh5uHTp0cBnv
J598YidOnPD7bQ8AAAAAUEPU9NxLlZCQ4PZz9NY7KifSXo/qWdG6Q61HVB+L
ZhRpLaJKayQDS5//lVVpfVeGKiPDlf7tV721aJGbr64sb+yY0bZnD7lXRZZy
nz179tiLL75Y2Fen53vy5Mn2ScBML299Y+As+6s599K5rjl02gdi/Pjxduut
t7p9F5V11a5d20JCQlyf12233WZTp051r51Tp075/VYHAAAAAKiByL0Kau/e
vTZlyhSXfXlr1bxSH0+XLl3c2kTN3f71r3/t1kNqfaR6t7RmS+sI1e8y/803
3Yww32vJEpswYYJ17do1v7rkfz+O3KsCSxnWrl273Nx6L/PSuTN+/DjbvXun
e54zCjOvjKs681LPo7LdAwcOuH4trc9t3769W7eo2fRe1tWoUSPX7zV79mz3
N2fOnPH77Q0AAAAAUMORexXV/v373Wf2nj17ugxDeVfJDOxqK2UyDz3Uw6ZM
edH27o06l8WQe5WnlOls3brVRo0qmgun82Xs2DG2c+eOgMzL278xIO+6CvZw
1P30si69Jj744AN75plnrG3btq6vS1lXUFCQ+75Jkybusb/55pt26NAhy8nJ
8fstDQAAAACAQuRexUvrAzXr/rXXXnM9XZox361bNzezqaB3qqvr/dJ6Ns3O
CszG9LWqle7n448/5uZNfbJvj2VmpBbtK0judVnl7VO4Zs0aGzx4cGG2qOd4
wvjxtntXZPG1jV6+mFX159jr/mldrtbwRkdH2/Lly90+C9pvUf1cXtaleV3N
mjWzhx56yN5++237/PPPLTc31++3MQAAAAAASkXudfFSFqD1XVrTptndyjz0
nL311ls2Y8YMtzejZtJrDWTv3r2tX79+NnDgk/7Xk0/aY489Zr16PWpPDR5k
816fa9Gf7KHfq4yl5yoxMcHtFaDj7OWcykO9XrrAzCuzROZVFXMvL+vS3Dqt
89XrX3PtfvrTn7r9F5V1BQcHW2hoqF1//fXuPNda3sOHD1teXp7fb10AAAAA
APwgcq/yZwfKRNzc8syMgszDyz/OrXfzqyI+Wm9TX5piEyeOtzfemOdmrWe4
fi9yr8sprfnTno3Tpk1z/X5e5vXwww/bb37zih04sL8gTyyReVXFvRu9njVl
XdqvQesTlWddd911LudS3nXNNddYWFiYtWrVyvr37++y3q+//pqsCwAAAABw
1SH3Kn+OoFLGUSz78iogA6vsWr9urcu8Ro8eZa+7fq+99Htd5rHVHp3r1q2z
YcOGFa5n1dpW7W+gnr/k5MSieV4Bz23gHHu/H4fuix6H9lXcsWOH27tUfWqa
Q+9lXZpRX79+fWvTpo0NHTrUtmzZYseOHfP77QkAAAAAgHIh9ypnncu9Cnu+
XPZ1rs7lYH7Vh6vet2eeHubWOc6aNcPN9yL3urRSj5fmXGnOm/Y58GZ53X//
fS4DW7d2jWWkp15Cn5c/z6+XdSUkJLgZ/NOnT3d5XXh4uP3DP/yD/ehHP3JZ
l1777dq1s1GjRrn+r++++87vtyQAAAAAACoMuVf562BA9lVYWf7Xu8uX2eOP
P+5mfE15cbLt3cN+jpdyLJUXbdiwwe1hqKzIW9fYo4f2xZxiUVG73F6NRfs2
ejPss3xd26jbTk1Ntfj4eIuIiLBJkybZHXfc4eZzeVmX5tIr+7r55pvthRde
sNjYWDt58qTfb0MAAAAAAFwR5F4VVIXZV9WppUuXWPfu3d1MqvHjx9mePbuL
rcUj9yoqb8b73r17bPbs2W52l9fjde+997o5V0t+t9iSkxKKryd1e2MWZF5+
zLBXX1pKSorbe0HrMUePHu0yLeVbyrq0F2NISIhde+21LgPTXgy6/OnTp/1+
6wEAAAAA4Ioj97pyOUpRpuRP6Xg+8MADLrcZM2aM7dmzi9yrlOOkvGv//v1u
r0blW94cL33t1q2bjRs3zrZv31rY45VZrMer+CyvK5156fq9rEv3+YMPPnB9
aW3btnV7L2pel7KuevXqWePGjd1j0FpN/V12drbfbzcAAAAAAFQqcq/qW8px
7rvvPpd9jB79vO2Jot/Lq4J9DdPcDC+d9wMHDiy2plHPW79+T9iiRQstISHu
3PPmVVHmdTBwfv0Vyry8bC45OdndX71mBw0aZK1bt3YZl7KuoKAgt55R+zJq
Zr1m7v/pT3+ys2fP+v0WAwAAAACAb8i9qm8tfust1+ulLOf558m9VF6v1M6d
O10flPZl9Pq7vDWNPXs+bC++ONkid2wvMbu+xH6N582vr7j76WVdSUlJtnfv
Xvfa7Nevn7Vo0cLtv6isS/1dyrquv/56e/TRR91r+csvv7Tc3Fy/31YAAAAA
AKgSyL2qb5F7FZQyqvT0dIuLi7O1a9fa+PHj3Yx6L+vy8i79TPOxPvpovaWm
JhflXRnpAXO8Ssu8KuZ+FvSgpbusS3srvvnmmy7PUg+Xci7lXddcc42FhYVZ
q1at3JrMNWvW2Ndff215eXl+v5UAAAAAAFDlkHtV36rJuZeXdSUlJdr27dtt
zpw5Lify1jIGrmfUDPuxY8fahg3rLSUlKSDvuvgcr4rIvHSd2j8yMTHRduzY
4e6nZoo1atSoMOuqU6eO1a9f32644QYbMmSIbdmyxY4dO+b3WwcAAAAAAFUe
uVf1rZqWexVkXWmuX0oZ0htvvGGDBw+2+++/v1hvl7Ivzft//PHHbPr0abZ9
21ZLT0s5L+8qyry8vKtEj1cZcy8v60pISLCtW7fm34fp7j6Fh4e7PRh/9KMf
uaxLr8t27drZqFGjbNeuXfbdd9/5/XYBAAAAAMBVhdyr+lZ1z728vQ3TUlNd
hrRt2zZ7/fXXbfDgQS7XCsy61Nul/Kt79+42bNhQW7JkscVE7yvKuTKKZtYX
zfAqvqZRz1NZe7x0Pan59zM+Pt4iIiJs0qRJdscdd7g1i17WVbduXZd93Xzz
zfbCCy+4/RpPnjzp91sEAAAAAABXLXKv6lvVLfdSdqRZ78qPtLdhTEy0rV79
oU2bNs3NfPcea8l1jF27dnVrHF95ZZZt3bo5/++TCjKu/Ocio2R/V1bgPo0H
S6xpvLznyZuhf+DAAVu3bp2bHaZMKyQkxGVd2otR31977bXWuXNnmzFjhrv8
6dOn/X5bAAAAAACgWiD3qr519eVeBfmS7pvyLa0FVA6kjEvZkdYELl682O21
OHDgQJdnBeZcJbOuJ57oa1OnvmTr16+zxMT4wr6uUud3ZWYWPifeesZi6xgv
oc/L6z/TfY6NjbVVq1bZs88+69Yqah695nUp66pXr541btzY3VftKam/y87O
9vutAAAAAACAaofcq/pWydwrKmqXZaSnWkZGerHsq2LroOvL8tYJKgfKzMjI
v910N2deWZZKPVtepqXSTK7ExATbvz/Gtm7ZYsuWLbPZs2e7Hin1aj344IMu
JyqZc3nzurSGUZfRZdX/tX79WktIiCvMuDJK6+0KWM94sMR6xkt9jnV5ZXR6
DNHR0e71pJlirVu3dhmXsq6goCCXdWlfRuVxixYtsj/96U929uxZv1/+AAAA
AABUa+Re1bfeCsi9hg9/1iI2brB9e6NsT9Qu27Vrp0VGRrr57zt2fFxBtaOo
Pv7YtmzebGvXrrGVK1bY7xYvtnnz5tmsWbPspZdesnHjxtmIESNcRqQ1io8+
+qjLhAL3WyytlH3pMT3wwP3u8tqLcejQoTZ37hzbvDnCkpMTi/V1nZ91Fa1l
LJrdVXJm/cVzLy/rUla3d+9eW7JkiXsMLVq0cHO6lHUFBwdbaGioXX/99e6x
LV++3L788kvLzc31+yUPAAAAAECNQe5VXeugy2OUDSkneqxPHxs/bqxNGD/O
hg0dao8/9ph169bNrQlU1nShXqqylK5PvVc9e/a0Hj2659+HLvm3c+9l3Y4u
p8vr/mlGvR5H9+7drG/fvjZmzBh747fzbMP6dRYbG+N62C60hrHk3K7iWdel
z+/S79Wvpqxr9+7d9uabb7o8q2nTpi7nqlWrllvLqDn1rVq1cn1na9assa++
+sry8vL8fpkDAAAAAFAjkXtV1zpoO3dG2pw5c2zEiOE25KnBNm7cGBsz+nn3
fZ8+va1btwddrqSMqaJzL2VeAwb0z7+dPvbQQw+53Or+++9zt6ccTl+1NlGZ
lqpLly7uMsrLtOei/u7ZZ5+xadNetrfeWmQbNqyz6Oi9lp6WXNTLlV4i57rA
GsaCdZfn93WdN8OrROlvtCYzMTHR9cbpuVRW2KhRo2JZV/369e2GG26wIUOG
2ObNm+3YsWN+v6wBAAAAAICRe1XfKsh1YqI/sTff/K2NHTvaJk4cb2PGjLZh
w4Za//79rFevXi6TUh+V8pyKqh49etivfjUw/7aet2eeedoGDxpkgwb92oYO
HWIjR46w8ePHuXnzs2f/xua/+YYtXfo7e//9lS7b2vHxNovdH23paSkF+VZ6
Ub6VcbF+rmI9XRdew/hDfV1e1pWQkODm6E+fPt3leOHh4W4PRq1jrFOnjnvN
aF79c889Z7t27bLvvvvO75cyAAAAAAAogdyrGpe3v2BysiUkxFtCfJyr+LgD
ruJcxebX/gqvhIQDlpKSaOnpKfn3ITCrCujVSi+ea2VerAIyrsxivVyl5FxZ
l7eGUX+rOfvx8fEWERFhkydPtjvuuMOtWfSyrrp167rsq2PHjjZx4kTbv3+/
nTx50u+XLwAAAAAAuAhyr2pc59bxHTy3v6Lyokzt5ZieVlA/lDWVp1zWlV48
r7rQ5TLTSy23VtFlXBklerkyS6xbLH394sGLrGF0eWBKih04cMDWrVvnZobd
csstFhIS4rIu7cWo76+99lrr3Lmz6/vSno2nT5/2+yULAAAAAAAuEblXNa/C
LCjLZUfn9U1llvxZ+aowqyqszHO3UXRbRTnWhTKtojp43nrFC8ykv4S59F7W
FRsba6tWrbJnn33WrVXUjC7N61LWVa9ePTe/S/PO5s6d6/4uOzvb75cpAAAA
AAAoA3KvGlAB2VdRjhSYLVVcZRV+zSpcexg4W97r0wr8mlVsfWJW0X29aL51
4YwrMOvKyMhwfVrR0dHuXB88eLCbQa+MS1lXUFCQy7quu+46N1d/0aJF9tln
n1lOTo7fL00AAAAAAFBO5F41qQ6elyOd30dV3rrQ9Zd22+dX4drMi+ZbF+/r
8rKuvXv32pIlS6xfv37WokULN6dLWVdwcLCFhoZa8+bN7ZFHHrHly5fbl19+
abm5uX6/HAEAAAAAQAUi96pJVdrMqx/umyrL7RT/vujfRXPmf1/svhR+X/iz
S79f+tv09HRLSkqyqKgomz9/vtursmnTpi7nqlWrllvLqDn1rVq1cjnY6tWr
7auvvrK8vDy/X4IAAAAAAOAKIfeirsbS2si0tDRLTEy0yMhImzNnjnXr1s3N
5grMuurXr+/WNQ4ZMsQ2b95sx44d8/slBwAAAAAAKgm5F3W1lJd1JSQk2Nat
W90ei7/85S8tPDzc7cGodYx16tRx57Pm1T/33HO2a9cu++677/x+mQEAAAAA
AB+Qe1FVuZR1paamWnx8vEVERNjkyZPtjjvucGsWvayrbt26Lvvq2LGjTZw4
0fbv328nT570+6UFAAAAAAB8Ru5FVbXKzMy0lJQUO3DggK1bt87GjBljt9xy
i4WEhLisS3sx6vtrr73WOnfu7Pq+NMf+9OnTfr+cAAAAAABAFULuRfldmkvv
ZV2xsbG2atUqGz58uFurqBldmtelrKtevXpuftcvfvELmzt3rvu77Oxsv19C
AAAAAACgiiL3ovwoZVYZGRmuTys6Otqdh0899ZSbQa+MS1lXUFCQy7qaNGli
Xbt2tYULF9pnn31mOTk5fr9sAAAAAADAVYDci6qsCsy69u7da0uWLLH+/ftb
y5Yt3ZwuZV3BwcEWGhpqzZs3t0ceecSWL19uX375peXm5vr9UgEAAAAAAFcZ
ci/qSpayrvT0dEtKSrKoqCibP3++9erVy5o2bepyrlq1arm1jJpTr/yrX79+
tnr1ajty5Ijl5eX5/fIAAAAAAABXMXIvqqJLWVdaWpolJiZaZGSkzZkzx7p1
6+ZmcwVmXfXr13frGrW+cfPmzXbs2DG/Xw4AAAAAAKAaIfeiKqKysrJc1pWQ
kGDbtm2zGTNm2C9/+UsLDw93ezBqHWOdOnXcuda2bVsbOXKk7dq1y44fP+73
SwAAAAAAAFRT5F5UWUtZV2pqqsXHx1tERIRNnjzZ7rzzTtfH5WVddevWddlX
x44dbeLEiRYTE2MnT570+7QHAAAAAAA1ALkXdTmVmZlpKSkpFhcXZ+vXr7ex
Y8faLbfcYiEhIS7r0l6M+r5hw4bWuXNnmzZtmpvtdfr0ab9PdQAAAAAAUMOQ
e1E/VF7WFRsba6tWrbLhw4dbu3bt3IwuzetS1lWvXj03v+sXv/iFzZ071834
ys7O9vv0BgAAAAAANRi5F1WylFllZGRYcnKyW5e4YsUKN3teM+iDgoJc1qWv
yrqaNGliXbt2tYULF9pnn31mOTk5fp/SAAAAAAAADrkXVTLr2rdvny1ZssT6
9+9vLVu2dHO6lHUFBwdbaGioNW/e3B555BFbtmyZffnll5abm+v3aQwAAAAA
AHAecq+aW8q60tPT3fytqKgomz9/vvXq1cuaNm3qcq5atWq5tYxhYWEu/+rX
r5+tXr3ajhw5Ynl5eX6fugAAAAAAABdF7lWzSllXWlqaJSYmWmRkpM2ZM8e6
devmZnMFZl3ak1HrGrW+cdOmTXb06FG/T1UAAAAAAIDLQu5V/SsrK8tlXQkJ
CbZt2zabMWOG3XvvvdagQQO3B6PWMdapU8edB23btrWRI0farl277Pjx436f
ngAAAAAAAGVG7lU9S1lXamqqxcfHu36tF1980e68807Xx+VlXXXr1rXw8HDr
2LGjTZw40c2wP3nypN+nJAAAAAAAQIUg96o+lZmZaSkpKRYXF2fr16+3sWPH
WqdOnSwkJMRlXbVr13bfN2zY0G6//XabNm2am+11+vRpv09DAAAAAACACkfu
dXWXl3XFxsbaqlWrbPjw4e5YakaX5nUp66pXr56b33XPPfe4eV7qBcvOzvb7
1AMAAAAAALiiyL2urtJc+oyMDEtOTnbrElesWOFmz7dp08aCgoJc1qWvyrqa
NGliXbp0sYULF9qnn35qOTk5fp9uAAAAAAAAlYbcq+pXYNa1b98+W7JkiQ0Y
MMBatmzp5nQp6woODrbQ0FBr3ry59ezZ05YtW2ZffPGF5ebm+n2KAQAAAAAA
+ILcq2qWsq709HQ3fysqKsoWLFhgvXr1sqZNm7qcq1atWm4tY1hYmMu/nnji
CVu9erUdOXLE8vLy/D6tAAAAAAAAfEfuVXVKWVdaWpolJiZaZGSkzZ0717p3
7+5mcwVmXdqTsXXr1jZ48GC3V+PRo0f9Po0AAAAAAACqHHIvf0sz5r2sa9u2
bTZjxgy79957rUGDBm4PRq1jrFOnjjtGbdu2tZEjR9rOnTvt+PHjfp86AAAA
AAAAVRq5lz9ZV2pqqsXHx7t+rRdffNHuuusu18flZV1169a18PBw69ixo02Y
MMGio6PtxIkTfp8uAAAAAAAAVw1yr8qpzMxMl3XFxcXZ+vXrbezYsdapUycL
CQlxWVft2rXd9w0bNrTbb7/dpk2b5mZ7nT592u9TBAAAAAAA4KpE7nVls66U
lBSLjY21Dz/80EaMGOGeZ83o0rwuZV316tVz87vuuecemzNnjusFy87O9vu0
AAAAAAAAuOqRe1VcaS59RkaGJScnW0xMjK1YscKeeuopa9OmjQUFBbmsS1+V
dTVp0sS6dOni9mn89NNPLScnx+9TAQAAAAAAoFoh96q4rGvfvn22ZMkSGzBg
gLVs2dLN6VLWFRwcbKGhoda8eXPr2bOnvfPOO/bFF19Ybm6u34cfAAAAAACg
2iL3KlvWlZ6e7uZvRUVFuZ6tXr16WdOmTV3OVatWLbeWMSwszOVfTzzxhFvn
eOTIEcvLy/P7kAMAAAAAANQI5F6Xl3UlJiZaZGSkzZ0717p3726NGzculnVp
T8bWrVvb4MGDLSIiwo4ePer3IQYAAAAAAKiRyL0uXJoxn5aW5rKu7du328yZ
M+2+++6zBg0auD0YlXXVqVPHPX9t27Z1c+t37txpx48f9/uwAgAAAAAA1Hjk
XudnXampqRYfH2+bNm2yKVOm2F133eX6uJR1aWZX3bp1LTw83Dp06GATJkyw
6OhoO3HihN+HEgAAAAAAAAHIvX5vmZmZLuuKi4uz9evX27hx46xTp04WEhLi
sq7atWu77xs2bGi33367vfzyy64H7NSpU34fPgAAAAAAAFxATc29lHWlpKRY
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
AAAAUOH+f44dAas=
     "], {{0, 682}, {1214, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{1214, 682},
   PlotRange->{{0, 1214}, {0, 682}}]], "Input",ExpressionUUID->
  "36dcbac1-1214-4a4b-b03e-d2ef82867bb1"]
}], "Text",
 CellChangeTimes->{{3.768807901096023*^9, 3.768807922934536*^9}, {
  3.768820127991625*^9, 3.768820161245727*^9}, {3.768821400996813*^9, 
  3.768821433236175*^9}, {3.768821482888013*^9, 3.768821541198287*^9}, {
  3.768958223274817*^9, 3.7689582400833*^9}, {3.768958325799573*^9, 
  3.768958411967373*^9}, {3.768958567504586*^9, 3.768958576953693*^9}, {
  3.768958646414845*^9, 
  3.76895867206919*^9}},ExpressionUUID->"36372e29-b1d3-4389-a259-\
255f17e1a83a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["All Possible Gates (2-input, 1-output)", "Subtitle",
 CellChangeTimes->{{3.7685964920558233`*^9, 3.768596529837948*^9}, {
  3.768597123973419*^9, 3.768597128939994*^9}, {3.768612789115624*^9, 
  3.7686127930572233`*^9}},ExpressionUUID->"9cb89302-c31d-4809-a779-\
4729fe38cc26"],

Cell["\<\
Given that there are two binary valued inputs, the total number of input \
combinations would be 4, 2^2 is 4. For each of the 4 input combination, there \
would be 2 possible binary values, 1 and 0. Therefore, the total number of \
possible functions are 2^4=16 possible values. They can be illustrated in the \
following tabulated diagram:\
\>", "Text",
 CellChangeTimes->{{3.768596518038155*^9, 3.768596605289441*^9}, {
   3.768596724920397*^9, 3.768596758534886*^9}, {3.768612659395265*^9, 
   3.7686126670029573`*^9}, 
   3.76882165191617*^9},ExpressionUUID->"7431a74a-a764-4f8e-a17d-\
e5d79ff5ea5c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"functionArray", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", " ", 
       RowBox[{"PadLeft", "[", 
        RowBox[{
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"i", ",", "2"}], "]"}], ",", "4"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "15"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tabulatedArray", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", "functionArray", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"16", ",", "5"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tabulatedArray", "=", 
   RowBox[{"Insert", "[", 
    RowBox[{"tabulatedArray", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Item", "[", 
        RowBox[{"b", ",", 
         RowBox[{"Background", "\[Rule]", "Red"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}], ",", "1", ",", "0", 
       ",", "1", ",", "0"}], "}"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tabulatedArray", "=", 
   RowBox[{
    RowBox[{"Insert", "[", 
     RowBox[{"tabulatedArray", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Item", "[", 
         RowBox[{"a", ",", 
          RowBox[{"Background", "\[Rule]", "Red"}], ",", 
          RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}], ",", "1", ",", "1", 
        ",", "0", ",", "0"}], "}"}], ",", "1"}], "]"}], "//", "Transpose"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"tabulatedArray", ",", " ", 
   RowBox[{"Frame", " ", "\[Rule]", " ", "All"}], ",", 
   RowBox[{"Background", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", "Yellow", "}"}]}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.768597424874853*^9, 3.768597433984438*^9}, {
   3.76859755281411*^9, 3.768597562994958*^9}, {3.768597621873666*^9, 
   3.768597621974799*^9}, {3.76859806657268*^9, 3.768598073185389*^9}, {
   3.768598308570841*^9, 3.768598312599639*^9}, {3.768598783835866*^9, 
   3.768598811447626*^9}, {3.768612609622922*^9, 3.76861261188538*^9}, 
   3.76862196199288*^9, {3.768622038143057*^9, 3.768622069216968*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"15292e92-5ac5-4630-bdf0-15955e141bc7"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ItemBox["a",
      Background->RGBColor[1, 0, 0],
      Frame->True,
      StripOnInput->False], 
     ItemBox["b",
      Background->RGBColor[1, 0, 0],
      Frame->True,
      StripOnInput->False], "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
     "10", "11", "12", "13", "14", "15"},
    {"1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
     "1", "1", "1", "1"},
    {"1", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", 
     "1", "1", "1", "1"},
    {"0", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", 
     "0", "0", "1", "1"},
    {"0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", 
     "0", "1", "0", "1"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       RGBColor[1, 1, 0]}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.769224694107235*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"80ef3c4a-41fa-43b4-9d4f-6a9bd65ea382"]
}, {2}]],

Cell["\<\
An alternative way of showing all these functions can be done iteratively \
using Mathematica\[CloseCurlyQuote]s built-in BooleanFunction and \
BooleanConvert.\
\>", "Text",
 CellChangeTimes->{{3.768856148170609*^9, 3.768856170597775*^9}, 
   3.768856332490387*^9, {3.768857350804226*^9, 
   3.7688573636980267`*^9}},ExpressionUUID->"d2cfe533-294f-442b-b671-\
51dc0e59a9a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"BooleanConvert", "[", 
          RowBox[{
           RowBox[{"BooleanFunction", "[", 
            RowBox[{"c", ",", "2"}], "]"}], ",", "\"\<DNF\>\""}], "]"}], "[", 
         
         RowBox[{"a", ",", "b"}], "]"}], "//", "TraditionalForm"}]}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{"c", ",", "0", ",", "15", ",", "1"}], "}"}]}], "]"}], ",", " ", 
   
   RowBox[{"Frame", "\[Rule]", " ", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.768856192415894*^9, 3.768856214453953*^9}, {
   3.768856275348586*^9, 3.768856289017706*^9}, 3.7688567550144587`*^9, {
   3.76885684409552*^9, 3.768856844621193*^9}, {3.768952522623288*^9, 
   3.7689525258310423`*^9}, {3.76922476694339*^9, 3.769224770877738*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"70fc65a0-d6d8-404b-b921-f01e98c54314"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0", 
     TagBox[
      FormBox["False",
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"1", 
     TagBox[
      FormBox[
       RowBox[{
        RowBox[{"\[Not]", "a"}], "\[And]", 
        RowBox[{"\[Not]", "b"}]}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"2", 
     TagBox[
      FormBox[
       RowBox[{
        RowBox[{"\[Not]", "a"}], "\[And]", "b"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"3", 
     TagBox[
      FormBox[
       RowBox[{"\[Not]", "a"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"4", 
     TagBox[
      FormBox[
       RowBox[{"a", "\[And]", 
        RowBox[{"\[Not]", "b"}]}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"5", 
     TagBox[
      FormBox[
       RowBox[{"\[Not]", "b"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"6", 
     TagBox[
      FormBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"a", "\[And]", 
          RowBox[{"\[Not]", "b"}]}], ")"}], "\[Or]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Not]", "a"}], "\[And]", "b"}], ")"}]}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"7", 
     TagBox[
      FormBox[
       RowBox[{
        RowBox[{"\[Not]", "a"}], "\[Or]", 
        RowBox[{"\[Not]", "b"}]}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"8", 
     TagBox[
      FormBox[
       RowBox[{"a", "\[And]", "b"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"9", 
     TagBox[
      FormBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"a", "\[And]", "b"}], ")"}], "\[Or]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Not]", "a"}], "\[And]", 
          RowBox[{"\[Not]", "b"}]}], ")"}]}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"10", 
     TagBox[
      FormBox["b",
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"11", 
     TagBox[
      FormBox[
       RowBox[{
        RowBox[{"\[Not]", "a"}], "\[Or]", "b"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"12", 
     TagBox[
      FormBox["a",
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"13", 
     TagBox[
      FormBox[
       RowBox[{"a", "\[Or]", 
        RowBox[{"\[Not]", "b"}]}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"14", 
     TagBox[
      FormBox[
       RowBox[{"a", "\[Or]", "b"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]},
    {"15", 
     TagBox[
      FormBox["True",
       TraditionalForm],
      TraditionalForm,
      Editable->True]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.768856186877377*^9, 3.76885621473654*^9}, 
   3.7688562895398483`*^9, 3.768856755660172*^9, 3.768856845113806*^9, 
   3.768952526391122*^9, {3.7692247678112297`*^9, 3.769224771113924*^9}},
 CellLabel->"Out[36]=",ExpressionUUID->"da74c8ed-cc77-46a3-8401-a52991626759"]
}, Open  ]],

Cell["\<\
The above table shows each and every Logic Gate Function can be labeled with \
a unique corresponding number. This article inherits the naming convention of \
Wolfram Automata, calling each Logic Gate a \[OpenCurlyDoubleQuote]rule\
\[CloseCurlyDoubleQuote], then, Rule 0 and Rule 15 are the \
\[OpenCurlyDoubleQuote]zero\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]one\[CloseCurlyDoubleQuote] Constant Functions. Rule 1 \
is equivalent to NAND Gate, Rule 14 is OR gate, Rule 9 is EQUAL gate, and so \
on . To classify these 16 functions, we can divide them into five groups, \
Constants, Filter, Comparison, And-Or, Negation. These four groups can be \
listed in the following table:\
\>", "Text",
 CellChangeTimes->{{3.768612806500752*^9, 3.7686131181220913`*^9}, {
  3.768622160113306*^9, 3.768622161719708*^9}, {3.768632644266321*^9, 
  3.768632662450095*^9}, {3.768725430639522*^9, 3.7687254805826283`*^9}, {
  3.768783388162335*^9, 3.768783458927516*^9}, {3.768806867634861*^9, 
  3.768806875839698*^9}, {3.768857473634323*^9, 
  3.7688574861886587`*^9}},ExpressionUUID->"bec8875c-9de9-4e12-b58f-\
9ffe807bdfea"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"groupedData", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<Group\>\"", ",", " ", "\"\<Constants\>\"", ",", " ", 
       "\"\<Filter\>\"", ",", " ", "\"\<Comparison\>\"", ",", 
       "\"\<And-OR\>\"", ",", " ", "\"\<Negation\>\""}], " ", "}"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Qualifying Rules\>\"", ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "15"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"3", ",", "5", ",", "10", ",", "12"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"6", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "14"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4", ",", "7", ",", "11", ",", "13"}], 
        "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Names of equivalent boolean operations\>\"", ",", " ", 
       RowBox[{"{", 
        RowBox[{"False", ",", "True"}], "}"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"!", "a"}], ",", " ", 
          RowBox[{"!", "b"}], ",", " ", "b", ",", " ", "a"}], "}"}], "//", 
        "TraditionalForm"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<XOR\>\"", ",", "\"\<NXOR\>\""}], "}"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"a", " ", "&&", "b"}], ",", " ", 
            RowBox[{"a", "||", "b"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<AND\>\"", ",", " ", "\"\<OR\>\""}], "}"}]}], "}"}], "//",
         "TraditionalForm"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{"a", "||", "b"}], ")"}]}], ",", " ", 
          RowBox[{
           RowBox[{"!", "a"}], "||", "b"}], ",", " ", 
          RowBox[{
           RowBox[{"!", "a"}], "&&", "b"}], ",", " ", 
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{"a", "&&", "b"}], ")"}]}], ",", " ", 
          RowBox[{"a", "||", 
           RowBox[{"!", "b"}]}], ",", " ", 
          RowBox[{"a", "&&", 
           RowBox[{"!", "b"}]}]}], "}"}], "//", "TraditionalForm"}]}], 
      "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"groupedData", ",", " ", 
   RowBox[{"Frame", "\[Rule]", " ", "All"}], ",", " ", 
   RowBox[{"Background", " ", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", "Yellow", "}"}]}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.768632697231945*^9, 3.7686329323898983`*^9}, {
   3.768632997753715*^9, 3.768633194664906*^9}, {3.768633248153326*^9, 
   3.76863336017905*^9}, {3.768633394921833*^9, 3.768633462790805*^9}, {
   3.768633496062758*^9, 3.7686335185914516`*^9}, {3.768633559545761*^9, 
   3.768633562609654*^9}, {3.768633643814434*^9, 3.768633648724546*^9}, {
   3.768633705035037*^9, 3.768633737964396*^9}, {3.768633801359749*^9, 
   3.768633803302862*^9}, {3.768633834311593*^9, 3.768633905851707*^9}, {
   3.768633965680551*^9, 3.7686340036662903`*^9}, 3.768634036779023*^9, {
   3.768634183839202*^9, 3.768634219525056*^9}, {3.768725604596081*^9, 
   3.768725604735283*^9}, {3.768783474196384*^9, 3.768783521197566*^9}, {
   3.7687982380820312`*^9, 3.768798280796212*^9}, {3.76880225403576*^9, 
   3.7688023072703447`*^9}, {3.768806893359359*^9, 3.768806914571229*^9}, {
   3.7688217411014957`*^9, 3.768821777574485*^9}, 3.768821810709578*^9, {
   3.768823118058477*^9, 3.7688231218715963`*^9}, {3.7688571109630327`*^9, 
   3.7688572902496357`*^9}, {3.768952579654459*^9, 3.768952631900679*^9}, {
   3.768965606146329*^9, 3.768965609903595*^9}, {3.769013503857687*^9, 
   3.769013647344193*^9}, {3.7690136869857197`*^9, 3.76901369692789*^9}},
 CellLabel->
  "In[447]:=",ExpressionUUID->"6e2fd8f7-3f5e-48e4-99bd-89b3aef796f6"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Group\"\>", "\<\"Constants\"\>", "\<\"Filter\"\>", \
"\<\"Comparison\"\>", "\<\"And-OR\"\>", "\<\"Negation\"\>"},
    {"\<\"Qualifying Rules\"\>", 
     RowBox[{"{", 
      RowBox[{"0", ",", "15"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "10", ",", "12"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"6", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"8", ",", "14"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4", ",", "7", ",", "11", ",", "13"}], 
      "}"}]},
    {"\<\"Names of equivalent boolean operations\"\>", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], 
     TagBox[
      FormBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\[Not]", "a"}], ",", 
         RowBox[{"\[Not]", "b"}], ",", "b", ",", "a"}], "}"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True], 
     RowBox[{"{", 
      RowBox[{"\<\"XOR\"\>", ",", "\<\"NXOR\"\>"}], "}"}], 
     TagBox[
      FormBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{"a", "\[And]", "b"}], 
           RowBox[{"a", "\[Or]", "b"}]},
          {"\<\"AND\"\>", "\<\"OR\"\>"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True], 
     TagBox[
      FormBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\[Not]", 
          RowBox[{"(", 
           RowBox[{"a", "\[Or]", "b"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"\[Not]", "a"}], "\[Or]", "b"}], ",", 
         RowBox[{
          RowBox[{"\[Not]", "a"}], "\[And]", "b"}], ",", 
         RowBox[{"\[Not]", 
          RowBox[{"(", 
           RowBox[{"a", "\[And]", "b"}], ")"}]}], ",", 
         RowBox[{"a", "\[Or]", 
          RowBox[{"\[Not]", "b"}]}], ",", 
         RowBox[{"a", "\[And]", 
          RowBox[{"\[Not]", "b"}]}]}], "}"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       RGBColor[1, 1, 0]}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.768857290685444*^9, {3.768952581871304*^9, 3.76895263242023*^9}, 
   3.768965610288319*^9, 3.769013530083255*^9, 3.7690135863332167`*^9, 
   3.769013648324532*^9, 3.7690136973609*^9},
 CellLabel->
  "Out[448]=",ExpressionUUID->"20c1ff19-c80c-4f71-9c65-96e4398b25b5"]
}, Open  ]],

Cell[TextData[{
 "It is useful to arrange these gates/rules into separate groups. One can \
quickly see that gates in each group possess similar qualities. It will also \
be easier for us to provide proofs to each group of gates. The table listed \
above, the first group is the Constant group. The word Constant, means that \
regardless of input values, the outputs would consistently be either one or \
zero. Therefore, these gates cannot be universal, since they are simply \
static values. The four Filter gates, basically choose one input signal to \
the output and ignore the other. Therefore, these gates will never combine \
information from two separate input sources. This reduce the 2-input, \
1-output gates back into a 1-input, 1-output gates, therefore, they are not \
universal. In other words all Filter gates are do not provide the ability to \
compose information. The third group compares the value presented by two \
input sources, and determine whether they are equal or not equal. The fourth \
group compose A and B inputs, however, they cannot produce the NOT operation, \
therefore, it cannot be composed into gates that requires the effects of NOT \
gate. The fifth group are the rules with two input variables and has each has \
at least some negation operations, they are all Universal Gates. In other \
words, the group of negation gates coincides with the group of universal \
logic gates. \n",
 StyleBox["A note on negation", "Subsubsection"],
 "\nIt is useful to note that, for using one arithmetic instruction to \
construct Universal Calculations, a negative sign (minus) is sufficient to \
create arbitrary arithemetic expressions. Therefore, negation is necessary \
not only in boolean values, but also in arithemtic number systems. When one \
relates logic with geometry, logical negation can be associated with twisted \
shapes like Moebius Strip. On the other hand, the ability to flip certain \
values provides the opportunity to create universal logic gates or \
universally composable shapes.\n"
}], "Text",
 CellChangeTimes->{{3.768634247985921*^9, 3.7686344450947313`*^9}, {
   3.768634479842304*^9, 3.768634504120285*^9}, {3.7686345571296167`*^9, 
   3.7686346276697893`*^9}, {3.7687256242160673`*^9, 3.768725655941124*^9}, {
   3.76878356866271*^9, 3.7687837111751547`*^9}, {3.768798316007143*^9, 
   3.768798382780428*^9}, {3.768798614203143*^9, 3.768798672767646*^9}, {
   3.7688069529599857`*^9, 3.768807108573668*^9}, {3.768807183581272*^9, 
   3.768807193756688*^9}, 3.768807225219556*^9, {3.7688072698837967`*^9, 
   3.7688072985948668`*^9}, {3.7688232177055683`*^9, 3.768823270640431*^9}, {
   3.769013136253605*^9, 3.769013398556192*^9}, {3.769013746918729*^9, 
   3.769013820081518*^9}, {3.769013861686577*^9, 3.769013947520897*^9}, {
   3.769013982734703*^9, 3.7690141487013683`*^9}, {3.769014333555388*^9, 
   3.7690144528262653`*^9}},ExpressionUUID->"d32e37d7-9f70-4c56-ae2f-\
86d3c575271f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules of Composition", "Subtitle",
 CellChangeTimes->{{3.768634706371717*^9, 
  3.7686347128510313`*^9}},ExpressionUUID->"325a6d81-12d0-46a6-945d-\
ae5d61199b4c"],

Cell["\<\
To create different functions using one type of Universal Logic Gate, we need \
to define the rule of composition. One must follow these rules:
1. All derived logic gates must all be made of the same 2-input,1-output gate \
type.

2. The same input signal can be duplicated (copied) to both inputs of the \
same gate, or copied to different gates. This signal duplication operation \
can also be considered as an \[OpenCurlyDoubleQuote]co-relation? co-span? \
co-unit?\[CloseCurlyDoubleQuote] operation. See John Baez and Brendan Fong\
\[CloseCurlyQuote]s <A Compositional Framework For Passive Networks>.

This duplicating signal phenomenon can be thought of as both input sources \
having synchronized values, the resulting truth value table can be seen here:\
\
\>", "Text",
 CellChangeTimes->{{3.7686347160108128`*^9, 3.7686348143446074`*^9}, {
   3.768634849281227*^9, 3.768635050158437*^9}, {3.768635161629726*^9, 
   3.768635221442325*^9}, {3.7686354593065042`*^9, 3.768635478888986*^9}, {
   3.76872574154243*^9, 3.7687257541561193`*^9}, {3.768781080749316*^9, 
   3.768781090875641*^9}, {3.768781134086842*^9, 3.7687811460859547`*^9}, {
   3.768781192609498*^9, 3.768781215820139*^9}, {3.7687814289842787`*^9, 
   3.7687814729679937`*^9}, {3.768781700125187*^9, 3.768781733541668*^9}, {
   3.768783231786373*^9, 3.768783233745268*^9}, {3.7687838427640333`*^9, 
   3.768783849931288*^9}, {3.768783947932118*^9, 3.768783991101034*^9}, {
   3.768798486380921*^9, 3.768798515364044*^9}, {3.7688016397904577`*^9, 
   3.768801673091299*^9}, {3.768807380178753*^9, 3.7688074445609293`*^9}, {
   3.768807521560935*^9, 3.768807554775551*^9}, 3.7688234655116777`*^9, 
   3.76882369583208*^9, {3.7688239625440187`*^9, 3.7688239841457443`*^9}, {
   3.768824413730762*^9, 3.768824465872479*^9}, {3.768955217074202*^9, 
   3.768955222858336*^9}, {3.7689552706993427`*^9, 3.768955337571951*^9}, {
   3.768955558536924*^9, 3.768955566065732*^9}, {3.768955628553279*^9, 
   3.768955662735546*^9}, {3.7689557288281107`*^9, 3.768955732146913*^9}, {
   3.769014159257598*^9, 3.76901416526423*^9}, {3.769014488572023*^9, 
   3.769014505448703*^9}},ExpressionUUID->"bdfd9552-9402-431c-ac2a-\
a84497a695a7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oneInputArray", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"tabulatedArray", ",", " ", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"oneInputArray", ",", " ", 
   RowBox[{"Frame", " ", "\[Rule]", " ", "All"}], ",", 
   RowBox[{"Background", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", "Yellow", "}"}]}], "}"}]}]}], "]"}]}], "Input",
 CellLabel->
  "In[166]:=",ExpressionUUID->"a3057e7a-6994-4b79-a20d-a6735179ebb9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ItemBox["a",
      Background->RGBColor[1, 0, 0],
      Frame->True,
      StripOnInput->False], 
     ItemBox["b",
      Background->RGBColor[1, 0, 0],
      Frame->True,
      StripOnInput->False], "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
     "10", "11", "12", "13", "14", "15"},
    {"1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
     "1", "1", "1", "1"},
    {"0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", 
     "0", "1", "0", "1"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       RGBColor[1, 1, 0]}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.768800350397011*^9},
 CellLabel->
  "Out[167]=",ExpressionUUID->"34d5256d-58ab-4173-ac77-fc85821f3043"]
}, Open  ]],

Cell["\<\
From the tabulated results, one may observe that out of 16 possible gates, 8 \
of them have constant outputs (only TRUE or FALSE). This means that, by \
synchronizing input sources, one can create certain constant values. For rule \
1(NOR), 3(!a), 5(!b), and 7(NAND), these four gates produce negated values \
compared to the inputs, therefore, these four gates can be thought of being \
able to resemble NOT gates.

3. Different signals (a and b) cannot be directly connected to the same input \
port.

It is rather trivial to implement an exhaustive algorithm that associates one \
rule number to each 2-input, 1-output logic gates for all 16 gates. We define \
a function: generic2to1LogicGate[boolean, boolean, Integer(1-16)], this \
function is similar to the Mathematica built-in BooleanFunction.\
\>", "Text",
 CellChangeTimes->{{3.7688236909020023`*^9, 3.768823701510696*^9}, {
   3.768824415825664*^9, 3.768824417137841*^9}, {3.7688244793801537`*^9, 
   3.768824528808251*^9}, {3.768825023281879*^9, 3.768825037537709*^9}, {
   3.768825127517405*^9, 3.768825192987364*^9}, {3.768825262010146*^9, 
   3.7688253145635223`*^9}, {3.768825677070985*^9, 3.7688257096646976`*^9}, {
   3.768857317920615*^9, 3.768857325135049*^9}, 3.768858369258174*^9, {
   3.768858407720008*^9, 3.76885843246214*^9}, {3.768954982158032*^9, 
   3.7689550776089697`*^9}},ExpressionUUID->"2b3d9b08-7ccb-40ee-b4fa-\
bf1ae59b2dd0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"intArray", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"PadLeft", "[", 
      RowBox[{
       RowBox[{"IntegerDigits", "[", 
        RowBox[{"i", ",", "2"}], "]"}], ",", "4"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "15"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"boolArray", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "\[Equal]", "0"}], ",", " ", "False", ",", " ", "True"}],
        "]"}], "&"}], ",", " ", "intArray", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputConfigIdx", "=", 
   RowBox[{
    RowBox[{"4", "-", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"#1", ",", "2", ",", "0"}], "]"}], "+", " ", 
       RowBox[{"If", "[", 
        RowBox[{"#2", ",", "1", ",", "0"}], "]"}]}], ")"}]}], "&"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generic2to1LogicGate", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", " ", "n"}], "}"}], ",", 
     RowBox[{
      RowBox[{
      "boolArray", "\[LeftDoubleBracket]", "n", "\[RightDoubleBracket]"}], 
      "\[LeftDoubleBracket]", 
      RowBox[{"inputConfigIdx", "[", 
       RowBox[{"a", ",", "b"}], "]"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"BooleanConvert", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"BooleanFunction", "[", 
             RowBox[{
              RowBox[{"c", "-", "1"}], ",", "2"}], "]"}], "[", 
            RowBox[{"a", ",", "b"}], "]"}], ",", "\"\<DNF\>\""}], "]"}], "//",
          "TraditionalForm"}], "  ", ",", " ", "\"\<=\>\"", ",", 
        RowBox[{"generic2to1LogicGate", "[", 
         RowBox[{"x", ",", " ", "y", ",", " ", "c"}], "]"}]}], "}"}]}], "}"}],
     "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "False", ",", "\"\<a\>\""}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", "False", ",", "\"\<b\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", " ", "True"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "16", ",", "1"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQHRd2LiRR5I3jpHT2UBCtncUUB6KVFSdlgOht6/et
B9FxHuybQLTa27ynIHqLodJfEO3hpMCUBKRNts9kBtENLtPYQbRZb60giH7l
s1cSRBfET5MH0X2V4cog+pbZNzUQvf7nnV9bgLQk3+m/IHq1nSzLViCdZsTO
AaL/7bbjAdEn1xaD6T/urwVAtL3bDzDd1J0rBqLzbm0UB9FS+lNkQXSCu6EC
iJ65OkQdRH+POqAFomWSGtxAdFja50AQbaD9IBZEp/Rl5YHoI5JK9SB62crn
DSBaI091G4h+4NW3D0SbZaw+CqJna0tfBNEKS9/eBtHbyuwfgWgAucuYyA==

  "],
 CellLabel->"In[37]:=",ExpressionUUID->"fcf1d249-6d57-4ad0-a344-7dda5c4ad753"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 13, $CellContext`x$$ = 
    False, $CellContext`y$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`x$$], False, "a"}, {False, True}}, {{
       Hold[$CellContext`y$$], False, "b"}, {False, True}}, {
      Hold[$CellContext`c$$], 1, 16, 1}}, Typeset`size$$ = {
    147., {23.76806640625, 35.23193359375}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`x$35647$$ = False, $CellContext`y$35648$$ = 
    False, $CellContext`c$35649$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`c$$ = 1, $CellContext`x$$ = 
        False, $CellContext`y$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$35647$$, False], 
        Hold[$CellContext`y$$, $CellContext`y$35648$$, False], 
        Hold[$CellContext`c$$, $CellContext`c$35649$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Grid[{{}, {
          TraditionalForm[
           BooleanConvert[
            
            BooleanFunction[$CellContext`c$$ - 1, 
             2][$CellContext`a, $CellContext`b], "DNF"]], "=", 
          $CellContext`generic2to1LogicGate[$CellContext`x$$, \
$CellContext`y$$, $CellContext`c$$]}}], 
      "Specifications" :> {{{$CellContext`x$$, False, "a"}, {
         False, True}}, {{$CellContext`y$$, False, "b"}, {
         False, True}}, {$CellContext`c$$, 1, 16, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{564., {136., 148.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7689543350915403`*^9, 3.768954356756542*^9}, {
  3.768954451815716*^9, 3.768954536399027*^9}, {3.7689545941222258`*^9, 
  3.768954659818308*^9}, {3.7689549519567127`*^9, 3.7689549529264593`*^9}, {
  3.768955090433402*^9, 3.768955091161963*^9}, {3.768969136606641*^9, 
  3.768969140702755*^9}, {3.769225070639146*^9, 3.769225081430212*^9}},
 CellLabel->"Out[41]=",ExpressionUUID->"045f84fb-8901-4b0b-a59e-d01254c412c4"]
}, Open  ]],

Cell["\<\
By following the rule of composition, we can derive the relationship of all \
sixteen gates.

It is known that constants cannot reflect the unknown input information, \
therefore, rule 0 and 15 must be terminal nodes. {0,15}

It is also known that rule 3,5 are negation rules for one input source only, \
and they are equivalent. They also can be used to emulate a NOT gate. \
Similarly, rule 10 and 12 are two equivalent rules. They can be used to \
replace each other. 

For rule 6 and 9, they are the not-equal and equal operation. So that when \
providing the same signal to both inputs, it will output False and True \
respectively. In other words, rule 6 and 9 are connected to 0 and 15 \
separately.  Moreover, 6 can produce a composite gate, so that it would be \
able to emulate a single input gate, 10 and 12. Conversely, 9 can produce a \
composite gate that also emulates 10 and 12.

For rule 8 and 14, when supplied with the same signal, it will produce 10, 12. 

The remaining rules, 1,2,4,7,11,13 will be able to emulate all 16 gates.

Therefore the adjacency information can be shown as follows:
\
\>", "Text",
 CellChangeTimes->{{3.7688003060998917`*^9, 3.76880033769874*^9}, 
   3.768969178431559*^9},ExpressionUUID->"cae72750-d73b-44ad-97b1-\
f0b02b78a826"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"booleanFunctionLabel", "[", "i_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"BooleanConvert", "[", 
     RowBox[{
      RowBox[{"BooleanFunction", "[", 
       RowBox[{"i", ",", "2"}], "]"}], ",", "\"\<DNF\>\""}], "]"}], "[", 
    RowBox[{"a", ",", "b"}], "]"}], "//", 
   "TraditionalForm"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gateDependency", "=", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"3", " ", "\[Rule]", " ", "5"}], ",", " ", 
     RowBox[{"5", "\[Rule]", "3"}], ",", " ", 
     RowBox[{"10", "\[Rule]", "12"}], ",", " ", 
     RowBox[{"12", "\[Rule]", "10"}], ",", " ", 
     RowBox[{"6", " ", "\[Rule]", " ", "0"}], ",", " ", 
     RowBox[{"9", "\[Rule]", " ", "15"}], ",", " ", 
     RowBox[{"6", "\[Rule]", "10"}], ",", " ", 
     RowBox[{"6", "\[Rule]", " ", "12"}], ",", " ", 
     RowBox[{"9", "\[Rule]", "10"}], ",", " ", 
     RowBox[{"9", "\[Rule]", "12"}], ",", " ", 
     RowBox[{"\"\<Universal\>\"", "\[Rule]", "3"}], ",", " ", 
     RowBox[{"\"\<Universal\>\"", "\[Rule]", " ", "5"}], ",", 
     RowBox[{"\"\<Universal\>\"", "\[Rule]", "8"}], ",", " ", 
     RowBox[{"\"\<Universal\>\"", "\[Rule]", " ", "14"}], ",", 
     RowBox[{
      RowBox[{"1", "\"\<Universal\>\""}], "\[Rule]", " ", "6"}], ",", " ", 
     RowBox[{"\"\<Universal\>\"", "\[Rule]", "9"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"LayeredGraphPlot", "[", 
  RowBox[{"gateDependency", ",", " ", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Name\>\"", ",", " ", 
      RowBox[{
      "\"\<Universal\>\"", " ", "\[Rule]", " ", "\"\<{1,2,4,7,11,13}\>\""}]}],
      "}"}]}], ",", " ", 
   RowBox[{"VertexSize", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Universal\>\"", " ", "\[Rule]", " ", "Large"}], "}"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.76896919938695*^9, 3.7689692148405523`*^9}, 
   3.768970984514241*^9, {3.7692263899188967`*^9, 3.769226396258606*^9}, {
   3.769226427458868*^9, 3.769226451541163*^9}, {3.769226597955122*^9, 
   3.769226601351817*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"c4de894d-4c4b-4c73-b85c-0f5880e27509"],

Cell[BoxData[
 GraphicsBox[{
   {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
    ArrowBox[BezierCurveBox[{{0., 1.}, {0.5000000000000053, 
     1.1644407471831193`}, {1., 1.}}], 0.04847715736040609], 
    ArrowBox[BezierCurveBox[{{1., 1.}, {0.5000000000000041, 
     0.8355592528168823}, {0., 1.}}], 0.04847715736040609], 
    ArrowBox[BezierCurveBox[{{4., 0.}, {4.5, 0.1644407471831153}, {5., 0.}}], 
     0.04847715736040609], 
    ArrowBox[BezierCurveBox[{{5., 0.}, {
     4.500000000000001, -0.16444074718311438`}, {4., 0.}}], 
     0.04847715736040609], 
    ArrowBox[{{4., 1.}, {4., 0.}}, 0.04847715736040609], 
    ArrowBox[{{4., 1.}, {5., 0.}}, 0.04847715736040609], 
    ArrowBox[{{4., 1.}, {3., 0.}}, 0.04847715736040609], 
    ArrowBox[{{5., 1.}, {4., 0.}}, 0.04847715736040609], 
    ArrowBox[{{5., 1.}, {5., 0.}}, 0.04847715736040609], 
    ArrowBox[{{5., 1.}, {6., 0.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {0., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {1., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {4., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {5., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {2., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {3., 1.}}, 0.04847715736040609]}, 
   {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
    0.7]}], {DiskBox[{0., 1.}, 0.04847715736040609], 
     InsetBox["3", Offset[{2, 2}, {0.04847715736040609, 1.0484771573604061}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.04847715736040609], 
     InsetBox["5", Offset[{2, 2}, {1.0484771573604061, 1.0484771573604061}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{4., 0.}, 0.04847715736040609], 
     InsetBox["10", Offset[{2, 2}, {4.048477157360406, 0.04847715736040609}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{5., 0.}, 0.04847715736040609], 
     InsetBox["12", Offset[{2, 2}, {5.048477157360406, 0.04847715736040609}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{4., 1.}, 0.04847715736040609], 
     InsetBox["6", Offset[{2, 2}, {4.048477157360406, 1.0484771573604061}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{3., 0.}, 0.04847715736040609], 
     InsetBox["0", Offset[{2, 2}, {3.048477157360406, 0.04847715736040609}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{5., 1.}, 0.04847715736040609], 
     InsetBox["9", Offset[{2, 2}, {5.048477157360406, 1.0484771573604061}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{6., 0.}, 0.04847715736040609], 
     InsetBox["15", Offset[{2, 2}, {6.048477157360406, 0.04847715736040609}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.2], 
     InsetBox["\<\"{1,2,4,7,11,13}\"\>", Offset[{2, 2}, {3.2, 2.2}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.04847715736040609], 
     InsetBox["8", Offset[{2, 2}, {2.048477157360406, 1.0484771573604061}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{3., 1.}, 0.04847715736040609], 
     InsetBox["14", Offset[{2, 2}, {3.048477157360406, 1.0484771573604061}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}}},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.768969217441019*^9, 3.768970985206236*^9, 
  3.769226397476173*^9, 3.769226452345491*^9, 3.769226602179542*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"a2ce5bf9-9be3-4c7b-af46-15e847a35ac9"]
}, Open  ]],

Cell["\<\
The same dependency graph can be drawn with associated boolean expressions.\
\>", "Text",
 CellChangeTimes->{{3.768969231174835*^9, 
  3.768969258174479*^9}},ExpressionUUID->"ff7a9be9-0882-4f9d-9d27-\
68b2861c83fc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"graphWithExpression", " ", "=", 
   RowBox[{"gateDependency", " ", "/.", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"i", "\[Rule]", " ", 
       RowBox[{"booleanFunctionLabel", "[", "i", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "15"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"LayeredGraphPlot", "[", 
  RowBox[{"graphWithExpression", ",", " ", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Name\>\"", ",", " ", 
      RowBox[{
      "\"\<Universal\>\"", " ", "\[Rule]", "  ", 
       "\"\<\!\(\*TagBox[FormBox[RowBox[{\"{\", RowBox[{RowBox[{\"\[Not]\", \
\"a\"}], \"\[And]\", RowBox[{\"\[Not]\", \
\"b\"}]}]}],TraditionalForm],TraditionalForm,Editable->True]\),\!\(\*TagBox[\
FormBox[RowBox[{RowBox[{\"\[Not]\", \"a\"}], \"\[And]\", \
\"b\"}],TraditionalForm],TraditionalForm,Editable->True]\),\!\(\*TagBox[\
FormBox[RowBox[{\"a\", \"\[And]\", RowBox[{\"\[Not]\", \
\"b\"}]}],TraditionalForm],TraditionalForm,Editable->True]\),\!\(\*TagBox[\
FormBox[RowBox[{RowBox[{\"\[Not]\", \"a\"}], \"\[Or]\", RowBox[{\"\[Not]\", \
\"b\"}]}],TraditionalForm],TraditionalForm,Editable->True]\),\!\(\*TagBox[\
FormBox[RowBox[{RowBox[{\"\[Not]\", \"a\"}], \"\[Or]\", \
\"b\"}],TraditionalForm],TraditionalForm,Editable->True]\),\!\(\*TagBox[\
FormBox[RowBox[{\"a\", \"\[Or]\", RowBox[{\"\[Not]\", \
\"b\"}]}],TraditionalForm],TraditionalForm,Editable->True]\)}\>\""}]}], 
     "}"}]}], ",", " ", 
   RowBox[{"VertexSize", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Universal\>\"", " ", "\[Rule]", " ", "Large"}], "}"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{3.768969278805387*^9, 3.768971004418112*^9},
 CellLabel->"In[53]:=",ExpressionUUID->"f86c0f78-7e30-45f5-bd18-03f60ca265f6"],

Cell[BoxData[
 GraphicsBox[{
   {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
    ArrowBox[BezierCurveBox[{{0., 1.}, {0.5000000000000053, 
     1.1644407471831193`}, {1., 1.}}], 0.04847715736040609], 
    ArrowBox[BezierCurveBox[{{1., 1.}, {0.5000000000000041, 
     0.8355592528168823}, {0., 1.}}], 0.04847715736040609], 
    ArrowBox[BezierCurveBox[{{4., 0.}, {4.5, 0.1644407471831153}, {5., 0.}}], 
     0.04847715736040609], 
    ArrowBox[BezierCurveBox[{{5., 0.}, {
     4.500000000000001, -0.16444074718311438`}, {4., 0.}}], 
     0.04847715736040609], 
    ArrowBox[{{4., 1.}, {4., 0.}}, 0.04847715736040609], 
    ArrowBox[{{4., 1.}, {5., 0.}}, 0.04847715736040609], 
    ArrowBox[{{4., 1.}, {3., 0.}}, 0.04847715736040609], 
    ArrowBox[{{5., 1.}, {4., 0.}}, 0.04847715736040609], 
    ArrowBox[{{5., 1.}, {5., 0.}}, 0.04847715736040609], 
    ArrowBox[{{5., 1.}, {6., 0.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {0., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {1., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {4., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {5., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {2., 1.}}, 0.04847715736040609], 
    ArrowBox[{{3., 2.}, {3., 1.}}, 0.04847715736040609]}, 
   {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
    0.7]}], {DiskBox[{0., 1.}, 0.04847715736040609], InsetBox[
      RowBox[{"\[Not]", "a"}], 
      Offset[{2, 2}, {0.04847715736040609, 1.0484771573604061}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.04847715736040609], 
     InsetBox[
      RowBox[{"\[Not]", "b"}], 
      Offset[{2, 2}, {1.0484771573604061, 1.0484771573604061}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{4., 0.}, 0.04847715736040609], 
     InsetBox["b", Offset[{2, 2}, {4.048477157360406, 0.04847715736040609}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{5., 0.}, 0.04847715736040609], 
     InsetBox["a", Offset[{2, 2}, {5.048477157360406, 0.04847715736040609}], 
      ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{4., 1.}, 0.04847715736040609], 
     InsetBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a", "\[And]", 
         RowBox[{"\[Not]", "b"}]}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Not]", "a"}], "\[And]", "b"}], ")"}]}], 
      Offset[{2, 2}, {4.048477157360406, 1.0484771573604061}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{3., 0.}, 0.04847715736040609], 
     InsetBox["False", 
      Offset[{2, 2}, {3.048477157360406, 0.04847715736040609}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{5., 1.}, 0.04847715736040609], 
     InsetBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a", "\[And]", "b"}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Not]", "a"}], "\[And]", 
         RowBox[{"\[Not]", "b"}]}], ")"}]}], 
      Offset[{2, 2}, {5.048477157360406, 1.0484771573604061}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{6., 0.}, 0.04847715736040609], 
     InsetBox["True", 
      Offset[{2, 2}, {6.048477157360406, 0.04847715736040609}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.2], 
     InsetBox["\<\"\\!\\(\\*TagBox[FormBox[RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"\[Not]\\\", \\\"a\\\"}], \\\"\[And]\\\", RowBox[{\\\"\
\[Not]\\\", \
\\\"b\\\"}]}]}],TraditionalForm],TraditionalForm,Editable->True]\\),\\!\\(\\*\
TagBox[FormBox[RowBox[{RowBox[{\\\"\[Not]\\\", \\\"a\\\"}], \\\"\[And]\\\", \
\\\"b\\\"}],TraditionalForm],TraditionalForm,Editable->True]\\),\\!\\(\\*\
TagBox[FormBox[RowBox[{\\\"a\\\", \\\"\[And]\\\", RowBox[{\\\"\[Not]\\\", \
\\\"b\\\"}]}],TraditionalForm],TraditionalForm,Editable->True]\\),\\!\\(\\*\
TagBox[FormBox[RowBox[{RowBox[{\\\"\[Not]\\\", \\\"a\\\"}], \\\"\[Or]\\\", \
RowBox[{\\\"\[Not]\\\", \
\\\"b\\\"}]}],TraditionalForm],TraditionalForm,Editable->True]\\),\\!\\(\\*\
TagBox[FormBox[RowBox[{RowBox[{\\\"\[Not]\\\", \\\"a\\\"}], \\\"\[Or]\\\", \\\
\"b\\\"}],TraditionalForm],TraditionalForm,Editable->True]\\),\\!\\(\\*TagBox[\
FormBox[RowBox[{\\\"a\\\", \\\"\[Or]\\\", RowBox[{\\\"\[Not]\\\", \
\\\"b\\\"}]}],TraditionalForm],TraditionalForm,Editable->True]\\)}\"\>", 
      Offset[{2, 2}, {3.2, 2.2}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.04847715736040609], 
     InsetBox[
      RowBox[{"a", "\[And]", "b"}], 
      Offset[{2, 2}, {2.048477157360406, 1.0484771573604061}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}, {DiskBox[{3., 1.}, 0.04847715736040609], 
     InsetBox[
      RowBox[{"a", "\[Or]", "b"}], 
      Offset[{2, 2}, {3.048477157360406, 1.0484771573604061}], ImageScaled[{0, 0}],
      BaseStyle->"Graphics"]}}},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->{751.4661986179281, Automatic}]], "Output",
 CellChangeTimes->{3.768969279787149*^9, 3.768971004957398*^9, 
  3.769226473205658*^9, 3.769226606391313*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"9e6cf06c-4899-4429-bb90-f1a4a07aa8e4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Categorical Logic Gates (A Lattice of Boolean Functions)", "Subtitle",
 CellChangeTimes->{{3.767453890733715*^9, 3.767453903302307*^9}, {
  3.7689710997053747`*^9, 3.768971101096449*^9}, {3.768972497927072*^9, 
  3.7689725088060493`*^9}},ExpressionUUID->"8a2c3b40-25a9-4d31-8d3d-\
2b014ef50864"],

Cell[TextData[{
 "Based on the dependency diagram shown above, the dependency structure is \
indeed a reachability diagram of functional composition. For example, the \
True and False nodes cannot be composed into any other logic gates, therefore \
these two nodes will not be able to reach other nodes from their positions. \
Clearly, the 6 universal logic gates can reach down to any of the other 10 \
nodes.\n\nThis reachability diagram can also be used as a foundation to \
categorize logic gates. It also provides a mean to categorize the properties \
of different kinds of logic gates. Visually, the diagram appears to have a \
total of 8 distinct groups of nodes, in fact, it is only 5. Since it differs \
from the 5 groups, due to the fact that True and False are categorized as two \
distinct groups. And (a,b), (!a, !b) are considered to be two separate \
groups.\n\n",
 StyleBox["Universality through topological relations\n", "Chapter"],
 "One way of using the adjacency diagram of the 16 logic gate, is to think of \
them as topological relationships. If two nodes are connected with each \
other, then, they can emulate each other\[CloseCurlyQuote]s function. For \
example, (!a) can emulate (!b), and XOR can emulate (a) and (b). These \
connections also shows that  one input and one output Logic Gates, there are \
only two types of possible functions. The identity function, where input \
values must equal to output values. The other one is the inversion function, \
that inverts the value of true to false and false to true. Therefore all the \
possible outcomes for one input source is rather trivial. We call these \
gates, the trivial Gate type. They are constants or negation of a given \
value.\nThe second class of logic gates have two input sources and one \
output. This type gates have a total of 16 possible variations. The number 16 \
comes from the following exponents of a Hom-Set, B(input, output). There is \
only one set of input combinations, (A,B). There are 2^4 possible different \
functions given these four different input values. \n\nOut of the 16 gates, \
or 2 input one output functions, there are only three types of gates. \
Constant, Trivial, and Universal Gates. We list them as follows:\n\nIn the \
Constant  results, where all possible input combinations turns into one or \
zero. These Constants account for two gates in the total 16 possible \
variations.\n\nThe  Trivial Type, AND gate, OR gate, Equal gate (XNOR), Not \
Equal (XOR) gate, and the two gates that only reflect the values of As and \
Bs. \n\nFinally, the  Universal Gates. There are total of 6 different ones. \
NAND, NOR, and four other variants, that can be represented as one group: {a \
&& !b, a || ~b, !a&&b, !a || b}."
}], "Text",
 CellChangeTimes->{{3.767453921578126*^9, 3.767454068239131*^9}, {
  3.767455045440014*^9, 3.767455458288918*^9}, {3.767455498414803*^9, 
  3.7674556297836514`*^9}, {3.7674557066357527`*^9, 3.76745585349702*^9}, {
  3.767455915087739*^9, 3.7674559395445423`*^9}, {3.768593670136485*^9, 
  3.76859367048132*^9}, {3.76872588838307*^9, 3.768725909086397*^9}, {
  3.7688585070955763`*^9, 3.7688585244674187`*^9}, {3.768971110823388*^9, 
  3.76897129726478*^9}, {3.768971586601995*^9, 3.768971803551079*^9}, {
  3.7689718350533257`*^9, 3.7689718538115683`*^9}, {3.7689734275228043`*^9, 
  3.7689735856065893`*^9}},ExpressionUUID->"840d7ca1-021b-4c49-96df-\
994c6f5c8175"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Outline", " ", "of", " ", "the", " ", "proof"}], 
  "Chapter"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 
  3.767455888277178*^9}},ExpressionUUID->"5a629dba-7bfa-48ee-a08d-\
bc85c7ac8795"],

Cell["\<\
We know that universal logic gates are gates that can be composed into any of \
the 16 gates. To show that NAND gates and other Universal Logic Gates are \
universal, we can simply show that Universal types of gates can be converted \
into NAND or NOR gates. Then, we can just argue that since NAND or NOR are \
universal, the other gates that can be converted to NAND or NOR must also be \
Universal. It requires no efforts in explaining that Constant types are \
immutable, they are just static values. We only need to show that trivial \
types can only be composed into Constant values, or they can only be composed \
into Trivial Gates. Within the trivial gate types there are total of 6 \
different gates. Let us perform proof on each one of them.\
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 
  3.767456462913175*^9}},ExpressionUUID->"0242d57a-e175-45b0-adee-\
2349d32f264c"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Testing", " ", "Universality"}], "Section"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 3.767456492339712*^9}, {3.767456584528202*^9, 
  3.767456593440065*^9}, {3.76882337761465*^9, 
  3.768823391197657*^9}},ExpressionUUID->"a28e63d8-9fd7-4381-98fc-\
af3a39ac2566"],

Cell["\<\
All sixteen gates have two boolean inputs, A and B. Each gate can only \
produce one boolean value C, but this output value can be connected to many \
possible inputs, since we allow the same component type to participate in the \
computational task. The total number of components is not limited, but to \
conserve the space of design effort, when we see a repeatable pattern, we \
will stop expanding the number of participating component. To save the effort \
of proof, we also allow static values to be used as input. Since static \
values can be assigned as initial values, and they will not change over time \
by definition. For the first two groups, we know they can only produce \
trivial results that cannot be Universal Components. Therefore, we will focus \
on the proofs of the last three groups of gates.\
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 3.767456462913175*^9}, {
  3.767456502044785*^9, 3.767456535812585*^9}, {3.7674565985531893`*^9, 
  3.767456886877078*^9}, {3.7674569260824623`*^9, 3.7674569824622383`*^9}, {
  3.767457013544498*^9, 3.767457036231967*^9}, {3.768823357963541*^9, 
  3.7688233584905577`*^9}},ExpressionUUID->"ae244b71-d422-48e8-8f9b-\
e95141590497"],

Cell[BoxData[
 StyleBox[
  RowBox[{"XOR", " ", "gate"}], "Subsection"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 3.767456492339712*^9}, {3.767457078775324*^9, 
  3.7674570972367477`*^9}},ExpressionUUID->"d7e24855-9cba-45b2-a7d1-\
7e780615c96f"],

Cell["\<\
The gate, XOR, can be thought of as the NOT EQUAL operator in logic. In other \
words, when A and B holds different values, it returns true, and when A and B \
have equal values, then XOR returns false. Meaning that it is a comparison \
operator that reflects that two values cannot be equal. takes two boolean \
variables, A and B, and produce one boolean value C. This gate cannot \
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 3.767456462913175*^9}, {
   3.767456502044785*^9, 3.767456535812585*^9}, {3.767457102749277*^9, 
   3.7674572184878387`*^9}, 
   3.7688587934871483`*^9},ExpressionUUID->"4f450c3b-cae4-4d11-8e0b-\
7770d3bf7ce7"],

Cell[BoxData[
 StyleBox[
  RowBox[{"AND", " ", "gate", " ", "is", " ", "trivial"}], 
  "Subsection"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 
  3.767456492339712*^9}},ExpressionUUID->"30e36589-6168-4252-96b2-\
4fcba4747898"],

Cell["\<\
The gate, AND, takes two boolean variables, A and B, and produce one boolean \
value C. This gate cannot \
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 3.767456462913175*^9}, {
  3.767456502044785*^9, 
  3.767456535812585*^9}},ExpressionUUID->"364b2f61-eb4e-49e2-9790-\
6c013cc59c83"],

Cell[BoxData[
 StyleBox[
  RowBox[{"AND", " ", "gate", " ", "is", " ", "trivial"}], 
  "Subsection"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 
  3.767456492339712*^9}},ExpressionUUID->"60109497-5b69-4acd-b53a-\
ea90868468f1"],

Cell["\<\
The gate, AND, takes two boolean variables, A and B, and produce one boolean \
value C. This gate cannot \
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 3.767456462913175*^9}, {
  3.767456502044785*^9, 
  3.767456535812585*^9}},ExpressionUUID->"0161d738-0eab-4b62-bca1-\
0e71a6e30819"],

Cell[BoxData[
 StyleBox[
  RowBox[{"AND", " ", "gate", " ", "is", " ", "trivial"}], 
  "Subsection"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 
  3.767456492339712*^9}},ExpressionUUID->"26296a14-f07e-480c-a934-\
35a332733683"],

Cell["\<\
The gate, AND, takes two boolean variables, A and B, and produce one boolean \
value C. This gate cannot \
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 3.767456462913175*^9}, {
  3.767456502044785*^9, 
  3.767456535812585*^9}},ExpressionUUID->"12133c6c-746c-43e4-9815-\
6bd3cd7058be"],

Cell["\<\


This paper will draw on a few mathematical fields, including boolean logic, \
topology, and  engineering practice, and quantum mechanics, as a finite set \
of content that are deeply related to the compositionality of Universal Logic \
Gates. A of digital circuits, framework of coProperties of 

 It is even less well known that, the universality property of a simple \
building component, such as NAND, can be used as the basic measuring stick \
for complexity of electric circuit, and for 

 There are three types of Logic Gates : constants, simple/trivial gates, and \
Universal Gates. Given a two input one output Logic Gate, there are total of \
16 gates. We can For constants, there are only two possible values, \
true/false. For Trivial Gates, there are total of \
\>", "Text",
 CellChangeTimes->{{3.76745391317902*^9, 3.767453913182219*^9}, 
   3.768593531746339*^9},ExpressionUUID->"6c866467-51fc-4f2b-b203-\
27f525b5f50b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Composable Logic Gates", "Subtitle",
 CellChangeTimes->{{3.767453890733715*^9, 
  3.767453903302307*^9}},ExpressionUUID->"c423863d-1f57-41cd-a80c-\
84c376b47324"],

Cell[TextData[{
 "We describe Logic Gates as composable functions, if it can take logical \
values as inputs and create logical values as outputs. Based Category Theory, \
logical functions are composable, if they are Monoids. Meaning that all the \
domains and co-domains are in the domain of boolean values, only \
(truth/false) two possible binary values. The interesting idea here is that \
designing logic gates can be turned into a simple enumeration procedure. So \
that machines, not human cognitive processes, can automatically identify all \
the possible Universal Component/Gates can be created. As it turns out, all \
Logical Gates can be constructed based on two inputs and one output gates. \
This simple assertion is important, Logic Gates must be able to at least \
combine two inputs to perform a \[OpenCurlyDoubleQuote]composition\
\[CloseCurlyDoubleQuote] of values. And out of two input one output gates, \
there are total of only 16 gates. Of the 16 gates, there are only three \
types. It is important to classify the gates in terms of types. It provides a \
way to offer a different level of reasoning about functions, while also \
showing that functions can be computed. Functions or logic gates are \
objective mathematical entities that can be enumerated, composed and \
categorized using mechanical rules, not just created written by mythical \
human opinions. \n",
 StyleBox["The Simple Logic Gates\n", "Chapter"],
 "For one input and one output Logic Gates, there are only two types of \
possible functions. The identity function, where input values must equal to \
output values. The other one is the inversion function, that inverts the \
value of true to false and false to true. Therefore all the possible outcomes \
for one input source is rather trivial. We call these gates, the trivial Gate \
type. They are constants or negation of a given value.\nThe second class of \
logic gates have two input sources and one output. This type gates have a \
total of 16 possible variations. The number 16 comes from the following \
exponents of a Hom-Set, B(input, output). There is only one set of input \
combinations, (A,B). There are 2^4 possible different functions given these \
four different input values. \n\nOut of the 16 gates, or 2 input one output \
functions, there are only three types of gates. Constant, Trivial, and \
Universal Gates. We list them as follows:\n\nIn the Constant  results, where \
all possible input combinations turns into one or zero. These Constants \
account for two gates in the total 16 possible variations.\n\nThe  Trivial \
Type, AND gate, OR gate, Equal gate (XNOR), Not Equal (XOR) gate, and the two \
gates that only reflect the values of As and Bs. \n\nFinally, the  Universal \
Gates. There are total of 6 different ones. NAND, NOR, and four other \
variants, that can be represented as one group: {A& ~B, A | ~B, ~A& B, ~A | \
B}."
}], "Text",
 CellChangeTimes->{{3.767453921578126*^9, 3.767454068239131*^9}, {
  3.767455045440014*^9, 3.767455458288918*^9}, {3.767455498414803*^9, 
  3.7674556297836514`*^9}, {3.7674557066357527`*^9, 3.76745585349702*^9}, {
  3.767455915087739*^9, 
  3.7674559395445423`*^9}},ExpressionUUID->"85a39ae4-65a3-48ed-94d1-\
113f5c208c58"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Outline", " ", "of", " ", "the", " ", "proof"}], 
  "Chapter"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 
  3.767455888277178*^9}},ExpressionUUID->"bbb2eb2e-e9bc-4e06-92c4-\
3b5ef90a36e6"],

Cell["\<\
We know that universal logic gates are gates that can be composed into any of \
the 16 gates. To show that NAND gates and other Universal Logic Gates are \
universal, we can simply show that Universal types of gates can be converted \
into NAND or NOR gates. Then, we can just argue that since NAND or NOR are \
universal, the other gates that can be converted to NAND or NOR must also be \
Universal. It requires no efforts in explaining that Constant types are \
immutable, they are just static values. We only need to show that trivial \
types can only be composed into Constant values, or they can only be composed \
into Trivial Gates. Within the trivial gate types there are total of 6 \
different gates. Let us perform proof on each one of them.\
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 
  3.767456462913175*^9}},ExpressionUUID->"13e6bd23-f6e7-4c29-a200-\
73e67908ee25"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Compositional", " ", "Rules"}], "Section"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 3.767456492339712*^9}, {3.767456584528202*^9, 
  3.767456593440065*^9}},ExpressionUUID->"07d5383b-2a57-4efc-9fef-\
52d0381968b8"],

Cell["\<\
All sixteen gates have two boolean inputs, A and B. Each gate can only \
produce one boolean value C, but this output value can be connected to many \
possible inputs, since we allow the same component type to participate in the \
computational task. The total number of components is not limited, but to \
conserve the space of design effort, when we see a repeatable pattern, we \
will stop expanding the number of participating component. To save the effort \
of proof, we also allow static values to be used as input. Since static \
values can be assigned as initial values, and they will not change over time \
by definition.\
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 3.767456462913175*^9}, {
  3.767456502044785*^9, 3.767456535812585*^9}, {3.7674565985531893`*^9, 
  3.767456886877078*^9}, {3.7674569260824623`*^9, 3.7674569824622383`*^9}, {
  3.767457013544498*^9, 
  3.767457036231967*^9}},ExpressionUUID->"8c7f8cf8-1112-462e-96cf-\
b73ff0960ac4"],

Cell[BoxData[
 StyleBox[
  RowBox[{"XOR", " ", "gate"}], "Subsection"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 3.767456492339712*^9}, {3.767457078775324*^9, 
  3.7674570972367477`*^9}},ExpressionUUID->"98ad52e6-660d-40c9-8c1f-\
7d9b2c377bd8"],

Cell["\<\
The gate, XOR, can be thought of as the NOT EQUAL operator in logic. In other \
words, when A and B holds different values, it returns true, and when A and B \
have equal values, then XOR returns false. Meaning that it is a comparison \
operator that reflects that two values cannot be equal. takes two boolean \
variables, A and B, and produce one boolean value C. This gate cannot \
\>", "Text",
 CellChangeTimes->{{3.76745599935395*^9, 3.767456462913175*^9}, {
   3.767456502044785*^9, 3.767456535812585*^9}, {3.767457102749277*^9, 
   3.7674572184878387`*^9}, 
   3.8114201136410017`*^9},ExpressionUUID->"3168cd43-2710-48e4-9de0-\
a85bf931ca58"],

Cell[BoxData[
 StyleBox[
  RowBox[{"AND", " ", "gate", " ", "is", " ", "trivial"}], 
  "Subsection"]], "Input",
 CellChangeTimes->{{3.76745588207718*^9, 3.767455888277178*^9}, {
  3.767456488148964*^9, 
  3.767456492339712*^9}},ExpressionUUID->"26414331-7bb9-44fb-a31c-\
503b4ef95abd"]
}, Open  ]]
},
WindowSize->{1440, 855},
WindowMargins->{{-32, Automatic}, {-326, Automatic}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
Magnification:>2. Inherited,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 479, 8, 234, "Subtitle",ExpressionUUID->"ad8972ab-8572-403f-918f-8eb0a46af5e9"],
Cell[1062, 32, 153, 3, 106, "Subtitle",ExpressionUUID->"d6772fa3-04e5-4441-b067-bb4501ed39e8"],
Cell[1218, 37, 3061, 44, 1104, "Text",ExpressionUUID->"b10f00f5-9bb6-4629-af90-006c56da7081"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4316, 86, 167, 6, 170, "Subtitle",ExpressionUUID->"22527d2f-774f-4be0-8963-835aa87f2bd0"],
Cell[4486, 94, 3200, 50, 1149, "Text",ExpressionUUID->"ec8c629c-9e90-4692-b044-0dc8211bc6d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7723, 149, 162, 3, 106, "Subtitle",ExpressionUUID->"e2fef28f-c24b-422d-9d35-ab029a0d8547"],
Cell[7888, 154, 4960, 73, 1554, "Text",ExpressionUUID->"7e509f4b-76b4-4b53-ad65-78ba6b0e2b59"],
Cell[CellGroupData[{
Cell[12873, 231, 403, 11, 81, "Input",ExpressionUUID->"4f53692e-3f72-4b7e-aa61-6bfa25918545"],
Cell[13279, 244, 1584, 34, 412, "Output",ExpressionUUID->"8d293e16-1e31-4026-b85c-79a41b1d4a3e"]
}, {2}]],
Cell[14875, 281, 1353, 23, 564, "Text",ExpressionUUID->"25eda055-c616-4502-b31d-a1d465daf684"],
Cell[CellGroupData[{
Cell[16253, 308, 257, 5, 59, "Input",ExpressionUUID->"eace93fc-89c1-439d-a20e-0ddf324c33d3"],
Cell[16513, 315, 7357, 152, 133, "Output",ExpressionUUID->"241a9d2c-01ad-476d-9f29-550112eaba4f"]
}, Open  ]],
Cell[23885, 470, 130636, 2142, 1696, "Text",ExpressionUUID->"36372e29-b1d3-4389-a259-255f17e1a83a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154558, 2617, 283, 4, 106, "Subtitle",ExpressionUUID->"9cb89302-c31d-4809-a779-4729fe38cc26"],
Cell[154844, 2623, 614, 11, 204, "Text",ExpressionUUID->"7431a74a-a764-4f8e-a17d-e5d79ff5ea5c"],
Cell[CellGroupData[{
Cell[155483, 2638, 2333, 60, 265, "Input",ExpressionUUID->"15292e92-5ac5-4630-bdf0-15955e141bc7"],
Cell[157819, 2700, 1137, 28, 222, "Output",ExpressionUUID->"80ef3c4a-41fa-43b4-9d4f-6a9bd65ea382"]
}, {2}]],
Cell[158968, 2731, 384, 8, 114, "Text",ExpressionUUID->"d2cfe533-294f-442b-b671-51dc0e59a9a3"],
Cell[CellGroupData[{
Cell[159377, 2743, 981, 24, 142, "Input",ExpressionUUID->"70fc65a0-d6d8-404b-b921-f01e98c54314"],
Cell[160361, 2769, 3353, 138, 630, "Output",ExpressionUUID->"da74c8ed-cc77-46a3-8401-a52991626759"]
}, Open  ]],
Cell[163729, 2910, 1136, 18, 294, "Text",ExpressionUUID->"bec8875c-9de9-4e12-b58f-9ffe807bdfea"],
Cell[CellGroupData[{
Cell[164890, 2932, 3953, 89, 388, "Input",ExpressionUUID->"6e2fd8f7-3f5e-48e4-99bd-89b3aef796f6"],
Cell[168846, 3023, 2863, 82, 426, "Output",ExpressionUUID->"20c1ff19-c80c-4f71-9c65-96e4398b25b5"]
}, Open  ]],
Cell[171724, 3108, 2948, 42, 1024, "Text",ExpressionUUID->"d32e37d7-9f70-4c56-ae2f-86d3c575271f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[174709, 3155, 168, 3, 106, "Subtitle",ExpressionUUID->"325a6d81-12d0-46a6-945d-ae5d61199b4c"],
Cell[174880, 3160, 2203, 35, 519, "Text",ExpressionUUID->"bdfd9552-9402-431c-ac2a-a84497a695a7"],
Cell[CellGroupData[{
Cell[177108, 3199, 581, 15, 101, "Input",ExpressionUUID->"a3057e7a-6994-4b79-a20d-a6735179ebb9"],
Cell[177692, 3216, 937, 25, 150, "Output",ExpressionUUID->"34d5256d-58ab-4173-ac77-fc85821f3043"]
}, Open  ]],
Cell[178644, 3244, 1422, 24, 519, "Text",ExpressionUUID->"2b3d9b08-7ccb-40ee-b4fa-bf1ae59b2dd0"],
Cell[CellGroupData[{
Cell[180091, 3272, 3166, 89, 470, "Input",ExpressionUUID->"fcf1d249-6d57-4ad0-a344-7dda5c4ad753"],
Cell[183260, 3363, 2815, 54, 320, "Output",ExpressionUUID->"045f84fb-8901-4b0b-a59e-d01254c412c4"]
}, Open  ]],
Cell[186090, 3420, 1286, 28, 969, "Text",ExpressionUUID->"cae72750-d73b-44ad-97b1-f0b02b78a826"],
Cell[CellGroupData[{
Cell[187401, 3452, 2169, 49, 347, "Input",ExpressionUUID->"c4de894d-4c4b-4c73-b85c-0f5880e27509"],
Cell[189573, 3503, 3547, 63, 340, "Output",ExpressionUUID->"a2ce5bf9-9be3-4c7b-af46-15e847a35ac9"]
}, Open  ]],
Cell[193135, 3569, 225, 5, 69, "Text",ExpressionUUID->"ff7a9be9-0882-4f9d-9d27-68b2861c83fc"],
Cell[CellGroupData[{
Cell[193385, 3578, 1819, 37, 265, "Input",ExpressionUUID->"f86c0f78-7e30-45f5-bd18-03f60ca265f6"],
Cell[195207, 3617, 5091, 95, 646, "Output",ExpressionUUID->"9e6cf06c-4899-4429-bb90-f1a4a07aa8e4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[200347, 3718, 301, 4, 106, "Subtitle",ExpressionUUID->"8a2c3b40-25a9-4d31-8d3d-2b014ef50864"],
Cell[200651, 3724, 3421, 48, 1693, "Text",ExpressionUUID->"840d7ca1-021b-4c49-96df-994c6f5c8175"],
Cell[204075, 3774, 234, 6, 112, "Input",ExpressionUUID->"5a629dba-7bfa-48ee-a08d-bc85c7ac8795"],
Cell[204312, 3782, 901, 14, 384, "Text",ExpressionUUID->"0242d57a-e175-45b0-adee-2349d32f264c"],
Cell[205216, 3798, 358, 7, 98, "Input",ExpressionUUID->"a28e63d8-9fd7-4381-98fc-af3a39ac2566"],
Cell[205577, 3807, 1213, 18, 429, "Text",ExpressionUUID->"ae244b71-d422-48e8-8f9b-e95141590497"],
Cell[206793, 3827, 303, 6, 77, "Input",ExpressionUUID->"d7e24855-9cba-45b2-a7d1-7e780615c96f"],
Cell[207099, 3835, 659, 11, 204, "Text",ExpressionUUID->"4f450c3b-cae4-4d11-8e0b-7770d3bf7ce7"],
Cell[207761, 3848, 285, 7, 77, "Input",ExpressionUUID->"30e36589-6168-4252-96b2-4fcba4747898"],
Cell[208049, 3857, 303, 7, 114, "Text",ExpressionUUID->"364b2f61-eb4e-49e2-9790-6c013cc59c83"],
Cell[208355, 3866, 285, 7, 77, "Input",ExpressionUUID->"60109497-5b69-4acd-b53a-ea90868468f1"],
Cell[208643, 3875, 303, 7, 114, "Text",ExpressionUUID->"0161d738-0eab-4b62-bca1-0e71a6e30819"],
Cell[208949, 3884, 285, 7, 77, "Input",ExpressionUUID->"26296a14-f07e-480c-a934-35a332733683"],
Cell[209237, 3893, 303, 7, 114, "Text",ExpressionUUID->"12133c6c-746c-43e4-9815-6bd3cd7058be"],
Cell[209543, 3902, 946, 19, 564, "Text",ExpressionUUID->"6c866467-51fc-4f2b-b203-27f525b5f50b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210526, 3926, 168, 3, 106, "Subtitle",ExpressionUUID->"c423863d-1f57-41cd-a80c-84c376b47324"],
Cell[210697, 3931, 3241, 47, 1693, "Text",ExpressionUUID->"85a39ae4-65a3-48ed-94d1-113f5c208c58"],
Cell[213941, 3980, 234, 6, 112, "Input",ExpressionUUID->"bbb2eb2e-e9bc-4e06-92c4-3b5ef90a36e6"],
Cell[214178, 3988, 901, 14, 384, "Text",ExpressionUUID->"13e6bd23-f6e7-4c29-a200-73e67908ee25"],
Cell[215082, 4004, 309, 6, 98, "Input",ExpressionUUID->"07d5383b-2a57-4efc-9fef-52d0381968b8"],
Cell[215394, 4012, 978, 16, 339, "Text",ExpressionUUID->"8c7f8cf8-1112-462e-96cf-b73ff0960ac4"],
Cell[216375, 4030, 303, 6, 77, "Input",ExpressionUUID->"98ad52e6-660d-40c9-8c1f-7d9b2c377bd8"],
Cell[216681, 4038, 659, 11, 204, "Text",ExpressionUUID->"3168cd43-2710-48e4-9de0-a85bf931ca58"],
Cell[217343, 4051, 285, 7, 77, "Input",ExpressionUUID->"26414331-7bb9-44fb-a31c-503b4ef95abd"]
}, Open  ]]
}
]
*)

