// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static array ram;
    static array heap;
    static array freeList;
    int stackBase, heapBase;
    int free, block;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let ioMeomoryMap = 16384;
        let heap = heapBase;
   
        let heap[0] = 0;
        let heap[1] = ioMeomoryMap - heapBase -1; //heap size
        
        let freeList = heapBase;
        let freeList.size = ioMeomoryMap - heapBase -1;
        let freeList.next = 0;

        let stackBase = 256;

        let free = heapBase;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        let block = free;
        let free = free + size;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
    }    
}
